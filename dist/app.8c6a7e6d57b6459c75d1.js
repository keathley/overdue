webpackJsonp([1],{0:function(module,exports,__webpack_require__){eval("'use strict';\n\nvar _routes = __webpack_require__(106);\n\nvar React = __webpack_require__(7),\n    Router = __webpack_require__(36);\n\n__webpack_require__(108);\n\nRouter.run(_routes.routes, Router.HashLocation, function (Handler) {\n  React.render(React.createElement(Handler, null), document.body);\n});\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/index.jsx\n ** module id = 0\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./app/index.jsx?")},103:function(module,exports,__webpack_require__){eval("'use strict';\n\nvar React = __webpack_require__(7),\n    Router = __webpack_require__(36);\n\n__webpack_require__(107);\n\nvar App = React.createClass({\n  displayName: 'App',\n\n  render: function render() {\n    return React.createElement(\n      'main',\n      { className: 'app' },\n      React.createElement(Router.RouteHandler, this.props)\n    );\n  }\n});\n\nmodule.exports = App;\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/components/App.jsx\n ** module id = 103\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./app/components/App.jsx?")},104:function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _react = __webpack_require__(7);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reqwest = __webpack_require__(204);\n\nvar _reqwest2 = _interopRequireDefault(_reqwest);\n\nvar Book = _react2['default'].createClass({\n  displayName: 'Book',\n\n  getInitialState: function getInitialState() {\n    return {\n      preview: '',\n      title: '',\n      info: ''\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    (0, _reqwest2['default'])({\n      url: this.url(this.props.code),\n      type: 'jsonp'\n    }).then(this.handleSuccess).fail(this.handleFailure);\n  },\n\n  url: function url(isbn) {\n    return 'https://openlibrary.org/api/books?bibkeys=ISBN:' + isbn + '&jscmd=data&callback=handleSuccess';\n  },\n\n  handleSuccess: function handleSuccess(resp) {\n    console.log(this.props.code);\n    console.log(resp);\n\n    var values = _.values(resp)[0],\n        preview = values.cover.medium,\n        info = values.url,\n        title = values.title;\n\n    this.setState({\n      preview: preview,\n      info: info,\n      title: title\n    });\n  },\n\n  handleFailure: function handleFailure(errors, msg) {\n    console.error('errors', msg, errors);\n  },\n\n  render: function render() {\n    return _react2['default'].createElement(\n      'div',\n      { className: 'book' },\n      _react2['default'].createElement('img', { src: this.state.preview, alt: 'book thumbnail' }),\n      _react2['default'].createElement(\n        'a',\n        { href: this.state.info },\n        this.state.title\n      )\n    );\n  }\n});\n\nexports['default'] = Book;\nmodule.exports = exports['default'];\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/components/Book.jsx\n ** module id = 104\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./app/components/Book.jsx?")},105:function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _react = __webpack_require__(7);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _quagga = __webpack_require__(110);\n\nvar _quagga2 = _interopRequireDefault(_quagga);\n\nvar _lodash = __webpack_require__(109);\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _Book = __webpack_require__(104);\n\nvar _Book2 = _interopRequireDefault(_Book);\n\nvar Scanner = _react2['default'].createClass({\n  displayName: 'Scanner',\n\n  quarraOpts: {\n    inputStream: {\n      size: 640,\n      singleChannel: false\n    },\n    locator: {\n      patchSize: \"medium\",\n      halfSample: false\n    },\n    numOfWorkers: 1,\n    decoder: {\n      readers: [\"ean_reader\"]\n    },\n    locate: true,\n    src: null\n  },\n\n  getInitialState: function getInitialState() {\n    return { codes: [] };\n  },\n\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    _quagga2['default'].onDetected(function (result) {\n      var code = result.codeResult.code;\n      _this.setState({ codes: _this.state.codes.concat([code]) });\n    });\n  },\n\n  handleFileChosen: function handleFileChosen(e) {\n    e.preventDefault();\n    var file = e.currentTarget.files[0],\n        src = URL.createObjectURL(e.currentTarget.files[0]),\n        config = _lodash2['default'].extend({}, this.quarraOpts, { src: src });\n\n    _quagga2['default'].decodeSingle(config, function (result) {});\n  },\n\n  render: function render() {\n    var codes = this.state.codes.map(function (code) {\n      return _react2['default'].createElement(_Book2['default'], { code: code, key: code });\n    });\n\n    return _react2['default'].createElement(\n      'div',\n      { className: 'scanner' },\n      _react2['default'].createElement('input', { type: 'file', capture: true, onChange: this.handleFileChosen }),\n      codes\n    );\n  }\n});\n\nexports['default'] = Scanner;\nmodule.exports = exports['default'];\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/components/Scanner.jsx\n ** module id = 105\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./app/components/Scanner.jsx?")},106:function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _react = __webpack_require__(7);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactRouter = __webpack_require__(36);\n\nvar _reactRouter2 = _interopRequireDefault(_reactRouter);\n\nvar _componentsApp = __webpack_require__(103);\n\nvar _componentsApp2 = _interopRequireDefault(_componentsApp);\n\nvar _componentsScanner = __webpack_require__(105);\n\nvar _componentsScanner2 = _interopRequireDefault(_componentsScanner);\n\nvar routes = _react2['default'].createElement(\n  _reactRouter2['default'].Route,\n  { name: 'app', path: '/', handler: _componentsApp2['default'] },\n  _react2['default'].createElement(_reactRouter2['default'].DefaultRoute, { handler: _componentsScanner2['default'] })\n);\nexports.routes = routes;\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/routes.jsx\n ** module id = 106\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./app/routes.jsx?")},107:function(module,exports){eval("// removed by extract-text-webpack-plugin\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/styles/components/app.css\n ** module id = 107\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./app/styles/components/app.css?")},108:107,109:function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**\n * @license\n * lodash 3.10.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern -d -o ./index.js`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '3.10.1';\n\n  /** Used to compose bitmasks for wrapper metadata. */\n  var BIND_FLAG = 1,\n      BIND_KEY_FLAG = 2,\n      CURRY_BOUND_FLAG = 4,\n      CURRY_FLAG = 8,\n      CURRY_RIGHT_FLAG = 16,\n      PARTIAL_FLAG = 32,\n      PARTIAL_RIGHT_FLAG = 64,\n      ARY_FLAG = 128,\n      REARG_FLAG = 256;\n\n  /** Used as default options for `_.trunc`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect when a function becomes hot. */\n  var HOT_COUNT = 150,\n      HOT_SPAN = 16;\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2;\n\n  /** Used as the `TypeError` message for \"Functions\" methods. */\n  var FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      objectTag = '[object Object]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      weakMapTag = '[object WeakMap]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,\n      reUnescapedHtml = /[&<>\"'`]/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\n\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\n\\\\]|\\\\.)*?)\\2)\\]/g;\n\n  /**\n   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)\n   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).\n   */\n  var reRegExpChars = /^[:!,]|[\\\\^$.*+?()[\\]{}|\\/]|(^[0-9a-fA-Fnrtuvx])|([\\n\\r\\u2028\\u2029])/g,\n      reHasRegExpChars = RegExp(reRegExpChars.source);\n\n  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */\n  var reComboMark = /[\\u0300-\\u036f\\ufe20-\\ufe23]/g;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect hexadecimal string values. */\n  var reHasHexPrefix = /^0[xX]/;\n\n  /** Used to detect host constructors (Safari > 5). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^\\d+$/;\n\n  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */\n  var reLatin1 = /[\\xc0-\\xd6\\xd8-\\xde\\xdf-\\xf6\\xf8-\\xff]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to match words to create compound words. */\n  var reWords = (function() {\n    var upper = '[A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde]',\n        lower = '[a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff]+';\n\n    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');\n  }());\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',\n    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',\n    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dateTag] = typedArrayTags[errorTag] =\n  typedArrayTags[funcTag] = typedArrayTags[mapTag] =\n  typedArrayTags[numberTag] = typedArrayTags[objectTag] =\n  typedArrayTags[regexpTag] = typedArrayTags[setTag] =\n  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =\n  cloneableTags[dateTag] = cloneableTags[float32Tag] =\n  cloneableTags[float64Tag] = cloneableTags[int8Tag] =\n  cloneableTags[int16Tag] = cloneableTags[int32Tag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[stringTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[mapTag] = cloneableTags[setTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map latin-1 supplementary letters to basic latin letters. */\n  var deburredLetters = {\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcC': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xeC': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '`': '&#96;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\",\n    '&#96;': '`'\n  };\n\n  /** Used to determine if values are of the language type `Object`. */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Used to escape characters for inclusion in compiled regexes. */\n  var regexpEscapes = {\n    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',\n    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',\n    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',\n    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',\n    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Detect free variable `exports`. */\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = objectTypes[typeof self] && self && self.Object && self;\n\n  /** Detect free variable `window`. */\n  var freeWindow = objectTypes[typeof window] && window && window.Object && window;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;\n\n  /**\n   * Used as a reference to the global object.\n   *\n   * The `this` value is used if it's the global object to avoid Greasemonkey's\n   * restricted `window` object, otherwise the `window` object is used.\n   */\n  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * The base implementation of `compareAscending` which compares values and\n   * sorts them in ascending order without guaranteeing a stable sort.\n   *\n   * @private\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @returns {number} Returns the sort order indicator for `value`.\n   */\n  function baseCompareAscending(value, other) {\n    if (value !== other) {\n      var valIsNull = value === null,\n          valIsUndef = value === undefined,\n          valIsReflexive = value === value;\n\n      var othIsNull = other === null,\n          othIsUndef = other === undefined,\n          othIsReflexive = other === other;\n\n      if ((value > other && !othIsNull) || !valIsReflexive ||\n          (valIsNull && !othIsUndef && othIsReflexive) ||\n          (valIsUndef && othIsReflexive)) {\n        return 1;\n      }\n      if ((value < other && !valIsNull) || !othIsReflexive ||\n          (othIsNull && !valIsUndef && valIsReflexive) ||\n          (othIsUndef && valIsReflexive)) {\n        return -1;\n      }\n    }\n    return 0;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for callback shorthands and `this` binding.\n   *\n   * @private\n   * @param {Array} array The array to search.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromRight) {\n    var length = array.length,\n        index = fromRight ? length : -1;\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without support for binary searches.\n   *\n   * @private\n   * @param {Array} array The array to search.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    if (value !== value) {\n      return indexOfNaN(array, fromIndex);\n    }\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isFunction` without support for environments\n   * with incorrect `typeof` results.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n   */\n  function baseIsFunction(value) {\n    // Avoid a Chakra JIT bug in compatibility modes of IE 11.\n    // See https://github.com/jashkenas/underscore/issues/1621 for more details.\n    return typeof value == 'function' || false;\n  }\n\n  /**\n   * Converts `value` to a string if it's not one. An empty string is returned\n   * for `null` or `undefined` values.\n   *\n   * @private\n   * @param {*} value The value to process.\n   * @returns {string} Returns the string.\n   */\n  function baseToString(value) {\n    return value == null ? '' : (value + '');\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimLeft` to get the index of the first character\n   * of `string` that is not found in `chars`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @param {string} chars The characters to find.\n   * @returns {number} Returns the index of the first character not found in `chars`.\n   */\n  function charsLeftIndex(string, chars) {\n    var index = -1,\n        length = string.length;\n\n    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimRight` to get the index of the last character\n   * of `string` that is not found in `chars`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @param {string} chars The characters to find.\n   * @returns {number} Returns the index of the last character not found in `chars`.\n   */\n  function charsRightIndex(string, chars) {\n    var index = string.length;\n\n    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.sortBy` to compare transformed elements of a collection and stable\n   * sort them in ascending order.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @returns {number} Returns the sort order indicator for `object`.\n   */\n  function compareAscending(object, other) {\n    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);\n  }\n\n  /**\n   * Used by `_.sortByOrder` to compare multiple properties of a value to another\n   * and stable sort them.\n   *\n   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,\n   * a value is sorted in ascending order if its corresponding order is \"asc\", and\n   * descending if \"desc\".\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {boolean[]} orders The order to sort by for each property.\n   * @returns {number} Returns the sort order indicator for `object`.\n   */\n  function compareMultiple(object, other, orders) {\n    var index = -1,\n        objCriteria = object.criteria,\n        othCriteria = other.criteria,\n        length = objCriteria.length,\n        ordersLength = orders.length;\n\n    while (++index < length) {\n      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);\n      if (result) {\n        if (index >= ordersLength) {\n          return result;\n        }\n        var order = orders[index];\n        return result * ((order === 'asc' || order === true) ? 1 : -1);\n      }\n    }\n    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n    // that causes it, under certain circumstances, to provide the same value for\n    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n    // for more details.\n    //\n    // This also ensures a stable sort in V8 and other engines.\n    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.\n    return object.index - other.index;\n  }\n\n  /**\n   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  function deburrLetter(letter) {\n    return deburredLetters[letter];\n  }\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeHtmlChar(chr) {\n    return htmlEscapes[chr];\n  }\n\n  /**\n   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @param {string} leadingChar The capture group for a leading character.\n   * @param {string} whitespaceChar The capture group for a whitespace character.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {\n    if (leadingChar) {\n      chr = regexpEscapes[chr];\n    } else if (whitespaceChar) {\n      chr = stringEscapes[chr];\n    }\n    return '\\\\' + chr;\n  }\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the index at which the first occurrence of `NaN` is found in `array`.\n   *\n   * @private\n   * @param {Array} array The array to search.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched `NaN`, else `-1`.\n   */\n  function indexOfNaN(array, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 0 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      var other = array[index];\n      if (other !== other) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Checks if `value` is object-like.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   */\n  function isObjectLike(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /**\n   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a\n   * character code is whitespace.\n   *\n   * @private\n   * @param {number} charCode The character code to inspect.\n   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.\n   */\n  function isSpace(charCode) {\n    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||\n      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = -1,\n        result = [];\n\n    while (++index < length) {\n      if (array[index] === placeholder) {\n        array[index] = PLACEHOLDER;\n        result[++resIndex] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * An implementation of `_.uniq` optimized for sorted arrays without support\n   * for callback shorthands and `this` binding.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} [iteratee] The function invoked per iteration.\n   * @returns {Array} Returns the new duplicate-value-free array.\n   */\n  function sortedUniq(array, iteratee) {\n    var seen,\n        index = -1,\n        length = array.length,\n        resIndex = -1,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index],\n          computed = iteratee ? iteratee(value, index, array) : value;\n\n      if (!index || seen !== computed) {\n        seen = computed;\n        result[++resIndex] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace\n   * character of `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the index of the first non-whitespace character.\n   */\n  function trimmedLeftIndex(string) {\n    var index = -1,\n        length = string.length;\n\n    while (++index < length && isSpace(string.charCodeAt(index))) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace\n   * character of `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the index of the last non-whitespace character.\n   */\n  function trimmedRightIndex(string) {\n    var index = string.length;\n\n    while (index-- && isSpace(string.charCodeAt(index))) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  function unescapeHtmlChar(chr) {\n    return htmlUnescapes[chr];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the given `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @category Utility\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // using `context` to mock `Date#getTime` use in `_.now`\n   * var mock = _.runInContext({\n   *   'Date': function() {\n   *     return { 'getTime': getTimeMock };\n   *   }\n   * });\n   *\n   * // or creating a suped-up `defer` in Node.js\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  function runInContext(context) {\n    // Avoid issues with some ES3 environments that attempt to use values, named\n    // after built-in constructors like `Object`, for the creation of literals.\n    // ES5 clears this up by stating that literals must use built-in constructors.\n    // See https://es5.github.io/#x11.1.5 for more details.\n    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;\n\n    /** Native constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Number = context.Number,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for native method references. */\n    var arrayProto = Array.prototype,\n        objectProto = Object.prototype,\n        stringProto = String.prototype;\n\n    /** Used to resolve the decompiled source of functions. */\n    var fnToString = Function.prototype.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /**\n     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var objToString = objectProto.toString;\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Native method references. */\n    var ArrayBuffer = context.ArrayBuffer,\n        clearTimeout = context.clearTimeout,\n        parseFloat = context.parseFloat,\n        pow = Math.pow,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        Set = getNative(context, 'Set'),\n        setTimeout = context.setTimeout,\n        splice = arrayProto.splice,\n        Uint8Array = context.Uint8Array,\n        WeakMap = getNative(context, 'WeakMap');\n\n    /* Native method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeCreate = getNative(Object, 'create'),\n        nativeFloor = Math.floor,\n        nativeIsArray = getNative(Array, 'isArray'),\n        nativeIsFinite = context.isFinite,\n        nativeKeys = getNative(Object, 'keys'),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = getNative(Date, 'now'),\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random;\n\n    /** Used as references for `-Infinity` and `Infinity`. */\n    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,\n        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;\n\n    /** Used as references for the maximum length and index of an array. */\n    var MAX_ARRAY_LENGTH = 4294967295,\n        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n    /**\n     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n     * of an array-like value.\n     */\n    var MAX_SAFE_INTEGER = 9007199254740991;\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit chaining.\n     * Methods that operate on and return arrays, collections, and functions can\n     * be chained together. Methods that retrieve a single value or may return a\n     * primitive value will automatically end the chain returning the unwrapped\n     * value. Explicit chaining may be enabled using `_.chain`. The execution of\n     * chained methods is lazy, that is, execution is deferred until `_#value`\n     * is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut\n     * fusion is an optimization strategy which merge iteratee calls; this can help\n     * to avoid the creation of intermediate data structures and greatly reduce the\n     * number of iteratee executions.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,\n     * `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,\n     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,\n     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,\n     * and `where`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,\n     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,\n     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,\n     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,\n     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,\n     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,\n     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,\n     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,\n     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,\n     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,\n     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,\n     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,\n     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,\n     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,\n     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,\n     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,\n     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,\n     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,\n     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,\n     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,\n     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,\n     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,\n     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,\n     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,\n     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,\n     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,\n     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,\n     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,\n     * `unescape`, `uniqueId`, `value`, and `words`\n     *\n     * The wrapper method `sample` will return a wrapped value when `n` is provided,\n     * otherwise an unwrapped value is returned.\n     *\n     * @name _\n     * @constructor\n     * @category Chain\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // returns an unwrapped value\n     * wrapped.reduce(function(total, n) {\n     *   return total + n;\n     * });\n     * // => 6\n     *\n     * // returns a wrapped value\n     * var squares = wrapped.map(function(n) {\n     *   return n * n;\n     * });\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The function whose prototype all chaining wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.\n     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.\n     */\n    function LodashWrapper(value, chainAll, actions) {\n      this.__wrapped__ = value;\n      this.__actions__ = actions || [];\n      this.__chain__ = !!chainAll;\n    }\n\n    /**\n     * An object environment feature flags.\n     *\n     * @static\n     * @memberOf _\n     * @type Object\n     */\n    var support = lodash.support = {};\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB). Change the following template settings to use\n     * alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type Object\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type string\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type Object\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type Function\n         */\n        '_': lodash\n      }\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = POSITIVE_INFINITY;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = arrayCopy(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = arrayCopy(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = arrayCopy(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {\n        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a cache object to store key/value pairs.\n     *\n     * @private\n     * @static\n     * @name Cache\n     * @memberOf _.memoize\n     */\n    function MapCache() {\n      this.__data__ = {};\n    }\n\n    /**\n     * Removes `key` and its value from the cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf _.memoize.Cache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.\n     */\n    function mapDelete(key) {\n      return this.has(key) && delete this.__data__[key];\n    }\n\n    /**\n     * Gets the cached value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf _.memoize.Cache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the cached value.\n     */\n    function mapGet(key) {\n      return key == '__proto__' ? undefined : this.__data__[key];\n    }\n\n    /**\n     * Checks if a cached value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf _.memoize.Cache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapHas(key) {\n      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);\n    }\n\n    /**\n     * Sets `value` to `key` of the cache.\n     *\n     * @private\n     * @name set\n     * @memberOf _.memoize.Cache\n     * @param {string} key The key of the value to cache.\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache object.\n     */\n    function mapSet(key, value) {\n      if (key != '__proto__') {\n        this.__data__[key] = value;\n      }\n      return this;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates a cache object to store unique values.\n     *\n     * @private\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var length = values ? values.length : 0;\n\n      this.data = { 'hash': nativeCreate(null), 'set': new Set };\n      while (length--) {\n        this.push(values[length]);\n      }\n    }\n\n    /**\n     * Checks if `value` is in `cache` mimicking the return signature of\n     * `_.indexOf` by returning `0` if the value is found, else `-1`.\n     *\n     * @private\n     * @param {Object} cache The cache to search.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `0` if `value` is found, else `-1`.\n     */\n    function cacheIndexOf(cache, value) {\n      var data = cache.data,\n          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];\n\n      return result ? 0 : -1;\n    }\n\n    /**\n     * Adds `value` to the cache.\n     *\n     * @private\n     * @name push\n     * @memberOf SetCache\n     * @param {*} value The value to cache.\n     */\n    function cachePush(value) {\n      var data = this.data;\n      if (typeof value == 'string' || isObject(value)) {\n        data.set.add(value);\n      } else {\n        data.hash[value] = true;\n      }\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a new array joining `array` with `other`.\n     *\n     * @private\n     * @param {Array} array The array to join.\n     * @param {Array} other The other array to join.\n     * @returns {Array} Returns the new concatenated array.\n     */\n    function arrayConcat(array, other) {\n      var index = -1,\n          length = array.length,\n          othIndex = -1,\n          othLength = other.length,\n          result = Array(length + othLength);\n\n      while (++index < length) {\n        result[index] = array[index];\n      }\n      while (++othIndex < othLength) {\n        result[index++] = other[othIndex];\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayCopy(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * A specialized version of `_.forEach` for arrays without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayEach(array, iteratee) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        if (iteratee(array[index], index, array) === false) {\n          break;\n        }\n      }\n      return array;\n    }\n\n    /**\n     * A specialized version of `_.forEachRight` for arrays without support for\n     * callback shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayEachRight(array, iteratee) {\n      var length = array.length;\n\n      while (length--) {\n        if (iteratee(array[length], length, array) === false) {\n          break;\n        }\n      }\n      return array;\n    }\n\n    /**\n     * A specialized version of `_.every` for arrays without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     */\n    function arrayEvery(array, predicate) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        if (!predicate(array[index], index, array)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`\n     * with one argument: (value).\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} comparator The function used to compare values.\n     * @param {*} exValue The initial extremum value.\n     * @returns {*} Returns the extremum value.\n     */\n    function arrayExtremum(array, iteratee, comparator, exValue) {\n      var index = -1,\n          length = array.length,\n          computed = exValue,\n          result = computed;\n\n      while (++index < length) {\n        var value = array[index],\n            current = +iteratee(value);\n\n        if (comparator(current, computed)) {\n          computed = current;\n          result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.filter` for arrays without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function arrayFilter(array, predicate) {\n      var index = -1,\n          length = array.length,\n          resIndex = -1,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result[++resIndex] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.map` for arrays without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function arrayMap(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          result = Array(length);\n\n      while (++index < length) {\n        result[index] = iteratee(array[index], index, array);\n      }\n      return result;\n    }\n\n    /**\n     * Appends the elements of `values` to `array`.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to append.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayPush(array, values) {\n      var index = -1,\n          length = values.length,\n          offset = array.length;\n\n      while (++index < length) {\n        array[offset + index] = values[index];\n      }\n      return array;\n    }\n\n    /**\n     * A specialized version of `_.reduce` for arrays without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @param {boolean} [initFromArray] Specify using the first element of `array`\n     *  as the initial value.\n     * @returns {*} Returns the accumulated value.\n     */\n    function arrayReduce(array, iteratee, accumulator, initFromArray) {\n      var index = -1,\n          length = array.length;\n\n      if (initFromArray && length) {\n        accumulator = array[++index];\n      }\n      while (++index < length) {\n        accumulator = iteratee(accumulator, array[index], index, array);\n      }\n      return accumulator;\n    }\n\n    /**\n     * A specialized version of `_.reduceRight` for arrays without support for\n     * callback shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @param {boolean} [initFromArray] Specify using the last element of `array`\n     *  as the initial value.\n     * @returns {*} Returns the accumulated value.\n     */\n    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {\n      var length = array.length;\n      if (initFromArray && length) {\n        accumulator = array[--length];\n      }\n      while (length--) {\n        accumulator = iteratee(accumulator, array[length], length, array);\n      }\n      return accumulator;\n    }\n\n    /**\n     * A specialized version of `_.some` for arrays without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function arraySome(array, predicate) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        if (predicate(array[index], index, array)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `_.sum` for arrays without support for callback\n     * shorthands and `this` binding..\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {number} Returns the sum.\n     */\n    function arraySum(array, iteratee) {\n      var length = array.length,\n          result = 0;\n\n      while (length--) {\n        result += +iteratee(array[length]) || 0;\n      }\n      return result;\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assign` use.\n     *\n     * @private\n     * @param {*} objectValue The destination object property value.\n     * @param {*} sourceValue The source object property value.\n     * @returns {*} Returns the value to assign to the destination object.\n     */\n    function assignDefaults(objectValue, sourceValue) {\n      return objectValue === undefined ? sourceValue : objectValue;\n    }\n\n    /**\n     * Used by `_.template` to customize its `_.assign` use.\n     *\n     * **Note:** This function is like `assignDefaults` except that it ignores\n     * inherited property values when checking if a property is `undefined`.\n     *\n     * @private\n     * @param {*} objectValue The destination object property value.\n     * @param {*} sourceValue The source object property value.\n     * @param {string} key The key associated with the object and source values.\n     * @param {Object} object The destination object.\n     * @returns {*} Returns the value to assign to the destination object.\n     */\n    function assignOwnDefaults(objectValue, sourceValue, key, object) {\n      return (objectValue === undefined || !hasOwnProperty.call(object, key))\n        ? sourceValue\n        : objectValue;\n    }\n\n    /**\n     * A specialized version of `_.assign` for customizing assigned values without\n     * support for argument juggling, multiple sources, and `this` binding `customizer`\n     * functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     */\n    function assignWith(object, source, customizer) {\n      var index = -1,\n          props = keys(source),\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index],\n            value = object[key],\n            result = customizer(value, source[key], key, object, source);\n\n        if ((result === result ? (result !== value) : (value === value)) ||\n            (value === undefined && !(key in object))) {\n          object[key] = result;\n        }\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for argument juggling,\n     * multiple sources, and `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return source == null\n        ? object\n        : baseCopy(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.at` without support for string collections\n     * and individual key arguments.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {number[]|string[]} props The property names or indexes of elements to pick.\n     * @returns {Array} Returns the new array of picked elements.\n     */\n    function baseAt(collection, props) {\n      var index = -1,\n          isNil = collection == null,\n          isArr = !isNil && isArrayLike(collection),\n          length = isArr ? collection.length : 0,\n          propsLength = props.length,\n          result = Array(propsLength);\n\n      while(++index < propsLength) {\n        var key = props[index];\n        if (isArr) {\n          result[index] = isIndex(key, length) ? collection[key] : undefined;\n        } else {\n          result[index] = isNil ? undefined : collection[key];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property names to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @returns {Object} Returns `object`.\n     */\n    function baseCopy(source, props, object) {\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n        object[key] = source[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `_.callback` which supports specifying the\n     * number of arguments to provide to `func`.\n     *\n     * @private\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {number} [argCount] The number of arguments to provide to `func`.\n     * @returns {Function} Returns the callback.\n     */\n    function baseCallback(func, thisArg, argCount) {\n      var type = typeof func;\n      if (type == 'function') {\n        return thisArg === undefined\n          ? func\n          : bindCallback(func, thisArg, argCount);\n      }\n      if (func == null) {\n        return identity;\n      }\n      if (type == 'object') {\n        return baseMatches(func);\n      }\n      return thisArg === undefined\n        ? property(func)\n        : baseMatchesProperty(func, thisArg);\n    }\n\n    /**\n     * The base implementation of `_.clone` without support for argument juggling\n     * and `this` binding `customizer` functions.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @param {Function} [customizer] The function to customize cloning values.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The object `value` belongs to.\n     * @param {Array} [stackA=[]] Tracks traversed source objects.\n     * @param {Array} [stackB=[]] Associates clones with source counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {\n      var result;\n      if (customizer) {\n        result = object ? customizer(value, key, object) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return arrayCopy(value, result);\n        }\n      } else {\n        var tag = objToString.call(value),\n            isFunc = tag == funcTag;\n\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = initCloneObject(isFunc ? {} : value);\n          if (!isDeep) {\n            return baseAssign(result, value);\n          }\n        } else {\n          return cloneableTags[tag]\n            ? initCloneByTag(value, tag, isDeep)\n            : (object ? value : {});\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stackA || (stackA = []);\n      stackB || (stackB = []);\n\n      var length = stackA.length;\n      while (length--) {\n        if (stackA[length] == value) {\n          return stackB[length];\n        }\n      }\n      // Add the source value to the stack of traversed objects and associate it with its clone.\n      stackA.push(value);\n      stackB.push(result);\n\n      // Recursively populate clone (susceptible to call stack limits).\n      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {\n        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} prototype The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(prototype) {\n        if (isObject(prototype)) {\n          object.prototype = prototype;\n          var result = new object;\n          object.prototype = undefined;\n        }\n        return result || {};\n      };\n    }());\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts an index\n     * of where to slice the arguments to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Object} args The arguments provide to `func`.\n     * @returns {number} Returns the timer id.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of `_.difference` which accepts a single array\n     * of values to exclude.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values) {\n      var length = array ? array.length : 0,\n          result = [];\n\n      if (!length) {\n        return result;\n      }\n      var index = -1,\n          indexOf = getIndexOf(),\n          isCommon = indexOf == baseIndexOf,\n          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,\n          valuesLength = values.length;\n\n      if (cache) {\n        indexOf = cacheIndexOf;\n        isCommon = false;\n        values = cache;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index];\n\n        if (isCommon && value === value) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === value) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (indexOf(values, value, 0) < 0) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object|string} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object|string} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * Gets the extremum value of `collection` invoking `iteratee` for each value\n     * in `collection` to generate the criterion by which the value is ranked.\n     * The `iteratee` is invoked with three arguments: (value, index|key, collection).\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} comparator The function used to compare values.\n     * @param {*} exValue The initial extremum value.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(collection, iteratee, comparator, exValue) {\n      var computed = exValue,\n          result = computed;\n\n      baseEach(collection, function(value, index, collection) {\n        var current = +iteratee(value, index, collection);\n        if (comparator(current, computed) || (current === exValue && current === result)) {\n          computed = current;\n          result = value;\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = start == null ? 0 : (+start || 0);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : (+end || 0);\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : (end >>> 0);\n      start >>>= 0;\n\n      while (start < length) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,\n     * without support for callback shorthands and `this` binding, which iterates\n     * over `collection` using the provided `eachFunc`.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to search.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {Function} eachFunc The function to iterate over `collection`.\n     * @param {boolean} [retKey] Specify returning the key of the found element\n     *  instead of the element itself.\n     * @returns {*} Returns the found element or its key, else `undefined`.\n     */\n    function baseFind(collection, predicate, eachFunc, retKey) {\n      var result;\n      eachFunc(collection, function(value, key, collection) {\n        if (predicate(value, key, collection)) {\n          result = retKey ? key : value;\n          return false;\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with added support for restricting\n     * flattening and specifying the start index.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {boolean} [isDeep] Specify a deep flatten.\n     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, isDeep, isStrict, result) {\n      result || (result = []);\n\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index];\n        if (isObjectLike(value) && isArrayLike(value) &&\n            (isStrict || isArray(value) || isArguments(value))) {\n          if (isDeep) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, isDeep, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForIn` and `baseForOwn` which iterates\n     * over `object` properties returned by `keysFunc` invoking `iteratee` for\n     * each property. Iteratee functions may exit iteration early by explicitly\n     * returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forIn` without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForIn(object, iteratee) {\n      return baseFor(object, iteratee, keysIn);\n    }\n\n    /**\n     * The base implementation of `_.forOwn` without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from those provided.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the new array of filtered property names.\n     */\n    function baseFunctions(object, props) {\n      var index = -1,\n          length = props.length,\n          resIndex = -1,\n          result = [];\n\n      while (++index < length) {\n        var key = props[index];\n        if (isFunction(object[key])) {\n          result[++resIndex] = key;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `get` without support for string paths\n     * and default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path of the property to get.\n     * @param {string} [pathKey] The key representation of path.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path, pathKey) {\n      if (object == null) {\n        return;\n      }\n      if (pathKey !== undefined && pathKey in toObject(object)) {\n        path = [pathKey];\n      }\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[path[index++]];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` without support for `this` binding\n     * `customizer` functions.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparing values.\n     * @param {boolean} [isLoose] Specify performing partial comparisons.\n     * @param {Array} [stackA] Tracks traversed `value` objects.\n     * @param {Array} [stackB] Tracks traversed `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} [customizer] The function to customize comparing objects.\n     * @param {boolean} [isLoose] Specify performing partial comparisons.\n     * @param {Array} [stackA=[]] Tracks traversed `value` objects.\n     * @param {Array} [stackB=[]] Tracks traversed `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = arrayTag,\n          othTag = arrayTag;\n\n      if (!objIsArr) {\n        objTag = objToString.call(object);\n        if (objTag == argsTag) {\n          objTag = objectTag;\n        } else if (objTag != objectTag) {\n          objIsArr = isTypedArray(object);\n        }\n      }\n      if (!othIsArr) {\n        othTag = objToString.call(other);\n        if (othTag == argsTag) {\n          othTag = objectTag;\n        } else if (othTag != objectTag) {\n          othIsArr = isTypedArray(other);\n        }\n      }\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && !(objIsArr || objIsObj)) {\n        return equalByTag(object, other, objTag);\n      }\n      if (!isLoose) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      // For more information on detecting circular references see https://es5.github.io/#JO.\n      stackA || (stackA = []);\n      stackB || (stackB = []);\n\n      var length = stackA.length;\n      while (length--) {\n        if (stackA[length] == object) {\n          return stackB[length] == other;\n        }\n      }\n      // Add `object` and `other` to the stack of traversed objects.\n      stackA.push(object);\n      stackB.push(other);\n\n      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);\n\n      stackA.pop();\n      stackB.pop();\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} matchData The propery names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparing objects.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = toObject(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var result = customizer ? customizer(objValue, srcValue, key) : undefined;\n          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for callback shorthands\n     * and `this` binding.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which does not clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        var key = matchData[0][0],\n            value = matchData[0][1];\n\n        return function(object) {\n          if (object == null) {\n            return false;\n          }\n          return object[key] === value && (value !== undefined || (key in toObject(object)));\n        };\n      }\n      return function(object) {\n        return baseIsMatch(object, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to compare.\n     * @returns {Function} Returns the new function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      var isArr = isArray(path),\n          isCommon = isKey(path) && isStrictComparable(srcValue),\n          pathKey = (path + '');\n\n      path = toPath(path);\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        var key = pathKey;\n        object = toObject(object);\n        if ((isArr || !isCommon) && !(key in object)) {\n          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n          if (object == null) {\n            return false;\n          }\n          key = last(path);\n          object = toObject(object);\n        }\n        return object[key] === srcValue\n          ? (srcValue !== undefined || (key in object))\n          : baseIsEqual(srcValue, object[key], undefined, true);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for argument juggling,\n     * multiple sources, and `this` binding `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Array} [stackA=[]] Tracks traversed source objects.\n     * @param {Array} [stackB=[]] Associates values with source counterparts.\n     * @returns {Object} Returns `object`.\n     */\n    function baseMerge(object, source, customizer, stackA, stackB) {\n      if (!isObject(object)) {\n        return object;\n      }\n      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),\n          props = isSrcArr ? undefined : keys(source);\n\n      arrayEach(props || source, function(srcValue, key) {\n        if (props) {\n          key = srcValue;\n          srcValue = source[key];\n        }\n        if (isObjectLike(srcValue)) {\n          stackA || (stackA = []);\n          stackB || (stackB = []);\n          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);\n        }\n        else {\n          var value = object[key],\n              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,\n              isCommon = result === undefined;\n\n          if (isCommon) {\n            result = srcValue;\n          }\n          if ((result !== undefined || (isSrcArr && !(key in object))) &&\n              (isCommon || (result === result ? (result !== value) : (value === value)))) {\n            object[key] = result;\n          }\n        }\n      });\n      return object;\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Array} [stackA=[]] Tracks traversed source objects.\n     * @param {Array} [stackB=[]] Associates values with source counterparts.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {\n      var length = stackA.length,\n          srcValue = source[key];\n\n      while (length--) {\n        if (stackA[length] == srcValue) {\n          object[key] = stackB[length];\n          return;\n        }\n      }\n      var value = object[key],\n          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,\n          isCommon = result === undefined;\n\n      if (isCommon) {\n        result = srcValue;\n        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {\n          result = isArray(value)\n            ? value\n            : (isArrayLike(value) ? arrayCopy(value) : []);\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          result = isArguments(value)\n            ? toPlainObject(value)\n            : (isPlainObject(value) ? value : {});\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      // Add the source value to the stack of traversed objects and associate\n      // it with its merged value.\n      stackA.push(srcValue);\n      stackB.push(result);\n\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);\n      } else if (result === result ? (result !== value) : (value === value)) {\n        object[key] = result;\n      }\n    }\n\n    /**\n     * The base implementation of `_.property` without support for deep paths.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @returns {Function} Returns the new function.\n     */\n    function baseProperty(key) {\n      return function(object) {\n        return object == null ? undefined : object[key];\n      };\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new function.\n     */\n    function basePropertyDeep(path) {\n      var pathKey = (path + '');\n      path = toPath(path);\n      return function(object) {\n        return baseGet(object, path, pathKey);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * index arguments and capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0;\n      while (length--) {\n        var index = indexes[length];\n        if (index != previous && isIndex(index)) {\n          var previous = index;\n          splice.call(array, index, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for argument juggling\n     * and returning floating-point numbers.\n     *\n     * @private\n     * @param {number} min The minimum possible value.\n     * @param {number} max The maximum possible value.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(min, max) {\n      return min + nativeFloor(nativeRandom() * (max - min + 1));\n    }\n\n    /**\n     * The base implementation of `_.reduce` and `_.reduceRight` without support\n     * for callback shorthands and `this` binding, which iterates over `collection`\n     * using the provided `eachFunc`.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {*} accumulator The initial value.\n     * @param {boolean} initFromCollection Specify using the first or last element\n     *  of `collection` as the initial value.\n     * @param {Function} eachFunc The function to iterate over `collection`.\n     * @returns {*} Returns the accumulated value.\n     */\n    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {\n      eachFunc(collection, function(value, index, collection) {\n        accumulator = initFromCollection\n          ? (initFromCollection = false, value)\n          : iteratee(accumulator, value, index, collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop detection.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      start = start == null ? 0 : (+start || 0);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : (+end || 0);\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for callback shorthands\n     * and `this` binding.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortBy` which uses `comparer` to define\n     * the sort order of `array` and replaces criteria objects with their\n     * corresponding values.\n     *\n     * @private\n     * @param {Array} array The array to sort.\n     * @param {Function} comparer The function to define sort order.\n     * @returns {Array} Returns `array`.\n     */\n    function baseSortBy(array, comparer) {\n      var length = array.length;\n\n      array.sort(comparer);\n      while (length--) {\n        array[length] = array[length].value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.sortByOrder` without param guards.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {boolean[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseSortByOrder(collection, iteratees, orders) {\n      var callback = getCallback(),\n          index = -1;\n\n      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });\n\n      var result = baseMap(collection, function(value) {\n        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.sum` without support for callback shorthands\n     * and `this` binding.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {number} Returns the sum.\n     */\n    function baseSum(collection, iteratee) {\n      var result = 0;\n      baseEach(collection, function(value, index, collection) {\n        result += +iteratee(value, index, collection) || 0;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.uniq` without support for callback shorthands\n     * and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The function invoked per iteration.\n     * @returns {Array} Returns the new duplicate-value-free array.\n     */\n    function baseUniq(array, iteratee) {\n      var index = -1,\n          indexOf = getIndexOf(),\n          length = array.length,\n          isCommon = indexOf == baseIndexOf,\n          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,\n          seen = isLarge ? createCache() : null,\n          result = [];\n\n      if (seen) {\n        indexOf = cacheIndexOf;\n        isCommon = false;\n      } else {\n        isLarge = false;\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value, index, array) : value;\n\n        if (isCommon && value === value) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (indexOf(seen, computed, 0) < 0) {\n          if (iteratee || isLarge) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.values` and `_.valuesIn` which creates an\n     * array of `object` property values corresponding to the property names\n     * of `props`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} props The property names to get values for.\n     * @returns {Object} Returns the array of property values.\n     */\n    function baseValues(object, props) {\n      var index = -1,\n          length = props.length,\n          result = Array(length);\n\n      while (++index < length) {\n        result[index] = object[props[index]];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,\n     * and `_.takeWhile` without support for callback shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to peform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      var index = -1,\n          length = actions.length;\n\n      while (++index < length) {\n        var action = actions[index];\n        result = action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }\n      return result;\n    }\n\n    /**\n     * Performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function binaryIndex(array, value, retHighest) {\n      var low = 0,\n          high = array ? array.length : low;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return binaryIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * This function is like `binaryIndex` except that it invokes `iteratee` for\n     * `value` and each element of `array` to compute their sort ranking. The\n     * iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function binaryIndexBy(array, value, iteratee, retHighest) {\n      value = iteratee(value);\n\n      var low = 0,\n          high = array ? array.length : 0,\n          valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsUndef = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            isDef = computed !== undefined,\n            isReflexive = computed === computed;\n\n        if (valIsNaN) {\n          var setLow = isReflexive || retHighest;\n        } else if (valIsNull) {\n          setLow = isReflexive && isDef && (retHighest || computed != null);\n        } else if (valIsUndef) {\n          setLow = isReflexive && (retHighest || isDef);\n        } else if (computed == null) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * A specialized version of `baseCallback` which only supports `this` binding\n     * and specifying the number of arguments to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {number} [argCount] The number of arguments to provide to `func`.\n     * @returns {Function} Returns the callback.\n     */\n    function bindCallback(func, thisArg, argCount) {\n      if (typeof func != 'function') {\n        return identity;\n      }\n      if (thisArg === undefined) {\n        return func;\n      }\n      switch (argCount) {\n        case 1: return function(value) {\n          return func.call(thisArg, value);\n        };\n        case 3: return function(value, index, collection) {\n          return func.call(thisArg, value, index, collection);\n        };\n        case 4: return function(accumulator, value, index, collection) {\n          return func.call(thisArg, accumulator, value, index, collection);\n        };\n        case 5: return function(value, other, key, object, source) {\n          return func.call(thisArg, value, other, key, object, source);\n        };\n      }\n      return function() {\n        return func.apply(thisArg, arguments);\n      };\n    }\n\n    /**\n     * Creates a clone of the given array buffer.\n     *\n     * @private\n     * @param {ArrayBuffer} buffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function bufferClone(buffer) {\n      var result = new ArrayBuffer(buffer.byteLength),\n          view = new Uint8Array(result);\n\n      view.set(new Uint8Array(buffer));\n      return result;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array|Object} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders) {\n      var holdersLength = holders.length,\n          argsIndex = -1,\n          argsLength = nativeMax(args.length - holdersLength, 0),\n          leftIndex = -1,\n          leftLength = partials.length,\n          result = Array(leftLength + argsLength);\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        result[holders[argsIndex]] = args[argsIndex];\n      }\n      while (argsLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array|Object} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders) {\n      var holdersIndex = -1,\n          holdersLength = holders.length,\n          argsIndex = -1,\n          argsLength = nativeMax(args.length - holdersLength, 0),\n          rightIndex = -1,\n          rightLength = partials.length,\n          result = Array(argsLength + rightLength);\n\n      while (++argsIndex < argsLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        result[offset + holders[holdersIndex]] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.\n     *\n     * @private\n     * @param {Function} setter The function to set keys and values of the accumulator object.\n     * @param {Function} [initializer] The function to initialize the accumulator object.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee, thisArg) {\n        var result = initializer ? initializer() : {};\n        iteratee = getCallback(iteratee, thisArg, 3);\n\n        if (isArray(collection)) {\n          var index = -1,\n              length = collection.length;\n\n          while (++index < length) {\n            var value = collection[index];\n            setter(result, value, iteratee(value, index, collection), collection);\n          }\n        } else {\n          baseEach(collection, function(value, key, collection) {\n            setter(result, value, iteratee(value, key, collection), collection);\n          });\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return restParam(function(object, sources) {\n        var index = -1,\n            length = object == null ? 0 : sources.length,\n            customizer = length > 2 ? sources[length - 2] : undefined,\n            guard = length > 2 ? sources[2] : undefined,\n            thisArg = length > 1 ? sources[length - 1] : undefined;\n\n        if (typeof customizer == 'function') {\n          customizer = bindCallback(customizer, thisArg, 5);\n          length -= 2;\n        } else {\n          customizer = typeof thisArg == 'function' ? thisArg : undefined;\n          length -= (customizer ? 1 : 0);\n        }\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        var length = collection ? getLength(collection) : 0;\n        if (!isLength(length)) {\n          return eachFunc(collection, iteratee);\n        }\n        var index = fromRight ? length : -1,\n            iterable = toObject(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for `_.forIn` or `_.forInRight`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var iterable = toObject(object),\n            props = keysFunc(object),\n            length = props.length,\n            index = fromRight ? length : -1;\n\n        while ((fromRight ? index-- : ++index < length)) {\n          var key = props[index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` and invokes it with the `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to bind.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new bound function.\n     */\n    function createBindWrapper(func, thisArg) {\n      var Ctor = createCtorWrapper(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(thisArg, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `Set` cache object to optimize linear searches of large arrays.\n     *\n     * @private\n     * @param {Array} [values] The values to cache.\n     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.\n     */\n    function createCache(values) {\n      return (nativeCreate && Set) ? new SetCache(values) : null;\n    }\n\n    /**\n     * Creates a function that produces compound words out of the words in a\n     * given string.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        var index = -1,\n            array = words(deburr(string)),\n            length = array.length,\n            result = '';\n\n        while (++index < length) {\n          result = callback(result, array[index], index);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtorWrapper(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors.\n        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a `_.curry` or `_.curryRight` function.\n     *\n     * @private\n     * @param {boolean} flag The curry bit flag.\n     * @returns {Function} Returns the new curry function.\n     */\n    function createCurry(flag) {\n      function curryFunc(func, arity, guard) {\n        if (guard && isIterateeCall(func, arity, guard)) {\n          arity = undefined;\n        }\n        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);\n        result.placeholder = curryFunc.placeholder;\n        return result;\n      }\n      return curryFunc;\n    }\n\n    /**\n     * Creates a `_.defaults` or `_.defaultsDeep` function.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Function} Returns the new defaults function.\n     */\n    function createDefaults(assigner, customizer) {\n      return restParam(function(args) {\n        var object = args[0];\n        if (object == null) {\n          return object;\n        }\n        args.push(customizer);\n        return assigner.apply(undefined, args);\n      });\n    }\n\n    /**\n     * Creates a `_.max` or `_.min` function.\n     *\n     * @private\n     * @param {Function} comparator The function used to compare values.\n     * @param {*} exValue The initial extremum value.\n     * @returns {Function} Returns the new extremum function.\n     */\n    function createExtremum(comparator, exValue) {\n      return function(collection, iteratee, thisArg) {\n        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {\n          iteratee = undefined;\n        }\n        iteratee = getCallback(iteratee, thisArg, 3);\n        if (iteratee.length == 1) {\n          collection = isArray(collection) ? collection : toIterable(collection);\n          var result = arrayExtremum(collection, iteratee, comparator, exValue);\n          if (!(collection.length && result === exValue)) {\n            return result;\n          }\n        }\n        return baseExtremum(collection, iteratee, comparator, exValue);\n      };\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(eachFunc, fromRight) {\n      return function(collection, predicate, thisArg) {\n        predicate = getCallback(predicate, thisArg, 3);\n        if (isArray(collection)) {\n          var index = baseFindIndex(collection, predicate, fromRight);\n          return index > -1 ? collection[index] : undefined;\n        }\n        return baseFind(collection, predicate, eachFunc);\n      };\n    }\n\n    /**\n     * Creates a `_.findIndex` or `_.findLastIndex` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFindIndex(fromRight) {\n      return function(array, predicate, thisArg) {\n        if (!(array && array.length)) {\n          return -1;\n        }\n        predicate = getCallback(predicate, thisArg, 3);\n        return baseFindIndex(array, predicate, fromRight);\n      };\n    }\n\n    /**\n     * Creates a `_.findKey` or `_.findLastKey` function.\n     *\n     * @private\n     * @param {Function} objectFunc The function to iterate over an object.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFindKey(objectFunc) {\n      return function(object, predicate, thisArg) {\n        predicate = getCallback(predicate, thisArg, 3);\n        return baseFind(object, predicate, objectFunc, true);\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return function() {\n        var wrapper,\n            length = arguments.length,\n            index = fromRight ? length : -1,\n            leftIndex = 0,\n            funcs = Array(length);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          var func = funcs[leftIndex++] = arguments[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {\n            wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? -1 : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      };\n    }\n\n    /**\n     * Creates a function for `_.forEach` or `_.forEachRight`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over an array.\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @returns {Function} Returns the new each function.\n     */\n    function createForEach(arrayFunc, eachFunc) {\n      return function(collection, iteratee, thisArg) {\n        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))\n          ? arrayFunc(collection, iteratee)\n          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));\n      };\n    }\n\n    /**\n     * Creates a function for `_.forIn` or `_.forInRight`.\n     *\n     * @private\n     * @param {Function} objectFunc The function to iterate over an object.\n     * @returns {Function} Returns the new each function.\n     */\n    function createForIn(objectFunc) {\n      return function(object, iteratee, thisArg) {\n        if (typeof iteratee != 'function' || thisArg !== undefined) {\n          iteratee = bindCallback(iteratee, thisArg, 3);\n        }\n        return objectFunc(object, iteratee, keysIn);\n      };\n    }\n\n    /**\n     * Creates a function for `_.forOwn` or `_.forOwnRight`.\n     *\n     * @private\n     * @param {Function} objectFunc The function to iterate over an object.\n     * @returns {Function} Returns the new each function.\n     */\n    function createForOwn(objectFunc) {\n      return function(object, iteratee, thisArg) {\n        if (typeof iteratee != 'function' || thisArg !== undefined) {\n          iteratee = bindCallback(iteratee, thisArg, 3);\n        }\n        return objectFunc(object, iteratee);\n      };\n    }\n\n    /**\n     * Creates a function for `_.mapKeys` or `_.mapValues`.\n     *\n     * @private\n     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.\n     * @returns {Function} Returns the new map function.\n     */\n    function createObjectMapper(isMapKeys) {\n      return function(object, iteratee, thisArg) {\n        var result = {};\n        iteratee = getCallback(iteratee, thisArg, 3);\n\n        baseForOwn(object, function(value, key, object) {\n          var mapped = iteratee(value, key, object);\n          key = isMapKeys ? mapped : key;\n          value = isMapKeys ? value : mapped;\n          result[key] = value;\n        });\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function for `_.padLeft` or `_.padRight`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify padding from the right.\n     * @returns {Function} Returns the new pad function.\n     */\n    function createPadDir(fromRight) {\n      return function(string, length, chars) {\n        string = baseToString(string);\n        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);\n      };\n    }\n\n    /**\n     * Creates a `_.partial` or `_.partialRight` function.\n     *\n     * @private\n     * @param {boolean} flag The partial bit flag.\n     * @returns {Function} Returns the new partial function.\n     */\n    function createPartial(flag) {\n      var partialFunc = restParam(function(func, partials) {\n        var holders = replaceHolders(partials, partialFunc.placeholder);\n        return createWrapper(func, flag, undefined, partials, holders);\n      });\n      return partialFunc;\n    }\n\n    /**\n     * Creates a function for `_.reduce` or `_.reduceRight`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over an array.\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @returns {Function} Returns the new each function.\n     */\n    function createReduce(arrayFunc, eachFunc) {\n      return function(collection, iteratee, accumulator, thisArg) {\n        var initFromArray = arguments.length < 3;\n        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))\n          ? arrayFunc(collection, iteratee, accumulator, initFromArray)\n          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` and invokes it with optional `this`\n     * binding of, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to reference.\n     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & ARY_FLAG,\n          isBind = bitmask & BIND_FLAG,\n          isBindKey = bitmask & BIND_KEY_FLAG,\n          isCurry = bitmask & CURRY_FLAG,\n          isCurryBound = bitmask & CURRY_BOUND_FLAG,\n          isCurryRight = bitmask & CURRY_RIGHT_FLAG,\n          Ctor = isBindKey ? undefined : createCtorWrapper(func);\n\n      function wrapper() {\n        // Avoid `arguments` object use disqualifying optimizations by\n        // converting it to an array before providing it to other functions.\n        var length = arguments.length,\n            index = length,\n            args = Array(length);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight);\n        }\n        if (isCurry || isCurryRight) {\n          var placeholder = wrapper.placeholder,\n              argsHolders = replaceHolders(args, placeholder);\n\n          length -= argsHolders.length;\n          if (length < arity) {\n            var newArgPos = argPos ? arrayCopy(argPos) : undefined,\n                newArity = nativeMax(arity - length, 0),\n                newsHolders = isCurry ? argsHolders : undefined,\n                newHoldersRight = isCurry ? undefined : argsHolders,\n                newPartials = isCurry ? args : undefined,\n                newPartialsRight = isCurry ? undefined : args;\n\n            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);\n            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);\n\n            if (!isCurryBound) {\n              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);\n            }\n            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],\n                result = createHybridWrapper.apply(undefined, newData);\n\n            if (isLaziable(func)) {\n              setData(result, newData);\n            }\n            result.placeholder = placeholder;\n            return result;\n          }\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        if (argPos) {\n          args = reorder(args, argPos);\n        }\n        if (isAry && ary < args.length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtorWrapper(func);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates the padding required for `string` based on the given `length`.\n     * The `chars` string is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {string} string The string to create padding for.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the pad for `string`.\n     */\n    function createPadding(string, length, chars) {\n      var strLength = string.length;\n      length = +length;\n\n      if (strLength >= length || !nativeIsFinite(length)) {\n        return '';\n      }\n      var padLength = length - strLength;\n      chars = chars == null ? ' ' : (chars + '');\n      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);\n    }\n\n    /**\n     * Creates a function that wraps `func` and invokes it with the optional `this`\n     * binding of `thisArg` and the `partials` prepended to those provided to\n     * the wrapper.\n     *\n     * @private\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to the new function.\n     * @returns {Function} Returns the new bound function.\n     */\n    function createPartialWrapper(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & BIND_FLAG,\n          Ctor = createCtorWrapper(func);\n\n      function wrapper() {\n        // Avoid `arguments` object use disqualifying optimizations by\n        // converting it to an array before providing it `func`.\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength);\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.ceil`, `_.floor`, or `_.round` function.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        precision = precision === undefined ? 0 : (+precision || 0);\n        if (precision) {\n          precision = pow(10, precision);\n          return func(number * precision) / precision;\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.\n     *\n     * @private\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {Function} Returns the new index function.\n     */\n    function createSortedIndex(retHighest) {\n      return function(array, value, iteratee, thisArg) {\n        var callback = getCallback(iteratee);\n        return (iteratee == null && callback === baseCallback)\n          ? binaryIndex(array, value, retHighest)\n          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to reference.\n     * @param {number} bitmask The bitmask of flags.\n     *  The bitmask may be composed of the following flags:\n     *     1 - `_.bind`\n     *     2 - `_.bindKey`\n     *     4 - `_.curry` or `_.curryRight` of a bound function\n     *     8 - `_.curry`\n     *    16 - `_.curryRight`\n     *    32 - `_.partial`\n     *    64 - `_.partialRight`\n     *   128 - `_.rearg`\n     *   256 - `_.ary`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      length -= (holders ? holders.length : 0);\n      if (bitmask & PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func),\n          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];\n\n      if (data) {\n        mergeData(newData, data);\n        bitmask = newData[1];\n        arity = newData[9];\n      }\n      newData[9] = arity == null\n        ? (isBindKey ? 0 : func.length)\n        : (nativeMax(arity - length, 0) || 0);\n\n      if (bitmask == BIND_FLAG) {\n        var result = createBindWrapper(newData[0], newData[2]);\n      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {\n        result = createPartialWrapper.apply(undefined, newData);\n      } else {\n        result = createHybridWrapper.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setter(result, newData);\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} [customizer] The function to customize comparing arrays.\n     * @param {boolean} [isLoose] Specify performing partial comparisons.\n     * @param {Array} [stackA] Tracks traversed `value` objects.\n     * @param {Array} [stackB] Tracks traversed `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {\n      var index = -1,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {\n        return false;\n      }\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index],\n            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;\n\n        if (result !== undefined) {\n          if (result) {\n            continue;\n          }\n          return false;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (isLoose) {\n          if (!arraySome(other, function(othValue) {\n                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);\n              })) {\n            return false;\n          }\n        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag) {\n      switch (tag) {\n        case boolTag:\n        case dateTag:\n          // Coerce dates and booleans to numbers, dates to milliseconds and booleans\n          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.\n          return +object == +other;\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case numberTag:\n          // Treat `NaN` vs. `NaN` as equal.\n          return (object != +object)\n            ? other != +other\n            : object == +other;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings primitives and string\n          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.\n          return object == (other + '');\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} [customizer] The function to customize comparing values.\n     * @param {boolean} [isLoose] Specify performing partial comparisons.\n     * @param {Array} [stackA] Tracks traversed `value` objects.\n     * @param {Array} [stackB] Tracks traversed `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {\n      var objProps = keys(object),\n          objLength = objProps.length,\n          othProps = keys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isLoose) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      var skipCtor = isLoose;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key],\n            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;\n\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {\n          return false;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (!skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Gets the appropriate \"callback\" function. If the `_.callback` method is\n     * customized this function returns the custom method, otherwise it returns\n     * the `baseCallback` function. If arguments are provided the chosen function\n     * is invoked with them and its result is returned.\n     *\n     * @private\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getCallback(func, thisArg, argCount) {\n      var result = lodash.callback || callback;\n      result = result === callback ? baseCallback : result;\n      return argCount ? result(func, thisArg, argCount) : result;\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = func.name,\n          array = realNames[result],\n          length = array ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the appropriate \"indexOf\" function. If the `_.indexOf` method is\n     * customized this function returns the custom method, otherwise it returns\n     * the `baseIndexOf` function. If arguments are provided the chosen function\n     * is invoked with them and its result is returned.\n     *\n     * @private\n     * @returns {Function|number} Returns the chosen function or its result.\n     */\n    function getIndexOf(collection, target, fromIndex) {\n      var result = lodash.indexOf || indexOf;\n      result = result === indexOf ? baseIndexOf : result;\n      return collection ? result(collection, target, fromIndex) : result;\n    }\n\n    /**\n     * Gets the \"length\" property value of `object`.\n     *\n     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n     * that affects Safari on at least iOS 8.1-8.3 ARM64.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {*} Returns the \"length\" value.\n     */\n    var getLength = baseProperty('length');\n\n    /**\n     * Gets the propery names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = pairs(object),\n          length = result.length;\n\n      while (length--) {\n        result[length][2] = isStrictComparable(result[length][1]);\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = object == null ? undefined : object[key];\n      return isNative(value) ? value : undefined;\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = new array.constructor(length);\n\n      // Add array properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      var Ctor = object.constructor;\n      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {\n        Ctor = Object;\n      }\n      return new Ctor;\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return bufferClone(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          var buffer = object.buffer;\n          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          var result = new Ctor(object.source, reFlags.exec(object));\n          result.lastIndex = object.lastIndex;\n      }\n      return result;\n    }\n\n    /**\n     * Invokes the method at `path` on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function invokePath(object, path, args) {\n      if (object != null && !isKey(path, object)) {\n        path = toPath(path);\n        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n        path = last(path);\n      }\n      var func = object == null ? object : object[path];\n      return func == null ? undefined : func.apply(object, args);\n    }\n\n    /**\n     * Checks if `value` is array-like.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(getLength(value));\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n      length = length == null ? MAX_SAFE_INTEGER : length;\n      return value > -1 && value % 1 == 0 && value < length;\n    }\n\n    /**\n     * Checks if the provided arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n          ? (isArrayLike(object) && isIndex(index, object.length))\n          : (type == 'string' && index in object)) {\n        var other = object[index];\n        return value === value ? (value === other) : (other !== other);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      var type = typeof value;\n      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {\n        return true;\n      }\n      if (isArray(value)) {\n        return false;\n      }\n      var result = !reIsDeepProp.test(value);\n      return result || (object != null && value in toObject(object));\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func);\n      if (!(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      var other = lodash[funcName];\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     */\n    function isLength(value) {\n      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers required to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`\n     * augment function arguments, making the order in which they are executed important,\n     * preventing the merging of metadata. However, we make an exception for a safe\n     * common case where curried functions have `_.ary` and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < ARY_FLAG;\n\n      var isCombo =\n        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||\n        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||\n        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = arrayCopy(value);\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use.\n     *\n     * @private\n     * @param {*} objectValue The destination object property value.\n     * @param {*} sourceValue The source object property value.\n     * @returns {*} Returns the value to assign to the destination object.\n     */\n    function mergeDefaults(objectValue, sourceValue) {\n      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);\n    }\n\n    /**\n     * A specialized version of `_.pick` which picks `object` properties specified\n     * by `props`.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} props The property names to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function pickByArray(object, props) {\n      object = toObject(object);\n\n      var index = -1,\n          length = props.length,\n          result = {};\n\n      while (++index < length) {\n        var key = props[index];\n        if (key in object) {\n          result[key] = object[key];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.pick` which picks `object` properties `predicate`\n     * returns truthy for.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Object} Returns the new object.\n     */\n    function pickByCallback(object, predicate) {\n      var result = {};\n      baseForIn(object, function(value, key, object) {\n        if (predicate(value, key, object)) {\n          result[key] = value;\n        }\n      });\n      return result;\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = arrayCopy(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity function\n     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = (function() {\n      var count = 0,\n          lastCalled = 0;\n\n      return function(key, value) {\n        var stamp = now(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return key;\n          }\n        } else {\n          count = 0;\n        }\n        return baseSetData(key, value);\n      };\n    }());\n\n    /**\n     * A fallback implementation of `Object.keys` which creates an array of the\n     * own enumerable property names of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function shimKeys(object) {\n      var props = keysIn(object),\n          propsLength = props.length,\n          length = propsLength && object.length;\n\n      var allowIndexes = !!length && isLength(length) &&\n        (isArray(object) || isArguments(object));\n\n      var index = -1,\n          result = [];\n\n      while (++index < propsLength) {\n        var key = props[index];\n        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to an array-like object if it's not one.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {Array|Object} Returns the array-like object.\n     */\n    function toIterable(value) {\n      if (value == null) {\n        return [];\n      }\n      if (!isArrayLike(value)) {\n        return values(value);\n      }\n      return isObject(value) ? value : Object(value);\n    }\n\n    /**\n     * Converts `value` to an object if it's not one.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {Object} Returns the object.\n     */\n    function toObject(value) {\n      return isObject(value) ? value : Object(value);\n    }\n\n    /**\n     * Converts `value` to property path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {Array} Returns the property path array.\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return value;\n      }\n      var result = [];\n      baseToString(value).replace(rePropName, function(match, number, quote, string) {\n        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      return wrapper instanceof LazyWrapper\n        ? wrapper.clone()\n        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `collection` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Array} Returns the new array containing chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if (guard ? isIterateeCall(array, size, guard) : size == null) {\n        size = 1;\n      } else {\n        size = nativeMax(nativeFloor(size) || 1, 1);\n      }\n      var index = 0,\n          length = array ? array.length : 0,\n          resIndex = -1,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[++resIndex] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array ? array.length : 0,\n          resIndex = -1,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[++resIndex] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of unique `array` values not included in the other\n     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The arrays of values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.difference([1, 2, 3], [4, 2]);\n     * // => [1, 3]\n     */\n    var difference = restParam(function(array, values) {\n      return (isObjectLike(array) && isArrayLike(array))\n        ? baseDifference(array, baseFlatten(values, false, true))\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      if (guard ? isIterateeCall(array, n, guard) : n == null) {\n        n = 1;\n      }\n      return baseSlice(array, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      if (guard ? isIterateeCall(array, n, guard) : n == null) {\n        n = 1;\n      }\n      n = length - (+n || 0);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * bound to `thisArg` and invoked with three arguments: (value, index, array).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that match the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRightWhile([1, 2, 3], function(n) {\n     *   return n > 1;\n     * });\n     * // => [1]\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * // using the `_.matches` callback shorthand\n     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');\n     * // => ['barney', 'fred']\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');\n     * // => ['barney']\n     *\n     * // using the `_.property` callback shorthand\n     * _.pluck(_.dropRightWhile(users, 'active'), 'user');\n     * // => ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate, thisArg) {\n      return (array && array.length)\n        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * bound to `thisArg` and invoked with three arguments: (value, index, array).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropWhile([1, 2, 3], function(n) {\n     *   return n < 3;\n     * });\n     * // => [3]\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * // using the `_.matches` callback shorthand\n     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');\n     * // => ['fred', 'pebbles']\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.pluck(_.dropWhile(users, 'active', false), 'user');\n     * // => ['pebbles']\n     *\n     * // using the `_.property` callback shorthand\n     * _.pluck(_.dropWhile(users, 'active'), 'user');\n     * // => ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate, thisArg) {\n      return (array && array.length)\n        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8], '*', 1, 2);\n     * // => [4, '*', 8]\n     */\n    function fill(array, value, start, end) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to search.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(chr) {\n     *   return chr.user == 'barney';\n     * });\n     * // => 0\n     *\n     * // using the `_.matches` callback shorthand\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.findIndex(users, 'active', false);\n     * // => 0\n     *\n     * // using the `_.property` callback shorthand\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    var findIndex = createFindIndex();\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to search.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(chr) {\n     *   return chr.user == 'pebbles';\n     * });\n     * // => 2\n     *\n     * // using the `_.matches` callback shorthand\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.findLastIndex(users, 'active', false);\n     * // => 2\n     *\n     * // using the `_.property` callback shorthand\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    var findLastIndex = createFindIndex(true);\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @alias head\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.first([1, 2, 3]);\n     * // => 1\n     *\n     * _.first([]);\n     * // => undefined\n     */\n    function first(array) {\n      return array ? array[0] : undefined;\n    }\n\n    /**\n     * Flattens a nested array. If `isDeep` is `true` the array is recursively\n     * flattened, otherwise it is only flattened a single level.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {boolean} [isDeep] Specify a deep flatten.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, 3, [4]]]);\n     * // => [1, 2, 3, [4]]\n     *\n     * // using `isDeep`\n     * _.flatten([1, [2, 3, [4]]], true);\n     * // => [1, 2, 3, 4]\n     */\n    function flatten(array, isDeep, guard) {\n      var length = array ? array.length : 0;\n      if (guard && isIterateeCall(array, isDeep, guard)) {\n        isDeep = false;\n      }\n      return length ? baseFlatten(array, isDeep) : [];\n    }\n\n    /**\n     * Recursively flattens a nested array.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to recursively flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, 3, [4]]]);\n     * // => [1, 2, 3, 4]\n     */\n    function flattenDeep(array) {\n      var length = array ? array.length : 0;\n      return length ? baseFlatten(array, true) : [];\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it is used as the offset\n     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`\n     * performs a faster binary search.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to search.\n     * @param {*} value The value to search for.\n     * @param {boolean|number} [fromIndex=0] The index to search from or `true`\n     *  to perform a binary search on a sorted array.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // using `fromIndex`\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     *\n     * // performing a binary search\n     * _.indexOf([1, 1, 2, 2], 2, true);\n     * // => 2\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return -1;\n      }\n      if (typeof fromIndex == 'number') {\n        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;\n      } else if (fromIndex) {\n        var index = binaryIndex(array, value);\n        if (index < length &&\n            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {\n          return index;\n        }\n        return -1;\n      }\n      return baseIndexOf(array, value, fromIndex || 0);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      return dropRight(array, 1);\n    }\n\n    /**\n     * Creates an array of unique values that are included in all of the provided\n     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of shared values.\n     * @example\n     * _.intersection([1, 2], [4, 2], [2, 1]);\n     * // => [2]\n     */\n    var intersection = restParam(function(arrays) {\n      var othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(length),\n          indexOf = getIndexOf(),\n          isCommon = indexOf == baseIndexOf,\n          result = [];\n\n      while (othIndex--) {\n        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];\n        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;\n      }\n      var array = arrays[0],\n          index = -1,\n          length = array ? array.length : 0,\n          seen = caches[0];\n\n      outer:\n      while (++index < length) {\n        value = array[index];\n        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {\n          var othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(value);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    });\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array ? array.length : 0;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to search.\n     * @param {*} value The value to search for.\n     * @param {boolean|number} [fromIndex=array.length-1] The index to search from\n     *  or `true` to perform a binary search on a sorted array.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // using `fromIndex`\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     *\n     * // performing a binary search\n     * _.lastIndexOf([1, 1, 2, 2], 2, true);\n     * // => 3\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (typeof fromIndex == 'number') {\n        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;\n      } else if (fromIndex) {\n        index = binaryIndex(array, value, true) - 1;\n        var other = array[index];\n        if (value === value ? (value === other) : (other !== other)) {\n          return index;\n        }\n        return -1;\n      }\n      if (value !== value) {\n        return indexOfNaN(array, index, true);\n      }\n      while (index--) {\n        if (array[index] === value) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Removes all provided values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3, 1, 2, 3];\n     *\n     * _.pull(array, 2, 3);\n     * console.log(array);\n     * // => [1, 1]\n     */\n    function pull() {\n      var args = arguments,\n          array = args[0];\n\n      if (!(array && array.length)) {\n        return array;\n      }\n      var index = 0,\n          indexOf = getIndexOf(),\n          length = args.length;\n\n      while (++index < length) {\n        var fromIndex = 0,\n            value = args[index];\n\n        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to the given indexes and returns\n     * an array of the removed elements. Indexes may be specified as an array of\n     * indexes or as individual arguments.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove,\n     *  specified as individual indexes or arrays of indexes.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [5, 10, 15, 20];\n     * var evens = _.pullAt(array, 1, 3);\n     *\n     * console.log(array);\n     * // => [5, 15]\n     *\n     * console.log(evens);\n     * // => [10, 20]\n     */\n    var pullAt = restParam(function(array, indexes) {\n      indexes = baseFlatten(indexes);\n\n      var result = baseAt(array, indexes);\n      basePullAt(array, indexes.sort(baseCompareAscending));\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is bound to\n     * `thisArg` and invoked with three arguments: (value, index, array).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate, thisArg) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getCallback(predicate, thisArg, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @alias tail\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.rest([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function rest(array) {\n      return drop(array, 1);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of `Array#slice` to support node\n     * lists in IE < 9 and to ensure dense arrays are returned.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value` should\n     * be inserted into `array` in order to maintain its sort order. If an iteratee\n     * function is provided it is invoked for `value` and each element of `array`\n     * to compute their sort ranking. The iteratee is bound to `thisArg` and\n     * invoked with one argument; (value).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     *\n     * _.sortedIndex([4, 4, 5, 5], 5);\n     * // => 2\n     *\n     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };\n     *\n     * // using an iteratee function\n     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {\n     *   return this.data[word];\n     * }, dict);\n     * // => 1\n     *\n     * // using the `_.property` callback shorthand\n     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');\n     * // => 1\n     */\n    var sortedIndex = createSortedIndex();\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 4, 5, 5], 5);\n     * // => 4\n     */\n    var sortedLastIndex = createSortedIndex(true);\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      if (guard ? isIterateeCall(array, n, guard) : n == null) {\n        n = 1;\n      }\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      if (guard ? isIterateeCall(array, n, guard) : n == null) {\n        n = 1;\n      }\n      n = length - (+n || 0);\n      return baseSlice(array, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`\n     * and invoked with three arguments: (value, index, array).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRightWhile([1, 2, 3], function(n) {\n     *   return n > 1;\n     * });\n     * // => [2, 3]\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * // using the `_.matches` callback shorthand\n     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');\n     * // => ['pebbles']\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');\n     * // => ['fred', 'pebbles']\n     *\n     * // using the `_.property` callback shorthand\n     * _.pluck(_.takeRightWhile(users, 'active'), 'user');\n     * // => []\n     */\n    function takeRightWhile(array, predicate, thisArg) {\n      return (array && array.length)\n        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is bound to\n     * `thisArg` and invoked with three arguments: (value, index, array).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeWhile([1, 2, 3], function(n) {\n     *   return n < 3;\n     * });\n     * // => [1, 2]\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false},\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * // using the `_.matches` callback shorthand\n     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');\n     * // => ['barney']\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.pluck(_.takeWhile(users, 'active', false), 'user');\n     * // => ['barney', 'fred']\n     *\n     * // using the `_.property` callback shorthand\n     * _.pluck(_.takeWhile(users, 'active'), 'user');\n     * // => []\n     */\n    function takeWhile(array, predicate, thisArg) {\n      return (array && array.length)\n        ? baseWhile(array, getCallback(predicate, thisArg, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all of the provided arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([1, 2], [4, 2], [2, 1]);\n     * // => [1, 2, 4]\n     */\n    var union = restParam(function(arrays) {\n      return baseUniq(baseFlatten(arrays, false, true));\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurence of each element\n     * is kept. Providing `true` for `isSorted` performs a faster search algorithm\n     * for sorted arrays. If an iteratee function is provided it is invoked for\n     * each element in the array to generate the criterion by which uniqueness\n     * is computed. The `iteratee` is bound to `thisArg` and invoked with three\n     * arguments: (value, index, array).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias unique\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {boolean} [isSorted] Specify the array is sorted.\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Array} Returns the new duplicate-value-free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     *\n     * // using `isSorted`\n     * _.uniq([1, 1, 2], true);\n     * // => [1, 2]\n     *\n     * // using an iteratee function\n     * _.uniq([1, 2.5, 1.5, 2], function(n) {\n     *   return this.floor(n);\n     * }, Math);\n     * // => [1, 2.5]\n     *\n     * // using the `_.property` callback shorthand\n     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniq(array, isSorted, iteratee, thisArg) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      if (isSorted != null && typeof isSorted != 'boolean') {\n        thisArg = iteratee;\n        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;\n        isSorted = false;\n      }\n      var callback = getCallback();\n      if (!(iteratee == null && callback === baseCallback)) {\n        iteratee = callback(iteratee, thisArg, 3);\n      }\n      return (isSorted && getIndexOf() == baseIndexOf)\n        ? sortedUniq(array, iteratee)\n        : baseUniq(array, iteratee);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);\n     * // => [['fred', 30, true], ['barney', 40, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['fred', 'barney'], [30, 40], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var index = -1,\n          length = 0;\n\n      array = arrayFilter(array, function(group) {\n        if (isArrayLike(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = arrayMap(array, baseProperty(index));\n      }\n      return result;\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts an iteratee to specify\n     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`\n     * and invoked with four arguments: (accumulator, value, index, group).\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee] The function to combine regrouped values.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee, thisArg) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      iteratee = bindCallback(iteratee, thisArg, 4);\n      return arrayMap(result, function(group) {\n        return arrayReduce(group, iteratee, undefined, true);\n      });\n    }\n\n    /**\n     * Creates an array excluding all provided values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to filter.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.without([1, 2, 1, 3], 1, 2);\n     * // => [3]\n     */\n    var without = restParam(function(array, values) {\n      return isArrayLike(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the provided arrays.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of values.\n     * @example\n     *\n     * _.xor([1, 2], [4, 2]);\n     * // => [1, 4]\n     */\n    function xor() {\n      var index = -1,\n          length = arguments.length;\n\n      while (++index < length) {\n        var array = arguments[index];\n        if (isArrayLike(array)) {\n          var result = result\n            ? arrayPush(baseDifference(result, array), baseDifference(array, result))\n            : array;\n        }\n      }\n      return result ? baseUniq(result) : [];\n    }\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the first\n     * elements of the given arrays, the second of which contains the second elements\n     * of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['fred', 'barney'], [30, 40], [true, false]);\n     * // => [['fred', 30, true], ['barney', 40, false]]\n     */\n    var zip = restParam(unzip);\n\n    /**\n     * The inverse of `_.pairs`; this method returns an object composed from arrays\n     * of property names and values. Provide either a single two dimensional array,\n     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names\n     * and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @alias object\n     * @category Array\n     * @param {Array} props The property names.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject([['fred', 30], ['barney', 40]]);\n     * // => { 'fred': 30, 'barney': 40 }\n     *\n     * _.zipObject(['fred', 'barney'], [30, 40]);\n     * // => { 'fred': 30, 'barney': 40 }\n     */\n    function zipObject(props, values) {\n      var index = -1,\n          length = props ? props.length : 0,\n          result = {};\n\n      if (length && !values && !isArray(props[0])) {\n        values = [];\n      }\n      while (++index < length) {\n        var key = props[index];\n        if (values) {\n          result[key] = values[index];\n        } else if (key) {\n          result[key[0]] = key[1];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an iteratee to specify\n     * how grouped values should be combined. The `iteratee` is bound to `thisArg`\n     * and invoked with four arguments: (accumulator, value, index, group).\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee] The function to combine grouped values.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);\n     * // => [111, 222]\n     */\n    var zipWith = restParam(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 2 ? arrays[length - 2] : undefined,\n          thisArg = length > 1 ? arrays[length - 1] : undefined;\n\n      if (length > 2 && typeof iteratee == 'function') {\n        length -= 2;\n      } else {\n        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;\n        thisArg = undefined;\n      }\n      arrays.length = length;\n      return unzipWith(arrays, iteratee, thisArg);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object that wraps `value` with explicit method\n     * chaining enabled.\n     *\n     * @static\n     * @memberOf _\n     * @category Chain\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _.chain(users)\n     *   .sortBy('age')\n     *   .map(function(chr) {\n     *     return chr.user + ' is ' + chr.age;\n     *   })\n     *   .first()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor is\n     * bound to `thisArg` and invoked with one argument; (value). The purpose of\n     * this method is to \"tap into\" a method chain in order to perform operations\n     * on intermediate results within the chain.\n     *\n     * @static\n     * @memberOf _\n     * @category Chain\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @param {*} [thisArg] The `this` binding of `interceptor`.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor, thisArg) {\n      interceptor.call(thisArg, value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     *\n     * @static\n     * @memberOf _\n     * @category Chain\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @param {*} [thisArg] The `this` binding of `interceptor`.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor, thisArg) {\n      return interceptor.call(thisArg, value);\n    }\n\n    /**\n     * Enables explicit method chaining on the wrapper object.\n     *\n     * @name chain\n     * @memberOf _\n     * @category Chain\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // without explicit chaining\n     * _(users).first();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // with explicit chaining\n     * _(users).chain()\n     *   .first()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chained sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @category Chain\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Creates a new array joining a wrapped array with any additional arrays\n     * and/or values.\n     *\n     * @name concat\n     * @memberOf _\n     * @category Chain\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var wrapped = _(array).concat(2, [3], [[4]]);\n     *\n     * console.log(wrapped.value());\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    var wrapperConcat = restParam(function(values) {\n      values = baseFlatten(values);\n      return this.thru(function(array) {\n        return arrayConcat(isArray(array) ? array : [toObject(array)], values);\n      });\n    });\n\n    /**\n     * Creates a clone of the chained sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @category Chain\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).map(function(value) {\n     *   return Math.pow(value, 2);\n     * });\n     *\n     * var other = [3, 4];\n     * var otherWrapped = wrapped.plant(other);\n     *\n     * otherWrapped.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * Reverses the wrapped array so the first element becomes the last, the\n     * second element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @category Chain\n     * @returns {Object} Returns the new reversed `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n\n      var interceptor = function(value) {\n        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();\n      };\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(interceptor);\n    }\n\n    /**\n     * Produces the result of coercing the unwrapped value to a string.\n     *\n     * @name toString\n     * @memberOf _\n     * @category Chain\n     * @returns {string} Returns the coerced string value.\n     * @example\n     *\n     * _([1, 2, 3]).toString();\n     * // => '1,2,3'\n     */\n    function wrapperToString() {\n      return (this.value() + '');\n    }\n\n    /**\n     * Executes the chained sequence to extract the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @alias run, toJSON, valueOf\n     * @category Chain\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements corresponding to the given keys, or indexes,\n     * of `collection`. Keys may be specified as individual arguments or as arrays\n     * of keys.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {...(number|number[]|string|string[])} [props] The property names\n     *  or indexes of elements to pick, specified individually or in arrays.\n     * @returns {Array} Returns the new array of picked elements.\n     * @example\n     *\n     * _.at(['a', 'b', 'c'], [0, 2]);\n     * // => ['a', 'c']\n     *\n     * _.at(['barney', 'fred', 'pebbles'], 0, 2);\n     * // => ['barney', 'pebbles']\n     */\n    var at = restParam(function(collection, props) {\n      return baseAt(collection, baseFlatten(props));\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` through `iteratee`. The corresponding value\n     * of each key is the number of times the key was returned by `iteratee`.\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([4.3, 6.1, 6.4], function(n) {\n     *   return Math.floor(n);\n     * });\n     * // => { '4': 1, '6': 2 }\n     *\n     * _.countBy([4.3, 6.1, 6.4], function(n) {\n     *   return this.floor(n);\n     * }, Math);\n     * // => { '4': 1, '6': 2 }\n     *\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * The predicate is bound to `thisArg` and invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias all\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': false },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // using the `_.matches` callback shorthand\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.every(users, 'active', false);\n     * // => true\n     *\n     * // using the `_.property` callback shorthand\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, thisArg) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {\n        predicate = undefined;\n      }\n      if (typeof predicate != 'function' || thisArg !== undefined) {\n        predicate = getCallback(predicate, thisArg, 3);\n      }\n      return func(collection, predicate);\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is bound to `thisArg` and\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias select\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Array} Returns the new filtered array.\n     * @example\n     *\n     * _.filter([4, 5, 6], function(n) {\n     *   return n % 2 == 0;\n     * });\n     * // => [4, 6]\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // using the `_.matches` callback shorthand\n     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');\n     * // => ['barney']\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.pluck(_.filter(users, 'active', false), 'user');\n     * // => ['fred']\n     *\n     * // using the `_.property` callback shorthand\n     * _.pluck(_.filter(users, 'active'), 'user');\n     * // => ['barney']\n     */\n    function filter(collection, predicate, thisArg) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      predicate = getCallback(predicate, thisArg, 3);\n      return func(collection, predicate);\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is bound to `thisArg` and\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias detect\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to search.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.result(_.find(users, function(chr) {\n     *   return chr.age < 40;\n     * }), 'user');\n     * // => 'barney'\n     *\n     * // using the `_.matches` callback shorthand\n     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');\n     * // => 'pebbles'\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.result(_.find(users, 'active', false), 'user');\n     * // => 'fred'\n     *\n     * // using the `_.property` callback shorthand\n     * _.result(_.find(users, 'active'), 'user');\n     * // => 'barney'\n     */\n    var find = createFind(baseEach);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to search.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(baseEachRight, true);\n\n    /**\n     * Performs a deep comparison between each element in `collection` and the\n     * source object, returning the first element that has equivalent property\n     * values.\n     *\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by\n     * their own, not inherited, enumerable properties. For comparing a single\n     * own or inherited property value see `_.matchesProperty`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to search.\n     * @param {Object} source The object of property values to match.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');\n     * // => 'barney'\n     *\n     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');\n     * // => 'fred'\n     */\n    function findWhere(collection, source) {\n      return find(collection, baseMatches(source));\n    }\n\n    /**\n     * Iterates over elements of `collection` invoking `iteratee` for each element.\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:\n     * (value, index|key, collection). Iteratee functions may exit iteration early\n     * by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\" property\n     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`\n     * may be used for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @alias each\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Array|Object|string} Returns `collection`.\n     * @example\n     *\n     * _([1, 2]).forEach(function(n) {\n     *   console.log(n);\n     * }).value();\n     * // => logs each value from left to right and returns the array\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {\n     *   console.log(n, key);\n     * });\n     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)\n     */\n    var forEach = createForEach(arrayEach, baseEach);\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Array|Object|string} Returns `collection`.\n     * @example\n     *\n     * _([1, 2]).forEachRight(function(n) {\n     *   console.log(n);\n     * }).value();\n     * // => logs each value from right to left and returns the array\n     */\n    var forEachRight = createForEach(arrayEachRight, baseEachRight);\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` through `iteratee`. The corresponding value\n     * of each key is an array of the elements responsible for generating the key.\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([4.2, 6.1, 6.4], function(n) {\n     *   return Math.floor(n);\n     * });\n     * // => { '4': [4.2], '6': [6.1, 6.4] }\n     *\n     * _.groupBy([4.2, 6.1, 6.4], function(n) {\n     *   return this.floor(n);\n     * }, Math);\n     * // => { '4': [4.2], '6': [6.1, 6.4] }\n     *\n     * // using the `_.property` callback shorthand\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        result[key] = [value];\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it is used as the offset\n     * from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @alias contains, include\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to search.\n     * @param {*} target The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.\n     * @returns {boolean} Returns `true` if a matching element is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');\n     * // => true\n     *\n     * _.includes('pebbles', 'eb');\n     * // => true\n     */\n    function includes(collection, target, fromIndex, guard) {\n      var length = collection ? getLength(collection) : 0;\n      if (!isLength(length)) {\n        collection = values(collection);\n        length = collection.length;\n      }\n      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {\n        fromIndex = 0;\n      } else {\n        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);\n      }\n      return (typeof collection == 'string' || !isArray(collection) && isString(collection))\n        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)\n        : (!!length && getIndexOf(collection, target, fromIndex) > -1);\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` through `iteratee`. The corresponding value\n     * of each key is the last element responsible for generating the key. The\n     * iteratee function is bound to `thisArg` and invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var keyData = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.indexBy(keyData, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.indexBy(keyData, function(object) {\n     *   return String.fromCharCode(object.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.indexBy(keyData, function(object) {\n     *   return this.fromCharCode(object.code);\n     * }, String);\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     */\n    var indexBy = createAggregator(function(result, value, key) {\n      result[key] = value;\n    });\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `methodName` is a function it is\n     * invoked for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invoke([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invoke = restParam(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          isProp = isKey(path),\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);\n        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` through\n     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,\n     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,\n     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,\n     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,\n     * `sum`, `uniq`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @alias collect\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function timesThree(n) {\n     *   return n * 3;\n     * }\n     *\n     * _.map([1, 2], timesThree);\n     * // => [3, 6]\n     *\n     * _.map({ 'a': 1, 'b': 2 }, timesThree);\n     * // => [3, 6] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // using the `_.property` callback shorthand\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee, thisArg) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      iteratee = getCallback(iteratee, thisArg, 3);\n      return func(collection, iteratee);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, while the second of which\n     * contains elements `predicate` returns falsey for. The predicate is bound\n     * to `thisArg` and invoked with three arguments: (value, index|key, collection).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * _.partition([1, 2, 3], function(n) {\n     *   return n % 2;\n     * });\n     * // => [[1, 3], [2]]\n     *\n     * _.partition([1.2, 2.3, 3.4], function(n) {\n     *   return this.floor(n) % 2;\n     * }, Math);\n     * // => [[1.2, 3.4], [2.3]]\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * var mapper = function(array) {\n     *   return _.pluck(array, 'user');\n     * };\n     *\n     * // using the `_.matches` callback shorthand\n     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);\n     * // => [['pebbles'], ['barney', 'fred']]\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.map(_.partition(users, 'active', false), mapper);\n     * // => [['barney', 'pebbles'], ['fred']]\n     *\n     * // using the `_.property` callback shorthand\n     * _.map(_.partition(users, 'active'), mapper);\n     * // => [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Gets the property value of `path` from all elements in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Array|string} path The path of the property to pluck.\n     * @returns {Array} Returns the property values.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * _.pluck(users, 'user');\n     * // => ['barney', 'fred']\n     *\n     * var userIndex = _.indexBy(users, 'user');\n     * _.pluck(userIndex, 'age');\n     * // => [36, 40] (iteration order is not guaranteed)\n     */\n    function pluck(collection, path) {\n      return map(collection, property(path));\n    }\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` through `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not provided the first element of `collection` is used as the initial\n     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,\n     * and `sortByOrder`\n     *\n     * @static\n     * @memberOf _\n     * @alias foldl, inject\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.reduce([1, 2], function(total, n) {\n     *   return total + n;\n     * });\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {\n     *   result[key] = n * 3;\n     *   return result;\n     * }, {});\n     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)\n     */\n    var reduce = createReduce(arrayReduce, baseEach);\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @alias foldr\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    var reduceRight = createReduce(arrayReduceRight, baseEachRight);\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Array} Returns the new filtered array.\n     * @example\n     *\n     * _.reject([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 0;\n     * });\n     * // => [1, 3]\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * // using the `_.matches` callback shorthand\n     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');\n     * // => ['barney']\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.pluck(_.reject(users, 'active', false), 'user');\n     * // => ['fred']\n     *\n     * // using the `_.property` callback shorthand\n     * _.pluck(_.reject(users, 'active'), 'user');\n     * // => ['barney']\n     */\n    function reject(collection, predicate, thisArg) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      predicate = getCallback(predicate, thisArg, 3);\n      return func(collection, function(value, index, collection) {\n        return !predicate(value, index, collection);\n      });\n    }\n\n    /**\n     * Gets a random element or `n` random elements from a collection.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to sample.\n     * @param {number} [n] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {*} Returns the random sample(s).\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     *\n     * _.sample([1, 2, 3, 4], 2);\n     * // => [3, 1]\n     */\n    function sample(collection, n, guard) {\n      if (guard ? isIterateeCall(collection, n, guard) : n == null) {\n        collection = toIterable(collection);\n        var length = collection.length;\n        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;\n      }\n      var index = -1,\n          result = toArray(collection),\n          length = result.length,\n          lastIndex = length - 1;\n\n      n = nativeMin(n < 0 ? 0 : (+n || 0), length);\n      while (++index < n) {\n        var rand = baseRandom(index, lastIndex),\n            value = result[rand];\n\n        result[rand] = result[index];\n        result[index] = value;\n      }\n      result.length = n;\n      return result;\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      return sample(collection, POSITIVE_INFINITY);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the size of `collection`.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      var length = collection ? getLength(collection) : 0;\n      return isLength(length) ? length : keys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * The function returns as soon as it finds a passing value and does not iterate\n     * over the entire collection. The predicate is bound to `thisArg` and invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias any\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // using the `_.matches` callback shorthand\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.some(users, 'active', false);\n     * // => true\n     *\n     * // using the `_.property` callback shorthand\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, thisArg) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {\n        predicate = undefined;\n      }\n      if (typeof predicate != 'function' || thisArg !== undefined) {\n        predicate = getCallback(predicate, thisArg, 3);\n      }\n      return func(collection, predicate);\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection through `iteratee`. This method performs\n     * a stable sort, that is, it preserves the original sort order of equal elements.\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * _.sortBy([1, 2, 3], function(n) {\n     *   return Math.sin(n);\n     * });\n     * // => [3, 1, 2]\n     *\n     * _.sortBy([1, 2, 3], function(n) {\n     *   return this.sin(n);\n     * }, Math);\n     * // => [3, 1, 2]\n     *\n     * var users = [\n     *   { 'user': 'fred' },\n     *   { 'user': 'pebbles' },\n     *   { 'user': 'barney' }\n     * ];\n     *\n     * // using the `_.property` callback shorthand\n     * _.pluck(_.sortBy(users, 'user'), 'user');\n     * // => ['barney', 'fred', 'pebbles']\n     */\n    function sortBy(collection, iteratee, thisArg) {\n      if (collection == null) {\n        return [];\n      }\n      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {\n        iteratee = undefined;\n      }\n      var index = -1;\n      iteratee = getCallback(iteratee, thisArg, 3);\n\n      var result = baseMap(collection, function(value, key, collection) {\n        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };\n      });\n      return baseSortBy(result, compareAscending);\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it can sort by multiple iteratees\n     * or property names.\n     *\n     * If a property name is provided for an iteratee the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If an object is provided for an iteratee the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees\n     *  The iteratees to sort by, specified as individual values or arrays of values.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 42 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.map(_.sortByAll(users, ['user', 'age']), _.values);\n     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]\n     *\n     * _.map(_.sortByAll(users, 'user', function(chr) {\n     *   return Math.floor(chr.age / 10);\n     * }), _.values);\n     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n     */\n    var sortByAll = restParam(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var guard = iteratees[2];\n      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {\n        iteratees.length = 1;\n      }\n      return baseSortByOrder(collection, baseFlatten(iteratees), []);\n    });\n\n    /**\n     * This method is like `_.sortByAll` except that it allows specifying the\n     * sort orders of the iteratees to sort by. If `orders` is unspecified, all\n     * values are sorted in ascending order. Otherwise, a value is sorted in\n     * ascending order if its corresponding order is \"asc\", and descending if \"desc\".\n     *\n     * If a property name is provided for an iteratee the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If an object is provided for an iteratee the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {boolean[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 42 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // sort by `user` in ascending order and by `age` in descending order\n     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);\n     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n     */\n    function sortByOrder(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (guard && isIterateeCall(iteratees, orders, guard)) {\n        orders = undefined;\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseSortByOrder(collection, iteratees, orders);\n    }\n\n    /**\n     * Performs a deep comparison between each element in `collection` and the\n     * source object, returning an array of all elements that have equivalent\n     * property values.\n     *\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by\n     * their own, not inherited, enumerable properties. For comparing a single\n     * own or inherited property value see `_.matchesProperty`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to search.\n     * @param {Object} source The object of property values to match.\n     * @returns {Array} Returns the new filtered array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },\n     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }\n     * ];\n     *\n     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');\n     * // => ['barney']\n     *\n     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');\n     * // => ['fred']\n     */\n    function where(collection, source) {\n      return filter(collection, baseMatches(source));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the number of milliseconds that have elapsed since the Unix epoch\n     * (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @category Date\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => logs the number of milliseconds it took for the deferred function to be invoked\n     */\n    var now = nativeNow || function() {\n      return new Date().getTime();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it is called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => logs 'done saving!' after the two async saves have completed\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        if (typeof n == 'function') {\n          var temp = n;\n          n = func;\n          func = temp;\n        } else {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n      }\n      n = nativeIsFinite(n = +n) ? n : 0;\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that accepts up to `n` arguments ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      if (guard && isIterateeCall(func, n, guard)) {\n        n = undefined;\n      }\n      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);\n      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it is called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery('#add').on('click', _.before(5, addContactToList));\n     * // => allows adding up to 4 contacts to the list\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        if (typeof n == 'function') {\n          var temp = n;\n          n = func;\n          func = temp;\n        } else {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n      }\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and prepends any additional `_.bind` arguments to those provided to the\n     * bound function.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind` this method does not set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var greet = function(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * };\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // using placeholders\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = restParam(function(func, thisArg, partials) {\n      var bitmask = BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, bind.placeholder);\n        bitmask |= PARTIAL_FLAG;\n      }\n      return createWrapper(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method. Method names may be specified as individual arguments or as arrays\n     * of method names. If no method names are provided all enumerable function\n     * properties, own and inherited, of `object` are bound.\n     *\n     * **Note:** This method does not set the \"length\" property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} [methodNames] The object method names to bind,\n     *  specified as individual method names or arrays of method names.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'onClick': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view);\n     * jQuery('#docs').on('click', view.onClick);\n     * // => logs 'clicked docs' when the element is clicked\n     */\n    var bindAll = restParam(function(object, methodNames) {\n      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);\n\n      var index = -1,\n          length = methodNames.length;\n\n      while (++index < length) {\n        var key = methodNames[index];\n        object[key] = createWrapper(object[key], BIND_FLAG, object);\n      }\n      return object;\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` and prepends\n     * any additional `_.bindKey` arguments to those provided to the bound function.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist.\n     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Object} object The object the method belongs to.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // using placeholders\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = restParam(function(object, key, partials) {\n      var bitmask = BIND_FLAG | BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, bindKey.placeholder);\n        bitmask |= PARTIAL_FLAG;\n      }\n      return createWrapper(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts one or more arguments of `func` that when\n     * called either invokes `func` returning its result, if all `func` arguments\n     * have been provided, or returns a function that accepts one or more of the\n     * remaining `func` arguments, and so on. The arity of `func` may be specified\n     * if `func.length` is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method does not set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // using placeholders\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    var curry = createCurry(CURRY_FLAG);\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method does not set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // using placeholders\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    var curryRight = createCurry(CURRY_RIGHT_FLAG);\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed invocations. Provide an options object to indicate that `func`\n     * should be invoked on the leading and/or trailing edge of the `wait` timeout.\n     * Subsequent calls to the debounced function return the result of the last\n     * `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked\n     * on the trailing edge of the timeout only if the the debounced function is\n     * invoked more than once during the `wait` timeout.\n     *\n     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options] The options object.\n     * @param {boolean} [options.leading=false] Specify invoking on the leading\n     *  edge of the timeout.\n     * @param {number} [options.maxWait] The maximum time `func` is allowed to be\n     *  delayed before it is invoked.\n     * @param {boolean} [options.trailing=true] Specify invoking on the trailing\n     *  edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // avoid costly calculations while the window size is in flux\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls\n     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // ensure `batchLog` is invoked once after 1 second of debounced calls\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', _.debounce(batchLog, 250, {\n     *   'maxWait': 1000\n     * }));\n     *\n     * // cancel a debounced call\n     * var todoChanges = _.debounce(batchLog, 1000);\n     * Object.observe(models.todo, todoChanges);\n     *\n     * Object.observe(models, function(changes) {\n     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {\n     *     todoChanges.cancel();\n     *   }\n     * }, ['delete']);\n     *\n     * // ...at some point `models.todo` is changed\n     * models.todo.completed = true;\n     *\n     * // ...before 1 second has passed `models.todo` is deleted\n     * // which cancels the debounced `todoChanges` call\n     * delete models.todo;\n     */\n    function debounce(func, wait, options) {\n      var args,\n          maxTimeoutId,\n          result,\n          stamp,\n          thisArg,\n          timeoutId,\n          trailingCall,\n          lastCalled = 0,\n          maxWait = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = wait < 0 ? 0 : (+wait || 0);\n      if (options === true) {\n        var leading = true;\n        trailing = false;\n      } else if (isObject(options)) {\n        leading = !!options.leading;\n        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function cancel() {\n        if (timeoutId) {\n          clearTimeout(timeoutId);\n        }\n        if (maxTimeoutId) {\n          clearTimeout(maxTimeoutId);\n        }\n        lastCalled = 0;\n        maxTimeoutId = timeoutId = trailingCall = undefined;\n      }\n\n      function complete(isCalled, id) {\n        if (id) {\n          clearTimeout(id);\n        }\n        maxTimeoutId = timeoutId = trailingCall = undefined;\n        if (isCalled) {\n          lastCalled = now();\n          result = func.apply(thisArg, args);\n          if (!timeoutId && !maxTimeoutId) {\n            args = thisArg = undefined;\n          }\n        }\n      }\n\n      function delayed() {\n        var remaining = wait - (now() - stamp);\n        if (remaining <= 0 || remaining > wait) {\n          complete(trailingCall, maxTimeoutId);\n        } else {\n          timeoutId = setTimeout(delayed, remaining);\n        }\n      }\n\n      function maxDelayed() {\n        complete(trailing, timeoutId);\n      }\n\n      function debounced() {\n        args = arguments;\n        stamp = now();\n        thisArg = this;\n        trailingCall = trailing && (timeoutId || !leading);\n\n        if (maxWait === false) {\n          var leadingCall = leading && !timeoutId;\n        } else {\n          if (!maxTimeoutId && !leading) {\n            lastCalled = stamp;\n          }\n          var remaining = maxWait - (stamp - lastCalled),\n              isCalled = remaining <= 0 || remaining > maxWait;\n\n          if (isCalled) {\n            if (maxTimeoutId) {\n              maxTimeoutId = clearTimeout(maxTimeoutId);\n            }\n            lastCalled = stamp;\n            result = func.apply(thisArg, args);\n          }\n          else if (!maxTimeoutId) {\n            maxTimeoutId = setTimeout(maxDelayed, remaining);\n          }\n        }\n        if (isCalled && timeoutId) {\n          timeoutId = clearTimeout(timeoutId);\n        }\n        else if (!timeoutId && wait !== maxWait) {\n          timeoutId = setTimeout(delayed, wait);\n        }\n        if (leadingCall) {\n          isCalled = true;\n          result = func.apply(thisArg, args);\n        }\n        if (isCalled && !timeoutId && !maxTimeoutId) {\n          args = thisArg = undefined;\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it is invoked.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke the function with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // logs 'deferred' after one or more milliseconds\n     */\n    var defer = restParam(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it is invoked.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke the function with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => logs 'later' after one second\n     */\n    var delay = restParam(function(func, wait, args) {\n      return baseDelay(func, wait, args);\n    });\n\n    /**\n     * Creates a function that returns the result of invoking the provided\n     * functions with the `this` binding of the created function, where each\n     * successive invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {...Function} [funcs] Functions to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow(_.add, square);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the provided functions from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @alias backflow, compose\n     * @category Function\n     * @param {...Function} [funcs] Functions to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight(square, _.add);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is coerced to a string and used as the\n     * cache key. The `func` is invoked with the `this` binding of the memoized\n     * function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoizing function.\n     * @example\n     *\n     * var upperCase = _.memoize(function(string) {\n     *   return string.toUpperCase();\n     * });\n     *\n     * upperCase('fred');\n     * // => 'FRED'\n     *\n     * // modifying the result cache\n     * upperCase.cache.set('fred', 'BARNEY');\n     * upperCase('fred');\n     * // => 'BARNEY'\n     *\n     * // replacing `_.memoize.Cache`\n     * var object = { 'user': 'fred' };\n     * var other = { 'user': 'barney' };\n     * var identity = _.memoize(_.identity);\n     *\n     * identity(object);\n     * // => { 'user': 'fred' }\n     * identity(other);\n     * // => { 'user': 'fred' }\n     *\n     * _.memoize.Cache = WeakMap;\n     * var identity = _.memoize(_.identity);\n     *\n     * identity(object);\n     * // => { 'user': 'fred' }\n     * identity(other);\n     * // => { 'user': 'barney' }\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result);\n        return result;\n      };\n      memoized.cache = new memoize.Cache;\n      return memoized;\n    }\n\n    /**\n     * Creates a function that runs each argument through a corresponding\n     * transform function.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms] The functions to transform\n     * arguments, specified as individual functions or arrays of functions.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var modded = _.modArgs(function(x, y) {\n     *   return [x, y];\n     * }, square, doubled);\n     *\n     * modded(1, 2);\n     * // => [1, 4]\n     *\n     * modded(5, 10);\n     * // => [25, 20]\n     */\n    var modArgs = restParam(function(func, transforms) {\n      transforms = baseFlatten(transforms);\n      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = transforms.length;\n      return restParam(function(args) {\n        var index = nativeMin(args.length, length);\n        while (index--) {\n          args[index] = transforms[index](args[index]);\n        }\n        return func.apply(this, args);\n      });\n    });\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        return !predicate.apply(this, arguments);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first call. The `func` is invoked\n     * with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // `initialize` invokes `createApplication` once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with `partial` arguments prepended\n     * to those provided to the new function. This method is like `_.bind` except\n     * it does **not** alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method does not set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * var greet = function(greeting, name) {\n     *   return greeting + ' ' + name;\n     * };\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // using placeholders\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = createPartial(PARTIAL_FLAG);\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to those provided to the new function.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method does not set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * var greet = function(greeting, name) {\n     *   return greeting + ' ' + name;\n     * };\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // using placeholders\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified indexes where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes,\n     *  specified as individual indexes or arrays of indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, 2, 0, 1);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     *\n     * var map = _.rearg(_.map, [1, 0]);\n     * map(function(n) {\n     *   return n * 3;\n     * }, [1, 2, 3]);\n     * // => [3, 6, 9]\n     */\n    var rearg = restParam(function(func, indexes) {\n      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as an array.\n     *\n     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.restParam(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function restParam(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            rest = Array(length);\n\n        while (++index < length) {\n          rest[index] = args[start + index];\n        }\n        switch (start) {\n          case 0: return func.call(this, rest);\n          case 1: return func.call(this, args[0], rest);\n          case 2: return func.call(this, args[0], args[1], rest);\n        }\n        var otherArgs = Array(start + 1);\n        index = -1;\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = rest;\n        return func.apply(this, otherArgs);\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the created\n     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).\n     *\n     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * // with a Promise\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function(array) {\n        return func.apply(this, array);\n      };\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed invocations. Provide an options object to indicate\n     * that `func` should be invoked on the leading and/or trailing edge of the\n     * `wait` timeout. Subsequent calls to the throttled function return the\n     * result of the last `func` call.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked\n     * on the trailing edge of the timeout only if the the throttled function is\n     * invoked more than once during the `wait` timeout.\n     *\n     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options] The options object.\n     * @param {boolean} [options.leading=true] Specify invoking on the leading\n     *  edge of the timeout.\n     * @param {boolean} [options.trailing=true] Specify invoking on the trailing\n     *  edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // avoid excessively updating the position while scrolling\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes\n     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {\n     *   'trailing': false\n     * }));\n     *\n     * // cancel a trailing throttled call\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (options === false) {\n        leading = false;\n      } else if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });\n    }\n\n    /**\n     * Creates a function that provides `value` to the wrapper function as its\n     * first argument. Any additional arguments provided to the function are\n     * appended to those provided to the wrapper function. The wrapper is invoked\n     * with the `this` binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} wrapper The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      wrapper = wrapper == null ? identity : wrapper;\n      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,\n     * otherwise they are assigned by reference. If `customizer` is provided it is\n     * invoked to produce the cloned values. If `customizer` returns `undefined`\n     * cloning is handled by the method instead. The `customizer` is bound to\n     * `thisArg` and invoked with two argument; (value [, index|key, object]).\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).\n     * The enumerable properties of `arguments` objects and objects created by\n     * constructors other than `Object` are cloned to plain `Object` objects. An\n     * empty object is returned for uncloneable values such as functions, DOM nodes,\n     * Maps, Sets, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @param {Function} [customizer] The function to customize cloning values.\n     * @param {*} [thisArg] The `this` binding of `customizer`.\n     * @returns {*} Returns the cloned value.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * var shallow = _.clone(users);\n     * shallow[0] === users[0];\n     * // => true\n     *\n     * var deep = _.clone(users, true);\n     * deep[0] === users[0];\n     * // => false\n     *\n     * // using a customizer callback\n     * var el = _.clone(document.body, function(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * });\n     *\n     * el === document.body\n     * // => false\n     * el.nodeName\n     * // => BODY\n     * el.childNodes.length;\n     * // => 0\n     */\n    function clone(value, isDeep, customizer, thisArg) {\n      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {\n        isDeep = false;\n      }\n      else if (typeof isDeep == 'function') {\n        thisArg = customizer;\n        customizer = isDeep;\n        isDeep = false;\n      }\n      return typeof customizer == 'function'\n        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))\n        : baseClone(value, isDeep);\n    }\n\n    /**\n     * Creates a deep clone of `value`. If `customizer` is provided it is invoked\n     * to produce the cloned values. If `customizer` returns `undefined` cloning\n     * is handled by the method instead. The `customizer` is bound to `thisArg`\n     * and invoked with two argument; (value [, index|key, object]).\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).\n     * The enumerable properties of `arguments` objects and objects created by\n     * constructors other than `Object` are cloned to plain `Object` objects. An\n     * empty object is returned for uncloneable values such as functions, DOM nodes,\n     * Maps, Sets, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to deep clone.\n     * @param {Function} [customizer] The function to customize cloning values.\n     * @param {*} [thisArg] The `this` binding of `customizer`.\n     * @returns {*} Returns the deep cloned value.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * var deep = _.cloneDeep(users);\n     * deep[0] === users[0];\n     * // => false\n     *\n     * // using a customizer callback\n     * var el = _.cloneDeep(document.body, function(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * });\n     *\n     * el === document.body\n     * // => false\n     * el.nodeName\n     * // => BODY\n     * el.childNodes.length;\n     * // => 20\n     */\n    function cloneDeep(value, customizer, thisArg) {\n      return typeof customizer == 'function'\n        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))\n        : baseClone(value, true);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    function gt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    function gte(value, other) {\n      return value >= other;\n    }\n\n    /**\n     * Checks if `value` is classified as an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    function isArguments(value) {\n      return isObjectLike(value) && isArrayLike(value) &&\n        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');\n    }\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(function() { return arguments; }());\n     * // => false\n     */\n    var isArray = nativeIsArray || function(value) {\n      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;\n    };\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    function isDate(value) {\n      return isObjectLike(value) && objToString.call(value) == dateTag;\n    }\n\n    /**\n     * Checks if `value` is a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is empty. A value is considered empty unless it is an\n     * `arguments` object, array, string, or jQuery-like collection with a length\n     * greater than `0` or an object with own enumerable properties.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {Array|Object|string} value The value to inspect.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||\n          (isObjectLike(value) && isFunction(value.splice)))) {\n        return !value.length;\n      }\n      return !keys(value).length;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent. If `customizer` is provided it is invoked to compare values.\n     * If `customizer` returns `undefined` comparisons are handled by the method\n     * instead. The `customizer` is bound to `thisArg` and invoked with three\n     * arguments: (value, other [, index|key]).\n     *\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by\n     * their own, not inherited, enumerable properties. Functions and DOM nodes\n     * are **not** supported. Provide a customizer function to extend support\n     * for comparing other values.\n     *\n     * @static\n     * @memberOf _\n     * @alias eq\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize value comparisons.\n     * @param {*} [thisArg] The `this` binding of `customizer`.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'user': 'fred' };\n     * var other = { 'user': 'fred' };\n     *\n     * object == other;\n     * // => false\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * // using a customizer callback\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqual(array, other, function(value, other) {\n     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {\n     *     return true;\n     *   }\n     * });\n     * // => true\n     */\n    function isEqual(value, other, customizer, thisArg) {\n      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(10);\n     * // => true\n     *\n     * _.isFinite('10');\n     * // => false\n     *\n     * _.isFinite(true);\n     * // => false\n     *\n     * _.isFinite(Object(10));\n     * // => false\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in older versions of Chrome and Safari which return 'function' for regexes\n      // and Safari 8 equivalents which return 'object' for typed array constructors.\n      return isObject(value) && objToString.call(value) == funcTag;\n    }\n\n    /**\n     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(1);\n     * // => false\n     */\n    function isObject(value) {\n      // Avoid a V8 JIT bug in Chrome 19-20.\n      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n      var type = typeof value;\n      return !!value && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Performs a deep comparison between `object` and `source` to determine if\n     * `object` contains equivalent property values. If `customizer` is provided\n     * it is invoked to compare values. If `customizer` returns `undefined`\n     * comparisons are handled by the method instead. The `customizer` is bound\n     * to `thisArg` and invoked with three arguments: (value, other, index|key).\n     *\n     * **Note:** This method supports comparing properties of arrays, booleans,\n     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions\n     * and DOM nodes are **not** supported. Provide a customizer function to extend\n     * support for comparing other values.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize value comparisons.\n     * @param {*} [thisArg] The `this` binding of `customizer`.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'user': 'fred', 'age': 40 };\n     *\n     * _.isMatch(object, { 'age': 40 });\n     * // => true\n     *\n     * _.isMatch(object, { 'age': 36 });\n     * // => false\n     *\n     * // using a customizer callback\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatch(object, source, function(value, other) {\n     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;\n     * });\n     * // => true\n     */\n    function isMatch(object, source, customizer, thisArg) {\n      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;\n      return baseIsMatch(object, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)\n     * which returns `true` for `undefined` and other non-numeric values.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a native function.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (value == null) {\n        return false;\n      }\n      if (isFunction(value)) {\n        return reIsNative.test(fnToString.call(value));\n      }\n      return isObjectLike(value) && reIsHostCtor.test(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified\n     * as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n     * @example\n     *\n     * _.isNumber(8.4);\n     * // => true\n     *\n     * _.isNumber(NaN);\n     * // => true\n     *\n     * _.isNumber('8.4');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * **Note:** This method assumes objects created by the `Object` constructor\n     * have no inherited enumerable properties.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      var Ctor;\n\n      // Exit early for non `Object` objects.\n      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||\n          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {\n        return false;\n      }\n      // IE < 9 iterates inherited properties before own properties. If the first\n      // iterated property is an object's own property then there are no inherited\n      // enumerable properties.\n      var result;\n      // In most environments an object's own properties are iterated before\n      // its inherited properties. If the last iterated property is an object's\n      // own property then there are no inherited enumerable properties.\n      baseForIn(value, function(subValue, key) {\n        result = key;\n      });\n      return result === undefined || hasOwnProperty.call(value, result);\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    function isRegExp(value) {\n      return isObject(value) && objToString.call(value) == regexpTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    function isTypedArray(value) {\n      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];\n    }\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    function lt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    function lte(value, other) {\n      return value <= other;\n    }\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * (function() {\n     *   return _.toArray(arguments).slice(1);\n     * }(1, 2, 3));\n     * // => [2, 3]\n     */\n    function toArray(value) {\n      var length = value ? getLength(value) : 0;\n      if (!isLength(length)) {\n        return values(value);\n      }\n      if (!length) {\n        return [];\n      }\n      return arrayCopy(value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable\n     * properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return baseCopy(value, keysIn(value));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Recursively merges own enumerable properties of the source object(s), that\n     * don't resolve to `undefined` into the destination object. Subsequent sources\n     * overwrite property assignments of previous sources. If `customizer` is\n     * provided it is invoked to produce the merged values of the destination and\n     * source properties. If `customizer` returns `undefined` merging is handled\n     * by the method instead. The `customizer` is bound to `thisArg` and invoked\n     * with five arguments: (objectValue, sourceValue, key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {*} [thisArg] The `this` binding of `customizer`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var users = {\n     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]\n     * };\n     *\n     * var ages = {\n     *   'data': [{ 'age': 36 }, { 'age': 40 }]\n     * };\n     *\n     * _.merge(users, ages);\n     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }\n     *\n     * // using a customizer callback\n     * var object = {\n     *   'fruits': ['apple'],\n     *   'vegetables': ['beet']\n     * };\n     *\n     * var other = {\n     *   'fruits': ['banana'],\n     *   'vegetables': ['carrot']\n     * };\n     *\n     * _.merge(object, other, function(a, b) {\n     *   if (_.isArray(a)) {\n     *     return a.concat(b);\n     *   }\n     * });\n     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }\n     */\n    var merge = createAssigner(baseMerge);\n\n    /**\n     * Assigns own enumerable properties of source object(s) to the destination\n     * object. Subsequent sources overwrite property assignments of previous sources.\n     * If `customizer` is provided it is invoked to produce the assigned values.\n     * The `customizer` is bound to `thisArg` and invoked with five arguments:\n     * (objectValue, sourceValue, key, object, source).\n     *\n     * **Note:** This method mutates `object` and is based on\n     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).\n     *\n     * @static\n     * @memberOf _\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {*} [thisArg] The `this` binding of `customizer`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });\n     * // => { 'user': 'fred', 'age': 40 }\n     *\n     * // using a customizer callback\n     * var defaults = _.partialRight(_.assign, function(value, other) {\n     *   return _.isUndefined(value) ? other : value;\n     * });\n     *\n     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });\n     * // => { 'user': 'barney', 'age': 36 }\n     */\n    var assign = createAssigner(function(object, source, customizer) {\n      return customizer\n        ? assignWith(object, source, customizer)\n        : baseAssign(object, source);\n    });\n\n    /**\n     * Creates an object that inherits from the given `prototype` object. If a\n     * `properties` object is provided its own enumerable properties are assigned\n     * to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties, guard) {\n      var result = baseCreate(prototype);\n      if (guard && isIterateeCall(prototype, properties, guard)) {\n        properties = undefined;\n      }\n      return properties ? baseAssign(result, properties) : result;\n    }\n\n    /**\n     * Assigns own enumerable properties of source object(s) to the destination\n     * object for all destination properties that resolve to `undefined`. Once a\n     * property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });\n     * // => { 'user': 'barney', 'age': 36 }\n     */\n    var defaults = createDefaults(assign, assignDefaults);\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });\n     * // => { 'user': { 'name': 'barney', 'age': 36 } }\n     *\n     */\n    var defaultsDeep = createDefaults(merge, mergeDefaults);\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to search.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(chr) {\n     *   return chr.age < 40;\n     * });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // using the `_.matches` callback shorthand\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.findKey(users, 'active', false);\n     * // => 'fred'\n     *\n     * // using the `_.property` callback shorthand\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    var findKey = createFindKey(baseForOwn);\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to search.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(chr) {\n     *   return chr.age < 40;\n     * });\n     * // => returns `pebbles` assuming `_.findKey` returns `barney`\n     *\n     * // using the `_.matches` callback shorthand\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.findLastKey(users, 'active', false);\n     * // => 'fred'\n     *\n     * // using the `_.property` callback shorthand\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    var findLastKey = createFindKey(baseForOwnRight);\n\n    /**\n     * Iterates over own and inherited enumerable properties of an object invoking\n     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)\n     */\n    var forIn = createForIn(baseFor);\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'\n     */\n    var forInRight = createForIn(baseForRight);\n\n    /**\n     * Iterates over own enumerable properties of an object invoking `iteratee`\n     * for each property. The `iteratee` is bound to `thisArg` and invoked with\n     * three arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => logs 'a' and 'b' (iteration order is not guaranteed)\n     */\n    var forOwn = createForOwn(baseForOwn);\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'\n     */\n    var forOwnRight = createForOwn(baseForOwnRight);\n\n    /**\n     * Creates an array of function property names from all enumerable properties,\n     * own and inherited, of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @alias methods\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the new array of property names.\n     * @example\n     *\n     * _.functions(_);\n     * // => ['after', 'ary', 'assign', ...]\n     */\n    function functions(object) {\n      return baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the property value at `path` of `object`. If the resolved value is\n     * `undefined` the `defaultValue` is used in its place.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': { 'c': 3 } } };\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b.c');\n     * // => true\n     *\n     * _.has(object, ['a', 'b', 'c']);\n     * // => true\n     */\n    function has(object, path) {\n      if (object == null) {\n        return false;\n      }\n      var result = hasOwnProperty.call(object, path);\n      if (!result && !isKey(path)) {\n        path = toPath(path);\n        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n        if (object == null) {\n          return false;\n        }\n        path = last(path);\n        result = hasOwnProperty.call(object, path);\n      }\n      return result || (isLength(object.length) && isIndex(path, object.length) &&\n        (isArray(object) || isArguments(object)));\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite property\n     * assignments of previous values unless `multiValue` is `true`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {boolean} [multiValue] Allow multiple values per key.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     *\n     * // with `multiValue`\n     * _.invert(object, true);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function invert(object, multiValue, guard) {\n      if (guard && isIterateeCall(object, multiValue, guard)) {\n        multiValue = undefined;\n      }\n      var index = -1,\n          props = keys(object),\n          length = props.length,\n          result = {};\n\n      while (++index < length) {\n        var key = props[index],\n            value = object[key];\n\n        if (multiValue) {\n          if (hasOwnProperty.call(result, value)) {\n            result[value].push(key);\n          } else {\n            result[value] = [key];\n          }\n        }\n        else {\n          result[value] = key;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    var keys = !nativeKeys ? shimKeys : function(object) {\n      var Ctor = object == null ? undefined : object.constructor;\n      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||\n          (typeof object != 'function' && isArrayLike(object))) {\n        return shimKeys(object);\n      }\n      return isObject(object) ? nativeKeys(object) : [];\n    };\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      if (object == null) {\n        return [];\n      }\n      if (!isObject(object)) {\n        object = Object(object);\n      }\n      var length = object.length;\n      length = (length && isLength(length) &&\n        (isArray(object) || isArguments(object)) && length) || 0;\n\n      var Ctor = object.constructor,\n          index = -1,\n          isProto = typeof Ctor == 'function' && Ctor.prototype === object,\n          result = Array(length),\n          skipIndexes = length > 0;\n\n      while (++index < length) {\n        result[index] = (index + '');\n      }\n      for (var key in object) {\n        if (!(skipIndexes && isIndex(key, length)) &&\n            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * property of `object` through `iteratee`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Object} Returns the new mapped object.\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    var mapKeys = createObjectMapper(true);\n\n    /**\n     * Creates an object with the same keys as `object` and values generated by\n     * running each own enumerable property of `object` through `iteratee`. The\n     * iteratee function is bound to `thisArg` and invoked with three arguments:\n     * (value, key, object).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Object} Returns the new mapped object.\n     * @example\n     *\n     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {\n     *   return n * 3;\n     * });\n     * // => { 'a': 3, 'b': 6 }\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * // using the `_.property` callback shorthand\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    var mapValues = createObjectMapper();\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable properties of `object` that are not omitted.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function|...(string|string[])} [predicate] The function invoked per\n     *  iteration or property names to omit, specified as individual property\n     *  names or arrays of property names.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'user': 'fred', 'age': 40 };\n     *\n     * _.omit(object, 'age');\n     * // => { 'user': 'fred' }\n     *\n     * _.omit(object, _.isNumber);\n     * // => { 'user': 'fred' }\n     */\n    var omit = restParam(function(object, props) {\n      if (object == null) {\n        return {};\n      }\n      if (typeof props[0] != 'function') {\n        var props = arrayMap(baseFlatten(props), String);\n        return pickByArray(object, baseDifference(keysIn(object), props));\n      }\n      var predicate = bindCallback(props[0], props[1], 3);\n      return pickByCallback(object, function(value, key, object) {\n        return !predicate(value, key, object);\n      });\n    });\n\n    /**\n     * Creates a two dimensional array of the key-value pairs for `object`,\n     * e.g. `[[key1, value1], [key2, value2]]`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the new array of key-value pairs.\n     * @example\n     *\n     * _.pairs({ 'barney': 36, 'fred': 40 });\n     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)\n     */\n    function pairs(object) {\n      object = toObject(object);\n\n      var index = -1,\n          props = keys(object),\n          length = props.length,\n          result = Array(length);\n\n      while (++index < length) {\n        var key = props[index];\n        result[index] = [key, object[key]];\n      }\n      return result;\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties. Property\n     * names may be specified as individual arguments or as arrays of property\n     * names. If `predicate` is provided it is invoked for each property of `object`\n     * picking the properties `predicate` returns truthy for. The predicate is\n     * bound to `thisArg` and invoked with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function|...(string|string[])} [predicate] The function invoked per\n     *  iteration or property names to pick, specified as individual property\n     *  names or arrays of property names.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'user': 'fred', 'age': 40 };\n     *\n     * _.pick(object, 'user');\n     * // => { 'user': 'fred' }\n     *\n     * _.pick(object, _.isString);\n     * // => { 'user': 'fred' }\n     */\n    var pick = restParam(function(object, props) {\n      if (object == null) {\n        return {};\n      }\n      return typeof props[0] == 'function'\n        ? pickByCallback(object, bindCallback(props[0], props[1], 3))\n        : pickByArray(object, baseFlatten(props));\n    });\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a function\n     * it is invoked with the `this` binding of its parent object and its result\n     * is returned.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a.b.c', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a.b.c', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      var result = object == null ? undefined : object[path];\n      if (result === undefined) {\n        if (object != null && !isKey(path, object)) {\n          path = toPath(path);\n          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n          result = object == null ? undefined : object[last(path)];\n        }\n        result = result === undefined ? defaultValue : result;\n      }\n      return isFunction(result) ? result.call(object) : result;\n    }\n\n    /**\n     * Sets the property value of `path` on `object`. If a portion of `path`\n     * does not exist it is created.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to augment.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, 'x[0].y.z', 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      if (object == null) {\n        return object;\n      }\n      var pathKey = (path + '');\n      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = path[index];\n        if (isObject(nested)) {\n          if (index == lastIndex) {\n            nested[key] = value;\n          } else if (nested[key] == null) {\n            nested[key] = isIndex(path[index + 1]) ? [] : {};\n          }\n        }\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own enumerable\n     * properties through `iteratee`, with each invocation potentially mutating\n     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked\n     * with four arguments: (accumulator, value, key, object). Iteratee functions\n     * may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Array|Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * });\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {\n     *   result[key] = n * 3;\n     * });\n     * // => { 'a': 3, 'b': 6 }\n     */\n    function transform(object, iteratee, accumulator, thisArg) {\n      var isArr = isArray(object) || isTypedArray(object);\n      iteratee = getCallback(iteratee, thisArg, 4);\n\n      if (accumulator == null) {\n        if (isArr || isObject(object)) {\n          var Ctor = object.constructor;\n          if (isArr) {\n            accumulator = isArray(object) ? new Ctor : [];\n          } else {\n            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);\n          }\n        } else {\n          accumulator = {};\n        }\n      }\n      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Creates an array of the own enumerable property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property values\n     * of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Checks if `n` is between `start` and up to but not including, `end`. If\n     * `end` is not specified it is set to `start` with `start` then set to `0`.\n     *\n     * @static\n     * @memberOf _\n     * @category Number\n     * @param {number} n The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     */\n    function inRange(value, start, end) {\n      start = +start || 0;\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = +end || 0;\n      }\n      return value >= nativeMin(start, end) && value < nativeMax(start, end);\n    }\n\n    /**\n     * Produces a random number between `min` and `max` (inclusive). If only one\n     * argument is provided a number between `0` and the given number is returned.\n     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point\n     * number is returned instead of an integer.\n     *\n     * @static\n     * @memberOf _\n     * @category Number\n     * @param {number} [min=0] The minimum possible value.\n     * @param {number} [max=1] The maximum possible value.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(min, max, floating) {\n      if (floating && isIterateeCall(min, max, floating)) {\n        max = floating = undefined;\n      }\n      var noMin = min == null,\n          noMax = max == null;\n\n      if (floating == null) {\n        if (noMax && typeof min == 'boolean') {\n          floating = min;\n          min = 1;\n        }\n        else if (typeof max == 'boolean') {\n          floating = max;\n          noMax = true;\n        }\n      }\n      if (noMin && noMax) {\n        max = 1;\n        noMax = false;\n      }\n      min = +min || 0;\n      if (noMax) {\n        max = min;\n        min = 0;\n      } else {\n        max = +max || 0;\n      }\n      if (floating || min % 1 || max % 1) {\n        var rand = nativeRandom();\n        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);\n      }\n      return baseRandom(min, max);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__foo_bar__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);\n    });\n\n    /**\n     * Capitalizes the first character of `string`.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('fred');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      string = baseToString(string);\n      return string && (string.charAt(0).toUpperCase() + string.slice(1));\n    }\n\n    /**\n     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = baseToString(string);\n      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to search.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search from.\n     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = baseToString(string);\n      target = (target + '');\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : nativeMin(position < 0 ? 0 : (+position || 0), length);\n\n      position -= target.length;\n      return position >= 0 && string.indexOf(target, position) == position;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\", in `string` to\n     * their corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional characters\n     * use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value.\n     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * Backticks are escaped because in Internet Explorer < 9, they can break out\n     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),\n     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and\n     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)\n     * for more details.\n     *\n     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)\n     * to reduce XSS vectors.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      // Reset `lastIndex` because in IE < 9 `String#replace` does not.\n      string = baseToString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"\\\", \"/\", \"^\", \"$\", \".\", \"|\", \"?\",\n     * \"*\", \"+\", \"(\", \")\", \"[\", \"]\", \"{\" and \"}\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https:\\/\\/lodash\\.com\\/\\)'\n     */\n    function escapeRegExp(string) {\n      string = baseToString(string);\n      return (string && reHasRegExpChars.test(string))\n        ? string.replace(reRegExpChars, escapeRegExpChar)\n        : (string || '(?:)');\n    }\n\n    /**\n     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__foo_bar__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = baseToString(string);\n      length = +length;\n\n      var strLength = string.length;\n      if (strLength >= length || !nativeIsFinite(length)) {\n        return string;\n      }\n      var mid = (length - strLength) / 2,\n          leftLength = nativeFloor(mid),\n          rightLength = nativeCeil(mid);\n\n      chars = createPadding('', rightLength, chars);\n      return chars.slice(0, leftLength) + string + chars;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padLeft('abc', 6);\n     * // => '   abc'\n     *\n     * _.padLeft('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padLeft('abc', 3);\n     * // => 'abc'\n     */\n    var padLeft = createPadDir();\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padRight('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padRight('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padRight('abc', 3);\n     * // => 'abc'\n     */\n    var padRight = createPadDir(true);\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,\n     * in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)\n     * of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.\n      // Chrome fails to trim leading <BOM> whitespace characters.\n      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.\n      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      string = trim(string);\n      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=0] The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n) {\n      var result = '';\n      string = baseToString(string);\n      n = +n;\n      if (n < 1 || !string || !nativeIsFinite(n)) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        string += string;\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--foo-bar');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__foo_bar__');\n     * // => 'Foo Bar'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to search.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = baseToString(string);\n      position = position == null\n        ? 0\n        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);\n\n      return string.lastIndexOf(target, position) == position;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is provided it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options] The options object.\n     * @param {RegExp} [options.escape] The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate] The \"evaluate\" delimiter.\n     * @param {Object} [options.imports] An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate] The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.\n     * @param {string} [options.variable] The data object variable name.\n     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // using the \"interpolate\" delimiter to create a compiled template\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // using the HTML \"escape\" delimiter to escape data property values\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // using the \"evaluate\" delimiter to execute JavaScript and generate HTML\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // using the internal `print` function in \"evaluate\" delimiters\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // using the ES delimiter as an alternative to the default \"interpolate\" delimiter\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // using custom template delimiters\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // using backslashes to treat delimiters as plain text\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // using the `imports` option to import `jQuery` as `jq`\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // using the `sourceURL` option to specify a custom sourceURL for the template\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector\n     *\n     * // using the `variable` option to ensure a with-statement isn't used in the compiled template\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // using the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and a stack trace\n     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, otherOptions) {\n      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (otherOptions && isIterateeCall(string, options, otherOptions)) {\n        options = otherOptions = undefined;\n      }\n      string = baseToString(string);\n      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);\n\n      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      var sourceURL = '//# sourceURL=' +\n        ('sourceURL' in options\n          ? options.sourceURL\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products requires returning the `match`\n        // string in order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      var variable = options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      var value = string;\n      string = baseToString(string);\n      if (!string) {\n        return string;\n      }\n      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {\n        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);\n      }\n      chars = (chars + '');\n      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimLeft('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimLeft('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimLeft(string, chars, guard) {\n      var value = string;\n      string = baseToString(string);\n      if (!string) {\n        return string;\n      }\n      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {\n        return string.slice(trimmedLeftIndex(string));\n      }\n      return string.slice(charsLeftIndex(string, (chars + '')));\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimRight('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimRight('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimRight(string, chars, guard) {\n      var value = string;\n      string = baseToString(string);\n      if (!string) {\n        return string;\n      }\n      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {\n        return string.slice(0, trimmedRightIndex(string) + 1);\n      }\n      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object|number} [options] The options object or maximum string length.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.trunc('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.trunc('hi-diddly-ho there, neighborino', 24);\n     * // => 'hi-diddly-ho there, n...'\n     *\n     * _.trunc('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.trunc('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.trunc('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function trunc(string, options, guard) {\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (options != null) {\n        if (isObject(options)) {\n          var separator = 'separator' in options ? options.separator : separator;\n          length = 'length' in options ? (+options.length || 0) : length;\n          omission = 'omission' in options ? baseToString(options.omission) : omission;\n        } else {\n          length = +options || 0;\n        }\n      }\n      string = baseToString(string);\n      if (length >= string.length) {\n        return string;\n      }\n      var end = length - omission.length;\n      if (end < 1) {\n        return omission;\n      }\n      var result = string.slice(0, end);\n      if (separator == null) {\n        return result + omission;\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              newEnd,\n              substring = string.slice(0, end);\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            newEnd = match.index;\n          }\n          result = result.slice(0, newEnd == null ? end : newEnd);\n        }\n      } else if (string.indexOf(separator, end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their\n     * corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional HTML\n     * entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = baseToString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      if (guard && isIterateeCall(string, pattern, guard)) {\n        pattern = undefined;\n      }\n      string = baseToString(string);\n      return string.match(pattern || reWords) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it is invoked.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {Function} func The function to attempt.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // avoid throwing errors for invalid selectors\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = restParam(function(func, args) {\n      try {\n        return func.apply(undefined, args);\n      } catch(e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and arguments of the created function. If `func` is a property name the\n     * created callback returns the property value for a given element. If `func`\n     * is an object the created callback returns `true` for elements that contain\n     * the equivalent object properties, otherwise it returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias iteratee\n     * @category Utility\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // wrap to create custom callback shorthands\n     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {\n     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);\n     *   if (!match) {\n     *     return callback(func, thisArg);\n     *   }\n     *   return function(object) {\n     *     return match[2] == 'gt'\n     *       ? object[match[1]] > match[3]\n     *       : object[match[1]] < match[3];\n     *   };\n     * });\n     *\n     * _.filter(users, 'age__gt36');\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     */\n    function callback(func, thisArg, guard) {\n      if (guard && isIterateeCall(func, thisArg, guard)) {\n        thisArg = undefined;\n      }\n      return isObjectLike(func)\n        ? matches(func)\n        : baseCallback(func, thisArg);\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var object = { 'user': 'fred' };\n     * var getter = _.constant(object);\n     *\n     * getter() === object;\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * This method returns the first argument provided to it.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * _.identity(object) === object;\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that performs a deep comparison between a given object\n     * and `source`, returning `true` if the given object has equivalent property\n     * values, else `false`.\n     *\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by\n     * their own, not inherited, enumerable properties. For comparing a single\n     * own or inherited property value see `_.matchesProperty`.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, _.matches({ 'age': 40, 'active': false }));\n     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, true));\n    }\n\n    /**\n     * Creates a function that compares the property value of `path` on a given\n     * object to `value`.\n     *\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by\n     * their own, not inherited, enumerable properties.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * _.find(users, _.matchesProperty('user', 'fred'));\n     * // => { 'user': 'fred' }\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, true));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` on a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': { 'c': _.constant(2) } } },\n     *   { 'a': { 'b': { 'c': _.constant(1) } } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b.c'));\n     * // => [2, 1]\n     *\n     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');\n     * // => [1, 2]\n     */\n    var method = restParam(function(path, args) {\n      return function(object) {\n        return invokePath(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path on `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = restParam(function(object, args) {\n      return function(path) {\n        return invokePath(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable function properties of a source object to the\n     * destination object. If `object` is a function then methods are added to\n     * its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options] The options object.\n     * @param {boolean} [options.chain=true] Specify whether the functions added\n     *  are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      if (options == null) {\n        var isObj = isObject(source),\n            props = isObj ? keys(source) : undefined,\n            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;\n\n        if (!(methodNames ? methodNames.length : isObj)) {\n          methodNames = false;\n          options = source;\n          source = object;\n          object = this;\n        }\n      }\n      if (!methodNames) {\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = true,\n          index = -1,\n          isFunc = isFunction(object),\n          length = methodNames.length;\n\n      if (options === false) {\n        chain = false;\n      } else if (isObject(options) && 'chain' in options) {\n        chain = options.chain;\n      }\n      while (++index < length) {\n        var methodName = methodNames[index],\n            func = source[methodName];\n\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = (function(func) {\n            return function() {\n              var chainAll = this.__chain__;\n              if (chain || chainAll) {\n                var result = object(this.__wrapped__),\n                    actions = result.__actions__ = arrayCopy(this.__actions__);\n\n                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n                result.__chain__ = chainAll;\n                return result;\n              }\n              return func.apply(object, arrayPush([this.value()], arguments));\n            };\n          }(func));\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      root._ = oldDash;\n      return this;\n    }\n\n    /**\n     * A no-operation function that returns `undefined` regardless of the\n     * arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @example\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * _.noop(object) === undefined;\n     * // => true\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that returns the property value at `path` on a\n     * given object.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': { 'c': 2 } } },\n     *   { 'a': { 'b': { 'c': 1 } } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b.c'));\n     * // => [2, 1]\n     *\n     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the property value at a given path on `object`.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return baseGet(object, toPath(path), path + '');\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. If `end` is not specified it is\n     * set to `start` with `start` then set to `0`. If `end` is less than `start`\n     * a zero-length range is created unless a negative `step` is specified.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the new array of numbers.\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    function range(start, end, step) {\n      if (step && isIterateeCall(start, end, step)) {\n        end = step = undefined;\n      }\n      start = +start || 0;\n      step = step == null ? 1 : (+step || 0);\n\n      if (end == null) {\n        end = start;\n        start = 0;\n      } else {\n        end = +end || 0;\n      }\n      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.\n      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (++index < length) {\n        result[index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * Invokes the iteratee function `n` times, returning an array of the results\n     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with\n     * one argument; (index).\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));\n     * // => [3, 6, 4]\n     *\n     * _.times(3, function(n) {\n     *   mage.castSpell(n);\n     * });\n     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`\n     *\n     * _.times(3, function(n) {\n     *   this.cast(n);\n     * }, mage);\n     * // => also invokes `mage.castSpell(n)` three times\n     */\n    function times(n, iteratee, thisArg) {\n      n = nativeFloor(n);\n\n      // Exit early to avoid a JSC JIT bug in Safari 8\n      // where `Array(0)` is treated as `Array(1)`.\n      if (n < 1 || !nativeIsFinite(n)) {\n        return [];\n      }\n      var index = -1,\n          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));\n\n      iteratee = bindCallback(iteratee, thisArg, 1);\n      while (++index < n) {\n        if (index < MAX_ARRAY_LENGTH) {\n          result[index] = iteratee(index);\n        } else {\n          iteratee(index);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is provided the ID is appended to it.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {string} [prefix] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return baseToString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @category Math\n     * @param {number} augend The first number to add.\n     * @param {number} addend The second number to add.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    function add(augend, addend) {\n      return (+augend || 0) + (+addend || 0);\n    }\n\n    /**\n     * Calculates `n` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @category Math\n     * @param {number} n The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Calculates `n` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @category Math\n     * @param {number} n The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Gets the maximum value of `collection`. If `collection` is empty or falsey\n     * `-Infinity` is returned. If an iteratee function is provided it is invoked\n     * for each value in `collection` to generate the criterion by which the value\n     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three\n     * arguments: (value, index, collection).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Math\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => -Infinity\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * _.max(users, function(chr) {\n     *   return chr.age;\n     * });\n     * // => { 'user': 'fred', 'age': 40 }\n     *\n     * // using the `_.property` callback shorthand\n     * _.max(users, 'age');\n     * // => { 'user': 'fred', 'age': 40 }\n     */\n    var max = createExtremum(gt, NEGATIVE_INFINITY);\n\n    /**\n     * Gets the minimum value of `collection`. If `collection` is empty or falsey\n     * `Infinity` is returned. If an iteratee function is provided it is invoked\n     * for each value in `collection` to generate the criterion by which the value\n     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three\n     * arguments: (value, index, collection).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Math\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => Infinity\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * _.min(users, function(chr) {\n     *   return chr.age;\n     * });\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // using the `_.property` callback shorthand\n     * _.min(users, 'age');\n     * // => { 'user': 'barney', 'age': 36 }\n     */\n    var min = createExtremum(lt, POSITIVE_INFINITY);\n\n    /**\n     * Calculates `n` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @category Math\n     * @param {number} n The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Gets the sum of the values in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @category Math\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 6]);\n     * // => 10\n     *\n     * _.sum({ 'a': 4, 'b': 6 });\n     * // => 10\n     *\n     * var objects = [\n     *   { 'n': 4 },\n     *   { 'n': 6 }\n     * ];\n     *\n     * _.sum(objects, function(object) {\n     *   return object.n;\n     * });\n     * // => 10\n     *\n     * // using the `_.property` callback shorthand\n     * _.sum(objects, 'n');\n     * // => 10\n     */\n    function sum(collection, iteratee, thisArg) {\n      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {\n        iteratee = undefined;\n      }\n      iteratee = getCallback(iteratee, thisArg, 3);\n      return iteratee.length == 1\n        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)\n        : baseSum(collection, iteratee);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    // Add functions to the `Map` cache.\n    MapCache.prototype['delete'] = mapDelete;\n    MapCache.prototype.get = mapGet;\n    MapCache.prototype.has = mapHas;\n    MapCache.prototype.set = mapSet;\n\n    // Add functions to the `Set` cache.\n    SetCache.prototype.push = cachePush;\n\n    // Assign cache to `_.memoize`.\n    memoize.Cache = MapCache;\n\n    // Add functions that return wrapped values when chaining.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.callback = callback;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.functions = functions;\n    lodash.groupBy = groupBy;\n    lodash.indexBy = indexBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.invert = invert;\n    lodash.invoke = invoke;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.modArgs = modArgs;\n    lodash.negate = negate;\n    lodash.omit = omit;\n    lodash.once = once;\n    lodash.pairs = pairs;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pluck = pluck;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.restParam = restParam;\n    lodash.set = set;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortByAll = sortByAll;\n    lodash.sortByOrder = sortByOrder;\n    lodash.spread = spread;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.times = times;\n    lodash.toArray = toArray;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.union = union;\n    lodash.uniq = uniq;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.where = where;\n    lodash.without = without;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.backflow = flowRight;\n    lodash.collect = map;\n    lodash.compose = flowRight;\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.extend = assign;\n    lodash.iteratee = callback;\n    lodash.methods = functions;\n    lodash.object = zipObject;\n    lodash.select = filter;\n    lodash.tail = rest;\n    lodash.unique = uniq;\n\n    // Add functions to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add functions that return unwrapped values when chaining.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.deburr = deburr;\n    lodash.endsWith = endsWith;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.findWhere = findWhere;\n    lodash.first = first;\n    lodash.floor = floor;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isBoolean = isBoolean;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isMatch = isMatch;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isString = isString;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.min = min;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padLeft = padLeft;\n    lodash.padRight = padRight;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.sum = sum;\n    lodash.template = template;\n    lodash.trim = trim;\n    lodash.trimLeft = trimLeft;\n    lodash.trimRight = trimRight;\n    lodash.trunc = trunc;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.words = words;\n\n    // Add aliases.\n    lodash.all = every;\n    lodash.any = some;\n    lodash.contains = includes;\n    lodash.eq = isEqual;\n    lodash.detect = find;\n    lodash.foldl = reduce;\n    lodash.foldr = reduceRight;\n    lodash.head = first;\n    lodash.include = includes;\n    lodash.inject = reduce;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!lodash.prototype[methodName]) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), false);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add functions capable of returning wrapped and unwrapped values when chaining.\n    lodash.sample = sample;\n\n    lodash.prototype.sample = function(n) {\n      if (!this.__chain__ && n == null) {\n        return sample(this.value());\n      }\n      return this.thru(function(value) {\n        return sample(value, n);\n      });\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type string\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        var filtered = this.__filtered__;\n        if (filtered && !index) {\n          return new LazyWrapper(this);\n        }\n        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);\n\n        var result = this.clone();\n        if (filtered) {\n          result.__takeCount__ = nativeMin(result.__takeCount__, n);\n        } else {\n          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type != LAZY_MAP_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {\n        var result = this.clone();\n        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.first` and `_.last`.\n    arrayEach(['first', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.\n    arrayEach(['initial', 'rest'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.\n    arrayEach(['pluck', 'where'], function(methodName, index) {\n      var operationName = index ? 'filter' : 'map',\n          createCallback = index ? baseMatches : property;\n\n      LazyWrapper.prototype[methodName] = function(value) {\n        return this[operationName](createCallback(value));\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.reject = function(predicate, thisArg) {\n      predicate = getCallback(predicate, thisArg, 1);\n      return this.filter(function(value) {\n        return !predicate(value);\n      });\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = start == null ? 0 : (+start || 0);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = (+end || 0);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {\n      return this.reverse().takeWhile(predicate, thisArg).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(POSITIVE_INFINITY);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),\n          retUnwrapped = /^(?:first|last)$/.test(methodName),\n          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var args = retUnwrapped ? [1] : arguments,\n            chainAll = this.__chain__,\n            value = this.__wrapped__,\n            isHybrid = !!this.__actions__.length,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var interceptor = function(value) {\n          return (retUnwrapped && chainAll)\n            ? lodashFunc(value, 1)[0]\n            : lodashFunc.apply(undefined, arrayPush([value], args));\n        };\n\n        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },\n            onlyLazy = isLazy && !isHybrid;\n\n        if (retUnwrapped && !chainAll) {\n          if (onlyLazy) {\n            value = value.clone();\n            value.__actions__.push(action);\n            return func.call(value);\n          }\n          return lodashFunc.call(undefined, this.value())[0];\n        }\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push(action);\n          return new LodashWrapper(result, chainAll);\n        }\n        return this.thru(interceptor);\n      };\n    });\n\n    // Add `Array` and `String` methods to `lodash.prototype`.\n    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {\n      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          return func.apply(this.value(), args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(value, args);\n        });\n      };\n    });\n\n    // Map minified function names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = lodashFunc.name,\n            names = realNames[key] || (realNames[key] = []);\n\n        names.push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];\n\n    // Add functions to the lazy wrapper.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chaining functions to the `lodash` wrapper.\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.concat = wrapperConcat;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toString = wrapperToString;\n    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add function aliases to the `lodash` wrapper.\n    lodash.prototype.collect = lodash.prototype.map;\n    lodash.prototype.head = lodash.prototype.first;\n    lodash.prototype.select = lodash.prototype.filter;\n    lodash.prototype.tail = lodash.prototype.rest;\n\n    return lodash;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers like r.js check for condition patterns like the following:\n  if (true) {\n    // Expose lodash to the global object when an AMD loader is present to avoid\n    // errors in cases where lodash is loaded by a script tag and not intended\n    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for\n    // more details.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n      return _;\n    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n  else if (freeExports && freeModule) {\n    // Export for Node.js or RingoJS.\n    if (moduleExports) {\n      (freeModule.exports = _)._ = _;\n    }\n    // Export for Rhino with CommonJS support.\n    else {\n      freeExports._ = _;\n    }\n  }\n  else {\n    // Export for a browser or Rhino.\n    root._ = _;\n  }\n}.call(this));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(205)(module), (function() { return this; }())))\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash/index.js\n ** module id = 109\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/lodash/index.js?");
},110:function(module,exports,__webpack_require__){eval('var require;(function (root, factory) {\r\n    var factorySource = factory.toString();\r\n\r\n    if (true) {\r\n        module.exports = factory(factorySource);\r\n    } else {\r\n        //Browser globals case. Just assign the\r\n        //result to a property on the global.\r\n        root.Quagga = factory(factorySource);\r\n    }\r\n}(this, function (__factorySource__) {/**\n * @license almond 0.2.9 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/almond for details\n */\n//Going sloppy to avoid \'use strict\' string cost, but strict practices should\n//be followed.\n/*jslint sloppy: true */\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part,\n            baseParts = baseName && baseName.split("/"),\n            map = config.map,\n            starMap = (map && map[\'*\']) || {};\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === ".") {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                //Convert baseName to array, and lop off the last part,\n                //so that . matches that "directory" and not name of the baseName\'s\n                //module. For instance, baseName of "one/two/three", maps to\n                //"one/two/three.js", but we want the directory, "one/two" for\n                //this normalization.\n                baseParts = baseParts.slice(0, baseParts.length - 1);\n                name = name.split(\'/\');\n                lastIndex = name.length - 1;\n\n                // Node .js allowance:\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, \'\');\n                }\n\n                name = baseParts.concat(name);\n\n                //start trimDots\n                for (i = 0; i < name.length; i += 1) {\n                    part = name[i];\n                    if (part === ".") {\n                        name.splice(i, 1);\n                        i -= 1;\n                    } else if (part === "..") {\n                        if (i === 1 && (name[2] === \'..\' || name[0] === \'..\')) {\n                            //End of the line. Keep at least one non-dot\n                            //path segment at the front so it can be mapped\n                            //correctly to disk. Otherwise, there is likely\n                            //no path mapping for a path starting with \'..\'.\n                            //This can still fail, but catches the most reasonable\n                            //uses of ..\n                            break;\n                        } else if (i > 0) {\n                            name.splice(i - 1, 2);\n                            i -= 2;\n                        }\n                    }\n                }\n                //end trimDots\n\n                name = name.join("/");\n            } else if (name.indexOf(\'./\') === 0) {\n                // No baseName, so this is ID is resolved relative\n                // to baseUrl, pull off the leading dot.\n                name = name.substring(2);\n            }\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split(\'/\');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join("/");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join(\'/\')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join(\'/\');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error(\'No \' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf(\'!\') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relName) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relName));\n            } else {\n                name = normalize(name, relName);\n            }\n        } else {\n            name = normalize(name, relName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + \'!\' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== \'undefined\') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: \'\',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === \'undefined\' || callbackType === \'function\') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? [\'require\', \'exports\', \'module\'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relName);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === "require") {\n                    args[i] = handlers.require(name);\n                } else if (depName === "exports") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === "module") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + \' missing \' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via "module" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === "string") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, callback).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require([\'a\'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === \'function\') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers "upgrade" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require(\'id\') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine("almond", function(){});\n\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\'image_loader\',[],function() {\r\n    "use strict";\r\n\r\n    var ImageLoader = {};\r\n    ImageLoader.load = function(directory, callback, offset, size, sequence) {\r\n        var htmlImagesSrcArray = new Array(size),\r\n            htmlImagesArray = new Array(htmlImagesSrcArray.length),\r\n            i,\r\n            img,\r\n            num;\r\n            \r\n        if (sequence === false) {\r\n            htmlImagesSrcArray[0] = directory;\r\n        } else {\r\n            for ( i = 0; i < htmlImagesSrcArray.length; i++) {\r\n                num = (offset + i);\r\n                htmlImagesSrcArray[i] = directory + "image-" + ("00" + num).slice(-3) + ".jpg";\r\n            }\r\n        }\r\n        htmlImagesArray.notLoaded = [];\r\n        htmlImagesArray.addImage = function(img) {\r\n            htmlImagesArray.notLoaded.push(img);\r\n        };\r\n        htmlImagesArray.loaded = function(loadedImg) {\r\n            var notloadedImgs = htmlImagesArray.notLoaded;\r\n            for (var x = 0; x < notloadedImgs.length; x++) {\r\n                if (notloadedImgs[x] == loadedImg) {\r\n                    notloadedImgs.splice(x, 1);\r\n                    for (var y = 0; y < htmlImagesSrcArray.length; y++) {\r\n                        var imgName = htmlImagesSrcArray[y].substr(htmlImagesSrcArray[y].lastIndexOf("/"));\r\n                        if (loadedImg.src.lastIndexOf(imgName) != -1) {\r\n                            htmlImagesArray[y] = loadedImg;\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            if (notloadedImgs.length === 0) {\r\n                console.log("Images loaded");\r\n                callback.apply(null, [htmlImagesArray]);\r\n            }\r\n        };\r\n        \r\n        for ( i = 0; i < htmlImagesSrcArray.length; i++) {\r\n            img = new Image();\r\n            htmlImagesArray.addImage(img);\r\n            addOnloadHandler(img, htmlImagesArray);\r\n            img.src = htmlImagesSrcArray[i];\r\n        }\r\n    };\r\n    \r\n    function addOnloadHandler(img, htmlImagesArray) {\r\n        img.onload = function() {\r\n            htmlImagesArray.loaded(this);\r\n        };\r\n    }\r\n\r\n    return (ImageLoader);\r\n});\r\n\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\'input_stream\',["image_loader"], function(ImageLoader) {\r\n    "use strict";\r\n\r\n    var InputStream = {};\r\n    InputStream.createVideoStream = function(video) {\r\n        var that = {},\r\n            _config = null,\r\n            _eventNames = [\'canrecord\', \'ended\'],\r\n            _eventHandlers = {},\r\n            _calculatedWidth,\r\n            _calculatedHeight,\r\n            _topRight = {x: 0, y: 0},\r\n            _canvasSize = {x: 0, y: 0};\r\n\r\n        function initSize() {\r\n            var width = video.videoWidth,\r\n                height = video.videoHeight;\r\n\r\n            _calculatedWidth = _config.size ? width/height > 1 ? _config.size : Math.floor((width/height) * _config.size) : width;\r\n            _calculatedHeight = _config.size ? width/height > 1 ? Math.floor((height/width) * _config.size) : _config.size : height;\r\n\r\n            _canvasSize.x = _calculatedWidth;\r\n            _canvasSize.y = _calculatedHeight;\r\n        }\r\n\r\n        that.getRealWidth = function() {\r\n            return video.videoWidth;\r\n        };\r\n\r\n        that.getRealHeight = function() {\r\n            return video.videoHeight;\r\n        };\r\n\r\n        that.getWidth = function() {\r\n            return _calculatedWidth;\r\n        };\r\n\r\n        that.getHeight = function() {\r\n            return _calculatedHeight;\r\n        };\r\n\r\n        that.setWidth = function(width) {\r\n            _calculatedWidth = width;\r\n        };\r\n\r\n        that.setHeight = function(height) {\r\n            _calculatedHeight = height;\r\n        };\r\n\r\n        that.setInputStream = function(config) {\r\n            _config = config;\r\n            video.src = (typeof config.src !== \'undefined\') ? config.src : \'\';\r\n        };\r\n\r\n        that.ended = function() {\r\n            return video.ended;\r\n        };\r\n\r\n        that.getConfig = function() {\r\n            return _config;\r\n        };\r\n\r\n        that.setAttribute = function(name, value) {\r\n            video.setAttribute(name, value);\r\n        };\r\n\r\n        that.pause = function() {\r\n            video.pause();\r\n        };\r\n\r\n        that.play = function() {\r\n            video.play();\r\n        };\r\n\r\n        that.setCurrentTime = function(time) {\r\n            if (_config.type !== "LiveStream")\r\n                video.currentTime = time;\r\n        };\r\n\r\n        that.addEventListener = function(event, f, bool) {\r\n            if (_eventNames.indexOf(event) !== -1) {\r\n                if (!_eventHandlers[event]) {\r\n                    _eventHandlers[event] = [];\r\n                }\r\n                _eventHandlers[event].push(f);\r\n            } else {\r\n                video.addEventListener(event, f, bool);\r\n            }\r\n        };\r\n\r\n        that.clearEventHandlers = function() {\r\n            _eventNames.forEach(function(eventName) {\r\n                var handlers = _eventHandlers[eventName];\r\n                if (handlers && handlers.length > 0) {\r\n                    handlers.forEach(function(handler) {\r\n                        video.removeEventListener(eventName, handler);\r\n                    });\r\n                }\r\n            });\r\n        };\r\n\r\n        that.trigger = function(eventName, args) {\r\n            var j,\r\n                handlers = _eventHandlers[eventName];\r\n\r\n            if (eventName === \'canrecord\') {\r\n                initSize();\r\n            }\r\n            if (handlers && handlers.length > 0) {\r\n                for ( j = 0; j < handlers.length; j++) {\r\n                    handlers[j].apply(that, args);\r\n                }\r\n            }\r\n        };\r\n\r\n        that.setTopRight = function(topRight) {\r\n            _topRight.x = topRight.x;\r\n            _topRight.y = topRight.y;\r\n        };\r\n\r\n        that.getTopRight = function() {\r\n            return _topRight;\r\n        };\r\n\r\n        that.setCanvasSize = function(size) {\r\n            _canvasSize.x = size.x;\r\n            _canvasSize.y = size.y;\r\n        };\r\n\r\n        that.getCanvasSize = function() {\r\n            return _canvasSize;\r\n        };\r\n\r\n        that.getFrame = function() {\r\n            return video;\r\n        };\r\n\r\n        return that;\r\n    };\r\n\r\n    InputStream.createLiveStream = function(video) {\r\n        video.setAttribute("autoplay", true);\r\n        var that = InputStream.createVideoStream(video);\r\n\r\n        that.ended = function() {\r\n            return false;\r\n        };\r\n\r\n        return that;\r\n    };\r\n\r\n    InputStream.createImageStream = function() {\r\n        var that = {};\r\n        var _config = null;\r\n\r\n        var width = 0,\r\n            height = 0,\r\n            frameIdx = 0,\r\n            paused = true,\r\n            loaded = false,\r\n            imgArray = null,\r\n            size = 0,\r\n            offset = 1,\r\n            baseUrl = null,\r\n            ended = false,\r\n            calculatedWidth,\r\n            calculatedHeight,\r\n            _eventNames = [\'canrecord\', \'ended\'],\r\n            _eventHandlers = {},\r\n            _topRight = {x: 0, y: 0},\r\n            _canvasSize = {x: 0, y: 0};\r\n\r\n        function loadImages() {\r\n            loaded = false;\r\n            ImageLoader.load(baseUrl, function(imgs) {\r\n                imgArray = imgs;\r\n                width = imgs[0].width;\r\n                height = imgs[0].height;\r\n                calculatedWidth = _config.size ? width/height > 1 ? _config.size : Math.floor((width/height) * _config.size) : width;\r\n                calculatedHeight = _config.size ? width/height > 1 ? Math.floor((height/width) * _config.size) : _config.size : height;\r\n                _canvasSize.x = calculatedWidth;\r\n                _canvasSize.y = calculatedHeight;\r\n                loaded = true;\r\n                frameIdx = 0;\r\n                setTimeout(function() {\r\n                    publishEvent("canrecord", []);\r\n                }, 0);\r\n            }, offset, size, _config.sequence);\r\n        }\r\n\r\n        function publishEvent(eventName, args) {\r\n            var j,\r\n                handlers = _eventHandlers[eventName];\r\n                \r\n            if (handlers && handlers.length > 0) {\r\n                for ( j = 0; j < handlers.length; j++) {\r\n                    handlers[j].apply(that, args);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        that.trigger = publishEvent;\r\n\r\n        that.getWidth = function() {\r\n            return calculatedWidth;\r\n        };\r\n\r\n        that.getHeight = function() {\r\n            return calculatedHeight;\r\n        };\r\n\r\n        that.setWidth = function(width) {\r\n            calculatedWidth = width;\r\n        };\r\n\r\n        that.setHeight = function(height) {\r\n            calculatedHeight = height;\r\n        };\r\n\r\n        that.getRealWidth = function() {\r\n            return width;\r\n        };\r\n\r\n        that.getRealHeight = function() {\r\n            return height;\r\n        };\r\n\r\n        that.setInputStream = function(stream) {\r\n            _config = stream;\r\n            if (stream.sequence === false) {\r\n                baseUrl = stream.src;\r\n                size = 1;\r\n            } else {\r\n                baseUrl = stream.src;\r\n                size = stream.length;\r\n            }\r\n            loadImages();\r\n        };\r\n\r\n        that.ended = function() {\r\n            return ended;\r\n        };\r\n\r\n        that.setAttribute = function() {};\r\n\r\n        that.getConfig = function() {\r\n            return _config;\r\n        };\r\n\r\n        that.pause = function() {\r\n            paused = true;\r\n        };\r\n\r\n        that.play = function() {\r\n            paused = false;\r\n        };\r\n\r\n        that.setCurrentTime = function(time) {\r\n            frameIdx = time;\r\n        };\r\n\r\n        that.addEventListener = function(event, f) {\r\n            if (_eventNames.indexOf(event) !== -1) {\r\n                if (!_eventHandlers[event]) {\r\n                    _eventHandlers[event] = [];\r\n                }\r\n                _eventHandlers[event].push(f);\r\n            }\r\n        };\r\n\r\n        that.setTopRight = function(topRight) {\r\n            _topRight.x = topRight.x;\r\n            _topRight.y = topRight.y;\r\n        };\r\n\r\n        that.getTopRight = function() {\r\n            return _topRight;\r\n        };\r\n\r\n        that.setCanvasSize = function(size) {\r\n            _canvasSize.x = size.x;\r\n            _canvasSize.y = size.y;\r\n        };\r\n\r\n        that.getCanvasSize = function() {\r\n            return _canvasSize;\r\n        };\r\n\r\n        that.getFrame = function() {\r\n            var frame;\r\n            \r\n            if (!loaded){\r\n                return null;\r\n            }\r\n            if (!paused) {\r\n                frame = imgArray[frameIdx];\r\n                if (frameIdx < (size - 1)) {\r\n                    frameIdx++;\r\n                } else {\r\n                    setTimeout(function() {\r\n                        ended = true;\r\n                        publishEvent("ended", []);\r\n                    }, 0);\r\n                }\r\n            }\r\n            return frame;\r\n        };\r\n\r\n        return that;\r\n    };\r\n\r\n    return (InputStream);\r\n});\r\n\n/*\r\n * typedefs.js\r\n * Normalizes browser-specific prefixes\r\n */\r\n\r\nglMatrixArrayType = Float32Array;\r\nif (typeof window !== \'undefined\') {\r\n    window.requestAnimFrame = (function () {\r\n        return window.requestAnimationFrame ||\r\n            window.webkitRequestAnimationFrame ||\r\n            window.mozRequestAnimationFrame ||\r\n            window.oRequestAnimationFrame ||\r\n            window.msRequestAnimationFrame ||\r\n            function (/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {\r\n                window.setTimeout(callback, 1000 / 60);\r\n            };\r\n    })();\r\n\r\n    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\r\n    window.URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\r\n}\r\n\ndefine("typedefs", (function (global) {\n    return function () {\n        var ret, fn;\n        return ret || global.typedefs;\n    };\n}(this)));\n\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\'subImage\',["typedefs"], function() {\r\n    "use strict";\r\n\r\n    /**\r\n     * Construct representing a part of another {ImageWrapper}. Shares data\r\n     * between the parent and the child.\r\n     * @param from {ImageRef} The position where to start the {SubImage} from. (top-left corner)\r\n     * @param size {ImageRef} The size of the resulting image\r\n     * @param I {ImageWrapper} The {ImageWrapper} to share from\r\n     * @returns {SubImage} A shared part of the original image\r\n     */\r\n    function SubImage(from, size, I) {\r\n        if (!I) {\r\n            I = {\r\n                data : null,\r\n                size : size\r\n            };\r\n        }\r\n        this.data = I.data;\r\n        this.originalSize = I.size;\r\n        this.I = I;\r\n\r\n        this.from = from;\r\n        this.size = size;\r\n    }\r\n\r\n    /**\r\n     * Displays the {SubImage} in a given canvas\r\n     * @param canvas {Canvas} The canvas element to write to\r\n     * @param scale {Number} Scale which is applied to each pixel-value\r\n     */\r\n    SubImage.prototype.show = function(canvas, scale) {\r\n        var ctx,\r\n            frame,\r\n            data,\r\n            current,\r\n            y,\r\n            x,\r\n            pixel;\r\n            \r\n        if (!scale) {\r\n            scale = 1.0;\r\n        }\r\n        ctx = canvas.getContext(\'2d\');\r\n        canvas.width = this.size.x;\r\n        canvas.height = this.size.y;\r\n        frame = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        data = frame.data;\r\n        current = 0;\r\n        for (y = 0; y < this.size.y; y++) {\r\n            for (x = 0; x < this.size.x; x++) {\r\n                pixel = y * this.size.x + x;\r\n                current = this.get(x, y) * scale;\r\n                data[pixel * 4 + 0] = current;\r\n                data[pixel * 4 + 1] = current;\r\n                data[pixel * 4 + 2] = current;\r\n                data[pixel * 4 + 3] = 255;\r\n            }\r\n        }\r\n        frame.data = data;\r\n        ctx.putImageData(frame, 0, 0);\r\n    };\r\n\r\n    /**\r\n     * Retrieves a given pixel position from the {SubImage}\r\n     * @param x {Number} The x-position\r\n     * @param y {Number} The y-position\r\n     * @returns {Number} The grayscale value at the pixel-position\r\n     */\r\n    SubImage.prototype.get = function(x, y) {\r\n        return this.data[(this.from.y + y) * this.originalSize.x + this.from.x + x];\r\n    };\r\n\r\n    /**\r\n     * Updates the underlying data from a given {ImageWrapper}\r\n     * @param image {ImageWrapper} The updated image\r\n     */\r\n    SubImage.prototype.updateData = function(image) {\r\n        this.originalSize = image.size;\r\n        this.data = image.data;\r\n    };\r\n\r\n    /**\r\n     * Updates the position of the shared area\r\n     * @param from {x,y} The new location\r\n     * @returns {SubImage} returns {this} for possible chaining\r\n     */\r\n    SubImage.prototype.updateFrom = function(from) {\r\n        this.from = from;\r\n        return this;\r\n    };\r\n    \r\n    return (SubImage);\r\n}); \n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define, vec2 */\r\n\r\ndefine(\'cluster\',[],function() {\r\n    "use strict";\r\n    \r\n    /**\r\n     * Creates a cluster for grouping similar orientations of datapoints \r\n     */\r\n    var Cluster = {\r\n        create : function(point, threshold) {\r\n            var points = [], center = {\r\n                rad : 0,\r\n                vec : vec2.create([0, 0])\r\n            }, pointMap = {};\r\n\r\n            function init() {\r\n                add(point);\r\n                updateCenter();\r\n            }\r\n\r\n            function add(point) {\r\n                pointMap[point.id] = point;\r\n                points.push(point);\r\n            }\r\n\r\n            function updateCenter() {\r\n                var i, sum = 0;\r\n                for ( i = 0; i < points.length; i++) {\r\n                    sum += points[i].rad;\r\n                }\r\n                center.rad = sum / points.length;\r\n                center.vec = vec2.create([Math.cos(center.rad), Math.sin(center.rad)]);\r\n            }\r\n\r\n            init();\r\n\r\n            return {\r\n                add : function(point) {\r\n                    if (!pointMap[point.id]) {\r\n                        add(point);\r\n                        updateCenter();\r\n                    }\r\n                },\r\n                fits : function(point) {\r\n                    // check cosine similarity to center-angle\r\n                    var similarity = Math.abs(vec2.dot(point.point.vec, center.vec));\r\n                    if (similarity > threshold) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                getPoints : function() {\r\n                    return points;\r\n                },\r\n                getCenter : function() {\r\n                    return center;\r\n                }\r\n            };\r\n        },\r\n        createPoint : function(point, id, property) {\r\n            return {\r\n                rad : point[property],\r\n                point : point,\r\n                id : id\r\n            };\r\n        }\r\n    };\r\n\r\n    return (Cluster);\r\n});\r\n\n/* \r\n * glMatrix.js - High performance matrix and vector operations for WebGL\r\n * version 0.9.6\r\n */\r\n \r\n/*\r\n * Copyright (c) 2011 Brandon Jones\r\n *\r\n * This software is provided \'as-is\', without any express or implied\r\n * warranty. In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n *\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n *\r\n *    1. The origin of this software must not be misrepresented; you must not\r\n *    claim that you wrote the original software. If you use this software\r\n *    in a product, an acknowledgment in the product documentation would be\r\n *    appreciated but is not required.\r\n *\r\n *    2. Altered source versions must be plainly marked as such, and must not\r\n *    be misrepresented as being the original software.\r\n *\r\n *    3. This notice may not be removed or altered from any source\r\n *    distribution.\r\n */\r\n\r\n\r\n\r\n/*\r\n * vec3 - 3 Dimensional Vector\r\n */\r\nvar vec3 = {};\r\n\r\n/*\r\n * vec3.create\r\n * Creates a new instance of a vec3 using the default array type\r\n * Any javascript array containing at least 3 numeric elements can serve as a vec3\r\n *\r\n * Params:\r\n * vec - Optional, vec3 containing values to initialize with\r\n *\r\n * Returns:\r\n * New vec3\r\n */\r\nvec3.create = function(vec) {	\r\n	var dest;\r\n	if(vec) {\r\n		dest = new glMatrixArrayType(3);\r\n		dest[0] = vec[0];\r\n		dest[1] = vec[1];\r\n		dest[2] = vec[2];\r\n	} else {\r\n		if(glMatrixArrayType === Array)\r\n			dest = new glMatrixArrayType([0,0,0]);\r\n		else\r\n			dest = new glMatrixArrayType(3);\r\n	}\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * vec3.set\r\n * Copies the values of one vec3 to another\r\n *\r\n * Params:\r\n * vec - vec3 containing values to copy\r\n * dest - vec3 receiving copied values\r\n *\r\n * Returns:\r\n * dest\r\n */\r\nvec3.set = function(vec, dest) {\r\n	dest[0] = vec[0];\r\n	dest[1] = vec[1];\r\n	dest[2] = vec[2];\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * vec3.add\r\n * Performs a vector addition\r\n *\r\n * Params:\r\n * vec - vec3, first operand\r\n * vec2 - vec3, second operand\r\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\r\n *\r\n * Returns:\r\n * dest if specified, vec otherwise\r\n */\r\nvec3.add = function(vec, vec2, dest) {\r\n	if(!dest || vec == dest) {\r\n		vec[0] += vec2[0];\r\n		vec[1] += vec2[1];\r\n		vec[2] += vec2[2];\r\n		return vec;\r\n	}\r\n	\r\n	dest[0] = vec[0] + vec2[0];\r\n	dest[1] = vec[1] + vec2[1];\r\n	dest[2] = vec[2] + vec2[2];\r\n	return dest;\r\n};\r\n\r\n/*\r\n * vec3.subtract\r\n * Performs a vector subtraction\r\n *\r\n * Params:\r\n * vec - vec3, first operand\r\n * vec2 - vec3, second operand\r\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\r\n *\r\n * Returns:\r\n * dest if specified, vec otherwise\r\n */\r\nvec3.subtract = function(vec, vec2, dest) {\r\n	if(!dest || vec == dest) {\r\n		vec[0] -= vec2[0];\r\n		vec[1] -= vec2[1];\r\n		vec[2] -= vec2[2];\r\n		return vec;\r\n	}\r\n	\r\n	dest[0] = vec[0] - vec2[0];\r\n	dest[1] = vec[1] - vec2[1];\r\n	dest[2] = vec[2] - vec2[2];\r\n	return dest;\r\n};\r\n\r\n/*\r\n * vec3.negate\r\n * Negates the components of a vec3\r\n *\r\n * Params:\r\n * vec - vec3 to negate\r\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\r\n *\r\n * Returns:\r\n * dest if specified, vec otherwise\r\n */\r\nvec3.negate = function(vec, dest) {\r\n	if(!dest) { dest = vec; }\r\n	\r\n	dest[0] = -vec[0];\r\n	dest[1] = -vec[1];\r\n	dest[2] = -vec[2];\r\n	return dest;\r\n};\r\n\r\n/*\r\n * vec3.scale\r\n * Multiplies the components of a vec3 by a scalar value\r\n *\r\n * Params:\r\n * vec - vec3 to scale\r\n * val - Numeric value to scale by\r\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\r\n *\r\n * Returns:\r\n * dest if specified, vec otherwise\r\n */\r\nvec3.scale = function(vec, val, dest) {\r\n	if(!dest || vec == dest) {\r\n		vec[0] *= val;\r\n		vec[1] *= val;\r\n		vec[2] *= val;\r\n		return vec;\r\n	}\r\n	\r\n	dest[0] = vec[0]*val;\r\n	dest[1] = vec[1]*val;\r\n	dest[2] = vec[2]*val;\r\n	return dest;\r\n};\r\n\r\n/*\r\n * vec3.normalize\r\n * Generates a unit vector of the same direction as the provided vec3\r\n * If vector length is 0, returns [0, 0, 0]\r\n *\r\n * Params:\r\n * vec - vec3 to normalize\r\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\r\n *\r\n * Returns:\r\n * dest if specified, vec otherwise\r\n */\r\nvec3.normalize = function(vec, dest) {\r\n	if(!dest) { dest = vec; }\r\n	\r\n	var x = vec[0], y = vec[1], z = vec[2];\r\n	var len = Math.sqrt(x*x + y*y + z*z);\r\n	\r\n	if (!len) {\r\n		dest[0] = 0;\r\n		dest[1] = 0;\r\n		dest[2] = 0;\r\n		return dest;\r\n	} else if (len == 1) {\r\n		dest[0] = x;\r\n		dest[1] = y;\r\n		dest[2] = z;\r\n		return dest;\r\n	}\r\n	\r\n	len = 1 / len;\r\n	dest[0] = x*len;\r\n	dest[1] = y*len;\r\n	dest[2] = z*len;\r\n	return dest;\r\n};\r\n\r\n/*\r\n * vec3.cross\r\n * Generates the cross product of two vec3s\r\n *\r\n * Params:\r\n * vec - vec3, first operand\r\n * vec2 - vec3, second operand\r\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\r\n *\r\n * Returns:\r\n * dest if specified, vec otherwise\r\n */\r\nvec3.cross = function(vec, vec2, dest){\r\n	if(!dest) { dest = vec; }\r\n	\r\n	var x = vec[0], y = vec[1], z = vec[2];\r\n	var x2 = vec2[0], y2 = vec2[1], z2 = vec2[2];\r\n	\r\n	dest[0] = y*z2 - z*y2;\r\n	dest[1] = z*x2 - x*z2;\r\n	dest[2] = x*y2 - y*x2;\r\n	return dest;\r\n};\r\n\r\n/*\r\n * vec3.length\r\n * Caclulates the length of a vec3\r\n *\r\n * Params:\r\n * vec - vec3 to calculate length of\r\n *\r\n * Returns:\r\n * Length of vec\r\n */\r\nvec3.length = function(vec){\r\n	var x = vec[0], y = vec[1], z = vec[2];\r\n	return Math.sqrt(x*x + y*y + z*z);\r\n};\r\n\r\n/*\r\n * vec3.dot\r\n * Caclulates the dot product of two vec3s\r\n *\r\n * Params:\r\n * vec - vec3, first operand\r\n * vec2 - vec3, second operand\r\n *\r\n * Returns:\r\n * Dot product of vec and vec2\r\n */\r\nvec3.dot = function(vec, vec2){\r\n	return vec[0]*vec2[0] + vec[1]*vec2[1] + vec[2]*vec2[2];\r\n};\r\n\r\n/*\r\n * vec3.direction\r\n * Generates a unit vector pointing from one vector to another\r\n *\r\n * Params:\r\n * vec - origin vec3\r\n * vec2 - vec3 to point to\r\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\r\n *\r\n * Returns:\r\n * dest if specified, vec otherwise\r\n */\r\nvec3.direction = function(vec, vec2, dest) {\r\n	if(!dest) { dest = vec; }\r\n	\r\n	var x = vec[0] - vec2[0];\r\n	var y = vec[1] - vec2[1];\r\n	var z = vec[2] - vec2[2];\r\n	\r\n	var len = Math.sqrt(x*x + y*y + z*z);\r\n	if (!len) { \r\n		dest[0] = 0; \r\n		dest[1] = 0; \r\n		dest[2] = 0;\r\n		return dest; \r\n	}\r\n	\r\n	len = 1 / len;\r\n	dest[0] = x * len; \r\n	dest[1] = y * len; \r\n	dest[2] = z * len;\r\n	return dest; \r\n};\r\n\r\n/*\r\n * vec3.lerp\r\n * Performs a linear interpolation between two vec3\r\n *\r\n * Params:\r\n * vec - vec3, first vector\r\n * vec2 - vec3, second vector\r\n * lerp - interpolation amount between the two inputs\r\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\r\n *\r\n * Returns:\r\n * dest if specified, vec otherwise\r\n */\r\nvec3.lerp = function(vec, vec2, lerp, dest){\r\n    if(!dest) { dest = vec; }\r\n    \r\n    dest[0] = vec[0] + lerp * (vec2[0] - vec[0]);\r\n    dest[1] = vec[1] + lerp * (vec2[1] - vec[1]);\r\n    dest[2] = vec[2] + lerp * (vec2[2] - vec[2]);\r\n    \r\n    return dest;\r\n};\r\n\r\n/*\r\n * vec3.str\r\n * Returns a string representation of a vector\r\n *\r\n * Params:\r\n * vec - vec3 to represent as a string\r\n *\r\n * Returns:\r\n * string representation of vec\r\n */\r\nvec3.str = function(vec) {\r\n	return \'[\' + vec[0] + \', \' + vec[1] + \', \' + vec[2] + \']\'; \r\n};\r\n\r\n/*\r\n * mat3 - 3x3 Matrix\r\n */\r\nvar mat3 = {};\r\n\r\n/*\r\n * mat3.create\r\n * Creates a new instance of a mat3 using the default array type\r\n * Any javascript array containing at least 9 numeric elements can serve as a mat3\r\n *\r\n * Params:\r\n * mat - Optional, mat3 containing values to initialize with\r\n *\r\n * Returns:\r\n * New mat3\r\n */\r\nmat3.create = function(mat) {\r\n	var dest;\r\n	\r\n	if(mat) {\r\n		dest = new glMatrixArrayType(9);\r\n		dest[0] = mat[0];\r\n		dest[1] = mat[1];\r\n		dest[2] = mat[2];\r\n		dest[3] = mat[3];\r\n		dest[4] = mat[4];\r\n		dest[5] = mat[5];\r\n		dest[6] = mat[6];\r\n		dest[7] = mat[7];\r\n		dest[8] = mat[8];\r\n	} else {\r\n		if(glMatrixArrayType === Array)\r\n			dest = new glMatrixArrayType([0,0,0,0,0,0,0,0,0]);\r\n		else\r\n			dest = new glMatrixArrayType(9);\r\n	}\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat3.set\r\n * Copies the values of one mat3 to another\r\n *\r\n * Params:\r\n * mat - mat3 containing values to copy\r\n * dest - mat3 receiving copied values\r\n *\r\n * Returns:\r\n * dest\r\n */\r\nmat3.set = function(mat, dest) {\r\n	dest[0] = mat[0];\r\n	dest[1] = mat[1];\r\n	dest[2] = mat[2];\r\n	dest[3] = mat[3];\r\n	dest[4] = mat[4];\r\n	dest[5] = mat[5];\r\n	dest[6] = mat[6];\r\n	dest[7] = mat[7];\r\n	dest[8] = mat[8];\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat3.identity\r\n * Sets a mat3 to an identity matrix\r\n *\r\n * Params:\r\n * dest - mat3 to set\r\n *\r\n * Returns:\r\n * dest\r\n */\r\nmat3.identity = function(dest) {\r\n	dest[0] = 1;\r\n	dest[1] = 0;\r\n	dest[2] = 0;\r\n	dest[3] = 0;\r\n	dest[4] = 1;\r\n	dest[5] = 0;\r\n	dest[6] = 0;\r\n	dest[7] = 0;\r\n	dest[8] = 1;\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.transpose\r\n * Transposes a mat3 (flips the values over the diagonal)\r\n *\r\n * Params:\r\n * mat - mat3 to transpose\r\n * dest - Optional, mat3 receiving transposed values. If not specified result is written to mat\r\n *\r\n * Returns:\r\n * dest is specified, mat otherwise\r\n */\r\nmat3.transpose = function(mat, dest) {\r\n	// If we are transposing ourselves we can skip a few steps but have to cache some values\r\n	if(!dest || mat == dest) { \r\n		var a01 = mat[1], a02 = mat[2];\r\n		var a12 = mat[5];\r\n		\r\n        mat[1] = mat[3];\r\n        mat[2] = mat[6];\r\n        mat[3] = a01;\r\n        mat[5] = mat[7];\r\n        mat[6] = a02;\r\n        mat[7] = a12;\r\n		return mat;\r\n	}\r\n	\r\n	dest[0] = mat[0];\r\n	dest[1] = mat[3];\r\n	dest[2] = mat[6];\r\n	dest[3] = mat[1];\r\n	dest[4] = mat[4];\r\n	dest[5] = mat[7];\r\n	dest[6] = mat[2];\r\n	dest[7] = mat[5];\r\n	dest[8] = mat[8];\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat3.toMat4\r\n * Copies the elements of a mat3 into the upper 3x3 elements of a mat4\r\n *\r\n * Params:\r\n * mat - mat3 containing values to copy\r\n * dest - Optional, mat4 receiving copied values\r\n *\r\n * Returns:\r\n * dest if specified, a new mat4 otherwise\r\n */\r\nmat3.toMat4 = function(mat, dest) {\r\n	if(!dest) { dest = mat4.create(); }\r\n	\r\n	dest[0] = mat[0];\r\n	dest[1] = mat[1];\r\n	dest[2] = mat[2];\r\n	dest[3] = 0;\r\n\r\n	dest[4] = mat[3];\r\n	dest[5] = mat[4];\r\n	dest[6] = mat[5];\r\n	dest[7] = 0;\r\n\r\n	dest[8] = mat[6];\r\n	dest[9] = mat[7];\r\n	dest[10] = mat[8];\r\n	dest[11] = 0;\r\n\r\n	dest[12] = 0;\r\n	dest[13] = 0;\r\n	dest[14] = 0;\r\n	dest[15] = 1;\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat3.str\r\n * Returns a string representation of a mat3\r\n *\r\n * Params:\r\n * mat - mat3 to represent as a string\r\n *\r\n * Returns:\r\n * string representation of mat\r\n */\r\nmat3.str = function(mat) {\r\n	return \'[\' + mat[0] + \', \' + mat[1] + \', \' + mat[2] + \r\n		\', \' + mat[3] + \', \'+ mat[4] + \', \' + mat[5] + \r\n		\', \' + mat[6] + \', \' + mat[7] + \', \'+ mat[8] + \']\';\r\n};\r\n\r\n/*\r\n * mat4 - 4x4 Matrix\r\n */\r\nvar mat4 = {};\r\n\r\n/*\r\n * mat4.create\r\n * Creates a new instance of a mat4 using the default array type\r\n * Any javascript array containing at least 16 numeric elements can serve as a mat4\r\n *\r\n * Params:\r\n * mat - Optional, mat4 containing values to initialize with\r\n *\r\n * Returns:\r\n * New mat4\r\n */\r\nmat4.create = function(mat) {\r\n	var dest;\r\n	\r\n	if(mat) {\r\n		dest = new glMatrixArrayType(16);\r\n		dest[0] = mat[0];\r\n		dest[1] = mat[1];\r\n		dest[2] = mat[2];\r\n		dest[3] = mat[3];\r\n		dest[4] = mat[4];\r\n		dest[5] = mat[5];\r\n		dest[6] = mat[6];\r\n		dest[7] = mat[7];\r\n		dest[8] = mat[8];\r\n		dest[9] = mat[9];\r\n		dest[10] = mat[10];\r\n		dest[11] = mat[11];\r\n		dest[12] = mat[12];\r\n		dest[13] = mat[13];\r\n		dest[14] = mat[14];\r\n		dest[15] = mat[15];\r\n	} else {\r\n		if(glMatrixArrayType === Array)\r\n			dest = new glMatrixArrayType([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);\r\n		else\r\n			dest = new glMatrixArrayType(16);\r\n	}\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.set\r\n * Copies the values of one mat4 to another\r\n *\r\n * Params:\r\n * mat - mat4 containing values to copy\r\n * dest - mat4 receiving copied values\r\n *\r\n * Returns:\r\n * dest\r\n */\r\nmat4.set = function(mat, dest) {\r\n	dest[0] = mat[0];\r\n	dest[1] = mat[1];\r\n	dest[2] = mat[2];\r\n	dest[3] = mat[3];\r\n	dest[4] = mat[4];\r\n	dest[5] = mat[5];\r\n	dest[6] = mat[6];\r\n	dest[7] = mat[7];\r\n	dest[8] = mat[8];\r\n	dest[9] = mat[9];\r\n	dest[10] = mat[10];\r\n	dest[11] = mat[11];\r\n	dest[12] = mat[12];\r\n	dest[13] = mat[13];\r\n	dest[14] = mat[14];\r\n	dest[15] = mat[15];\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.identity\r\n * Sets a mat4 to an identity matrix\r\n *\r\n * Params:\r\n * dest - mat4 to set\r\n *\r\n * Returns:\r\n * dest\r\n */\r\nmat4.identity = function(dest) {\r\n	dest[0] = 1;\r\n	dest[1] = 0;\r\n	dest[2] = 0;\r\n	dest[3] = 0;\r\n	dest[4] = 0;\r\n	dest[5] = 1;\r\n	dest[6] = 0;\r\n	dest[7] = 0;\r\n	dest[8] = 0;\r\n	dest[9] = 0;\r\n	dest[10] = 1;\r\n	dest[11] = 0;\r\n	dest[12] = 0;\r\n	dest[13] = 0;\r\n	dest[14] = 0;\r\n	dest[15] = 1;\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.transpose\r\n * Transposes a mat4 (flips the values over the diagonal)\r\n *\r\n * Params:\r\n * mat - mat4 to transpose\r\n * dest - Optional, mat4 receiving transposed values. If not specified result is written to mat\r\n *\r\n * Returns:\r\n * dest is specified, mat otherwise\r\n */\r\nmat4.transpose = function(mat, dest) {\r\n	// If we are transposing ourselves we can skip a few steps but have to cache some values\r\n	if(!dest || mat == dest) { \r\n		var a01 = mat[1], a02 = mat[2], a03 = mat[3];\r\n		var a12 = mat[6], a13 = mat[7];\r\n		var a23 = mat[11];\r\n		\r\n		mat[1] = mat[4];\r\n		mat[2] = mat[8];\r\n		mat[3] = mat[12];\r\n		mat[4] = a01;\r\n		mat[6] = mat[9];\r\n		mat[7] = mat[13];\r\n		mat[8] = a02;\r\n		mat[9] = a12;\r\n		mat[11] = mat[14];\r\n		mat[12] = a03;\r\n		mat[13] = a13;\r\n		mat[14] = a23;\r\n		return mat;\r\n	}\r\n	\r\n	dest[0] = mat[0];\r\n	dest[1] = mat[4];\r\n	dest[2] = mat[8];\r\n	dest[3] = mat[12];\r\n	dest[4] = mat[1];\r\n	dest[5] = mat[5];\r\n	dest[6] = mat[9];\r\n	dest[7] = mat[13];\r\n	dest[8] = mat[2];\r\n	dest[9] = mat[6];\r\n	dest[10] = mat[10];\r\n	dest[11] = mat[14];\r\n	dest[12] = mat[3];\r\n	dest[13] = mat[7];\r\n	dest[14] = mat[11];\r\n	dest[15] = mat[15];\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.determinant\r\n * Calculates the determinant of a mat4\r\n *\r\n * Params:\r\n * mat - mat4 to calculate determinant of\r\n *\r\n * Returns:\r\n * determinant of mat\r\n */\r\nmat4.determinant = function(mat) {\r\n	// Cache the matrix values (makes for huge speed increases!)\r\n	var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];\r\n	var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];\r\n	var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];\r\n	var a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];\r\n\r\n	return	a30*a21*a12*a03 - a20*a31*a12*a03 - a30*a11*a22*a03 + a10*a31*a22*a03 +\r\n			a20*a11*a32*a03 - a10*a21*a32*a03 - a30*a21*a02*a13 + a20*a31*a02*a13 +\r\n			a30*a01*a22*a13 - a00*a31*a22*a13 - a20*a01*a32*a13 + a00*a21*a32*a13 +\r\n			a30*a11*a02*a23 - a10*a31*a02*a23 - a30*a01*a12*a23 + a00*a31*a12*a23 +\r\n			a10*a01*a32*a23 - a00*a11*a32*a23 - a20*a11*a02*a33 + a10*a21*a02*a33 +\r\n			a20*a01*a12*a33 - a00*a21*a12*a33 - a10*a01*a22*a33 + a00*a11*a22*a33;\r\n};\r\n\r\n/*\r\n * mat4.inverse\r\n * Calculates the inverse matrix of a mat4\r\n *\r\n * Params:\r\n * mat - mat4 to calculate inverse of\r\n * dest - Optional, mat4 receiving inverse matrix. If not specified result is written to mat\r\n *\r\n * Returns:\r\n * dest is specified, mat otherwise\r\n */\r\nmat4.inverse = function(mat, dest) {\r\n	if(!dest) { dest = mat; }\r\n	\r\n	// Cache the matrix values (makes for huge speed increases!)\r\n	var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];\r\n	var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];\r\n	var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];\r\n	var a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];\r\n	\r\n	var b00 = a00*a11 - a01*a10;\r\n	var b01 = a00*a12 - a02*a10;\r\n	var b02 = a00*a13 - a03*a10;\r\n	var b03 = a01*a12 - a02*a11;\r\n	var b04 = a01*a13 - a03*a11;\r\n	var b05 = a02*a13 - a03*a12;\r\n	var b06 = a20*a31 - a21*a30;\r\n	var b07 = a20*a32 - a22*a30;\r\n	var b08 = a20*a33 - a23*a30;\r\n	var b09 = a21*a32 - a22*a31;\r\n	var b10 = a21*a33 - a23*a31;\r\n	var b11 = a22*a33 - a23*a32;\r\n	\r\n	// Calculate the determinant (inlined to avoid double-caching)\r\n	var invDet = 1/(b00*b11 - b01*b10 + b02*b09 + b03*b08 - b04*b07 + b05*b06);\r\n	\r\n	dest[0] = (a11*b11 - a12*b10 + a13*b09)*invDet;\r\n	dest[1] = (-a01*b11 + a02*b10 - a03*b09)*invDet;\r\n	dest[2] = (a31*b05 - a32*b04 + a33*b03)*invDet;\r\n	dest[3] = (-a21*b05 + a22*b04 - a23*b03)*invDet;\r\n	dest[4] = (-a10*b11 + a12*b08 - a13*b07)*invDet;\r\n	dest[5] = (a00*b11 - a02*b08 + a03*b07)*invDet;\r\n	dest[6] = (-a30*b05 + a32*b02 - a33*b01)*invDet;\r\n	dest[7] = (a20*b05 - a22*b02 + a23*b01)*invDet;\r\n	dest[8] = (a10*b10 - a11*b08 + a13*b06)*invDet;\r\n	dest[9] = (-a00*b10 + a01*b08 - a03*b06)*invDet;\r\n	dest[10] = (a30*b04 - a31*b02 + a33*b00)*invDet;\r\n	dest[11] = (-a20*b04 + a21*b02 - a23*b00)*invDet;\r\n	dest[12] = (-a10*b09 + a11*b07 - a12*b06)*invDet;\r\n	dest[13] = (a00*b09 - a01*b07 + a02*b06)*invDet;\r\n	dest[14] = (-a30*b03 + a31*b01 - a32*b00)*invDet;\r\n	dest[15] = (a20*b03 - a21*b01 + a22*b00)*invDet;\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.toRotationMat\r\n * Copies the upper 3x3 elements of a mat4 into another mat4\r\n *\r\n * Params:\r\n * mat - mat4 containing values to copy\r\n * dest - Optional, mat4 receiving copied values\r\n *\r\n * Returns:\r\n * dest is specified, a new mat4 otherwise\r\n */\r\nmat4.toRotationMat = function(mat, dest) {\r\n	if(!dest) { dest = mat4.create(); }\r\n	\r\n	dest[0] = mat[0];\r\n	dest[1] = mat[1];\r\n	dest[2] = mat[2];\r\n	dest[3] = mat[3];\r\n	dest[4] = mat[4];\r\n	dest[5] = mat[5];\r\n	dest[6] = mat[6];\r\n	dest[7] = mat[7];\r\n	dest[8] = mat[8];\r\n	dest[9] = mat[9];\r\n	dest[10] = mat[10];\r\n	dest[11] = mat[11];\r\n	dest[12] = 0;\r\n	dest[13] = 0;\r\n	dest[14] = 0;\r\n	dest[15] = 1;\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.toMat3\r\n * Copies the upper 3x3 elements of a mat4 into a mat3\r\n *\r\n * Params:\r\n * mat - mat4 containing values to copy\r\n * dest - Optional, mat3 receiving copied values\r\n *\r\n * Returns:\r\n * dest is specified, a new mat3 otherwise\r\n */\r\nmat4.toMat3 = function(mat, dest) {\r\n	if(!dest) { dest = mat3.create(); }\r\n	\r\n	dest[0] = mat[0];\r\n	dest[1] = mat[1];\r\n	dest[2] = mat[2];\r\n	dest[3] = mat[4];\r\n	dest[4] = mat[5];\r\n	dest[5] = mat[6];\r\n	dest[6] = mat[8];\r\n	dest[7] = mat[9];\r\n	dest[8] = mat[10];\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.toInverseMat3\r\n * Calculates the inverse of the upper 3x3 elements of a mat4 and copies the result into a mat3\r\n * The resulting matrix is useful for calculating transformed normals\r\n *\r\n * Params:\r\n * mat - mat4 containing values to invert and copy\r\n * dest - Optional, mat3 receiving values\r\n *\r\n * Returns:\r\n * dest is specified, a new mat3 otherwise\r\n */\r\nmat4.toInverseMat3 = function(mat, dest) {\r\n	// Cache the matrix values (makes for huge speed increases!)\r\n	var a00 = mat[0], a01 = mat[1], a02 = mat[2];\r\n	var a10 = mat[4], a11 = mat[5], a12 = mat[6];\r\n	var a20 = mat[8], a21 = mat[9], a22 = mat[10];\r\n	\r\n	var b01 = a22*a11-a12*a21;\r\n	var b11 = -a22*a10+a12*a20;\r\n	var b21 = a21*a10-a11*a20;\r\n		\r\n	var d = a00*b01 + a01*b11 + a02*b21;\r\n	if (!d) { return null; }\r\n	var id = 1/d;\r\n	\r\n	if(!dest) { dest = mat3.create(); }\r\n	\r\n	dest[0] = b01*id;\r\n	dest[1] = (-a22*a01 + a02*a21)*id;\r\n	dest[2] = (a12*a01 - a02*a11)*id;\r\n	dest[3] = b11*id;\r\n	dest[4] = (a22*a00 - a02*a20)*id;\r\n	dest[5] = (-a12*a00 + a02*a10)*id;\r\n	dest[6] = b21*id;\r\n	dest[7] = (-a21*a00 + a01*a20)*id;\r\n	dest[8] = (a11*a00 - a01*a10)*id;\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.multiply\r\n * Performs a matrix multiplication\r\n *\r\n * Params:\r\n * mat - mat4, first operand\r\n * mat2 - mat4, second operand\r\n * dest - Optional, mat4 receiving operation result. If not specified result is written to mat\r\n *\r\n * Returns:\r\n * dest if specified, mat otherwise\r\n */\r\nmat4.multiply = function(mat, mat2, dest) {\r\n	if(!dest) { dest = mat; }\r\n	\r\n	// Cache the matrix values (makes for huge speed increases!)\r\n	var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];\r\n	var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];\r\n	var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];\r\n	var a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];\r\n	\r\n	var b00 = mat2[0], b01 = mat2[1], b02 = mat2[2], b03 = mat2[3];\r\n	var b10 = mat2[4], b11 = mat2[5], b12 = mat2[6], b13 = mat2[7];\r\n	var b20 = mat2[8], b21 = mat2[9], b22 = mat2[10], b23 = mat2[11];\r\n	var b30 = mat2[12], b31 = mat2[13], b32 = mat2[14], b33 = mat2[15];\r\n	\r\n	dest[0] = b00*a00 + b01*a10 + b02*a20 + b03*a30;\r\n	dest[1] = b00*a01 + b01*a11 + b02*a21 + b03*a31;\r\n	dest[2] = b00*a02 + b01*a12 + b02*a22 + b03*a32;\r\n	dest[3] = b00*a03 + b01*a13 + b02*a23 + b03*a33;\r\n	dest[4] = b10*a00 + b11*a10 + b12*a20 + b13*a30;\r\n	dest[5] = b10*a01 + b11*a11 + b12*a21 + b13*a31;\r\n	dest[6] = b10*a02 + b11*a12 + b12*a22 + b13*a32;\r\n	dest[7] = b10*a03 + b11*a13 + b12*a23 + b13*a33;\r\n	dest[8] = b20*a00 + b21*a10 + b22*a20 + b23*a30;\r\n	dest[9] = b20*a01 + b21*a11 + b22*a21 + b23*a31;\r\n	dest[10] = b20*a02 + b21*a12 + b22*a22 + b23*a32;\r\n	dest[11] = b20*a03 + b21*a13 + b22*a23 + b23*a33;\r\n	dest[12] = b30*a00 + b31*a10 + b32*a20 + b33*a30;\r\n	dest[13] = b30*a01 + b31*a11 + b32*a21 + b33*a31;\r\n	dest[14] = b30*a02 + b31*a12 + b32*a22 + b33*a32;\r\n	dest[15] = b30*a03 + b31*a13 + b32*a23 + b33*a33;\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.multiplyVec3\r\n * Transforms a vec3 with the given matrix\r\n * 4th vector component is implicitly \'1\'\r\n *\r\n * Params:\r\n * mat - mat4 to transform the vector with\r\n * vec - vec3 to transform\r\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\r\n *\r\n * Returns:\r\n * dest if specified, vec otherwise\r\n */\r\nmat4.multiplyVec3 = function(mat, vec, dest) {\r\n	if(!dest) { dest = vec; }\r\n	\r\n	var x = vec[0], y = vec[1], z = vec[2];\r\n	\r\n	dest[0] = mat[0]*x + mat[4]*y + mat[8]*z + mat[12];\r\n	dest[1] = mat[1]*x + mat[5]*y + mat[9]*z + mat[13];\r\n	dest[2] = mat[2]*x + mat[6]*y + mat[10]*z + mat[14];\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.multiplyVec4\r\n * Transforms a vec4 with the given matrix\r\n *\r\n * Params:\r\n * mat - mat4 to transform the vector with\r\n * vec - vec4 to transform\r\n * dest - Optional, vec4 receiving operation result. If not specified result is written to vec\r\n *\r\n * Returns:\r\n * dest if specified, vec otherwise\r\n */\r\nmat4.multiplyVec4 = function(mat, vec, dest) {\r\n	if(!dest) { dest = vec; }\r\n	\r\n	var x = vec[0], y = vec[1], z = vec[2], w = vec[3];\r\n	\r\n	dest[0] = mat[0]*x + mat[4]*y + mat[8]*z + mat[12]*w;\r\n	dest[1] = mat[1]*x + mat[5]*y + mat[9]*z + mat[13]*w;\r\n	dest[2] = mat[2]*x + mat[6]*y + mat[10]*z + mat[14]*w;\r\n	dest[3] = mat[3]*x + mat[7]*y + mat[11]*z + mat[15]*w;\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.translate\r\n * Translates a matrix by the given vector\r\n *\r\n * Params:\r\n * mat - mat4 to translate\r\n * vec - vec3 specifying the translation\r\n * dest - Optional, mat4 receiving operation result. If not specified result is written to mat\r\n *\r\n * Returns:\r\n * dest if specified, mat otherwise\r\n */\r\nmat4.translate = function(mat, vec, dest) {\r\n	var x = vec[0], y = vec[1], z = vec[2];\r\n	\r\n	if(!dest || mat == dest) {\r\n		mat[12] = mat[0]*x + mat[4]*y + mat[8]*z + mat[12];\r\n		mat[13] = mat[1]*x + mat[5]*y + mat[9]*z + mat[13];\r\n		mat[14] = mat[2]*x + mat[6]*y + mat[10]*z + mat[14];\r\n		mat[15] = mat[3]*x + mat[7]*y + mat[11]*z + mat[15];\r\n		return mat;\r\n	}\r\n	\r\n	var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];\r\n	var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];\r\n	var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];\r\n	\r\n	dest[0] = a00;\r\n	dest[1] = a01;\r\n	dest[2] = a02;\r\n	dest[3] = a03;\r\n	dest[4] = a10;\r\n	dest[5] = a11;\r\n	dest[6] = a12;\r\n	dest[7] = a13;\r\n	dest[8] = a20;\r\n	dest[9] = a21;\r\n	dest[10] = a22;\r\n	dest[11] = a23;\r\n	\r\n	dest[12] = a00*x + a10*y + a20*z + mat[12];\r\n	dest[13] = a01*x + a11*y + a21*z + mat[13];\r\n	dest[14] = a02*x + a12*y + a22*z + mat[14];\r\n	dest[15] = a03*x + a13*y + a23*z + mat[15];\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.scale\r\n * Scales a matrix by the given vector\r\n *\r\n * Params:\r\n * mat - mat4 to scale\r\n * vec - vec3 specifying the scale for each axis\r\n * dest - Optional, mat4 receiving operation result. If not specified result is written to mat\r\n *\r\n * Returns:\r\n * dest if specified, mat otherwise\r\n */\r\nmat4.scale = function(mat, vec, dest) {\r\n	var x = vec[0], y = vec[1], z = vec[2];\r\n	\r\n	if(!dest || mat == dest) {\r\n		mat[0] *= x;\r\n		mat[1] *= x;\r\n		mat[2] *= x;\r\n		mat[3] *= x;\r\n		mat[4] *= y;\r\n		mat[5] *= y;\r\n		mat[6] *= y;\r\n		mat[7] *= y;\r\n		mat[8] *= z;\r\n		mat[9] *= z;\r\n		mat[10] *= z;\r\n		mat[11] *= z;\r\n		return mat;\r\n	}\r\n	\r\n	dest[0] = mat[0]*x;\r\n	dest[1] = mat[1]*x;\r\n	dest[2] = mat[2]*x;\r\n	dest[3] = mat[3]*x;\r\n	dest[4] = mat[4]*y;\r\n	dest[5] = mat[5]*y;\r\n	dest[6] = mat[6]*y;\r\n	dest[7] = mat[7]*y;\r\n	dest[8] = mat[8]*z;\r\n	dest[9] = mat[9]*z;\r\n	dest[10] = mat[10]*z;\r\n	dest[11] = mat[11]*z;\r\n	dest[12] = mat[12];\r\n	dest[13] = mat[13];\r\n	dest[14] = mat[14];\r\n	dest[15] = mat[15];\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.rotate\r\n * Rotates a matrix by the given angle around the specified axis\r\n * If rotating around a primary axis (X,Y,Z) one of the specialized rotation functions should be used instead for performance\r\n *\r\n * Params:\r\n * mat - mat4 to rotate\r\n * angle - angle (in radians) to rotate\r\n * axis - vec3 representing the axis to rotate around \r\n * dest - Optional, mat4 receiving operation result. If not specified result is written to mat\r\n *\r\n * Returns:\r\n * dest if specified, mat otherwise\r\n */\r\nmat4.rotate = function(mat, angle, axis, dest) {\r\n	var x = axis[0], y = axis[1], z = axis[2];\r\n	var len = Math.sqrt(x*x + y*y + z*z);\r\n	if (!len) { return null; }\r\n	if (len != 1) {\r\n		len = 1 / len;\r\n		x *= len; \r\n		y *= len; \r\n		z *= len;\r\n	}\r\n	\r\n	var s = Math.sin(angle);\r\n	var c = Math.cos(angle);\r\n	var t = 1-c;\r\n	\r\n	// Cache the matrix values (makes for huge speed increases!)\r\n	var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];\r\n	var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];\r\n	var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];\r\n	\r\n	// Construct the elements of the rotation matrix\r\n	var b00 = x*x*t + c, b01 = y*x*t + z*s, b02 = z*x*t - y*s;\r\n	var b10 = x*y*t - z*s, b11 = y*y*t + c, b12 = z*y*t + x*s;\r\n	var b20 = x*z*t + y*s, b21 = y*z*t - x*s, b22 = z*z*t + c;\r\n	\r\n	if(!dest) { \r\n		dest = mat; \r\n	} else if(mat != dest) { // If the source and destination differ, copy the unchanged last row\r\n		dest[12] = mat[12];\r\n		dest[13] = mat[13];\r\n		dest[14] = mat[14];\r\n		dest[15] = mat[15];\r\n	}\r\n	\r\n	// Perform rotation-specific matrix multiplication\r\n	dest[0] = a00*b00 + a10*b01 + a20*b02;\r\n	dest[1] = a01*b00 + a11*b01 + a21*b02;\r\n	dest[2] = a02*b00 + a12*b01 + a22*b02;\r\n	dest[3] = a03*b00 + a13*b01 + a23*b02;\r\n	\r\n	dest[4] = a00*b10 + a10*b11 + a20*b12;\r\n	dest[5] = a01*b10 + a11*b11 + a21*b12;\r\n	dest[6] = a02*b10 + a12*b11 + a22*b12;\r\n	dest[7] = a03*b10 + a13*b11 + a23*b12;\r\n	\r\n	dest[8] = a00*b20 + a10*b21 + a20*b22;\r\n	dest[9] = a01*b20 + a11*b21 + a21*b22;\r\n	dest[10] = a02*b20 + a12*b21 + a22*b22;\r\n	dest[11] = a03*b20 + a13*b21 + a23*b22;\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.rotateX\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * Params:\r\n * mat - mat4 to rotate\r\n * angle - angle (in radians) to rotate\r\n * dest - Optional, mat4 receiving operation result. If not specified result is written to mat\r\n *\r\n * Returns:\r\n * dest if specified, mat otherwise\r\n */\r\nmat4.rotateX = function(mat, angle, dest) {\r\n	var s = Math.sin(angle);\r\n	var c = Math.cos(angle);\r\n	\r\n	// Cache the matrix values (makes for huge speed increases!)\r\n	var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];\r\n	var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];\r\n\r\n	if(!dest) { \r\n		dest = mat; \r\n	} else if(mat != dest) { // If the source and destination differ, copy the unchanged rows\r\n		dest[0] = mat[0];\r\n		dest[1] = mat[1];\r\n		dest[2] = mat[2];\r\n		dest[3] = mat[3];\r\n		\r\n		dest[12] = mat[12];\r\n		dest[13] = mat[13];\r\n		dest[14] = mat[14];\r\n		dest[15] = mat[15];\r\n	}\r\n	\r\n	// Perform axis-specific matrix multiplication\r\n	dest[4] = a10*c + a20*s;\r\n	dest[5] = a11*c + a21*s;\r\n	dest[6] = a12*c + a22*s;\r\n	dest[7] = a13*c + a23*s;\r\n	\r\n	dest[8] = a10*-s + a20*c;\r\n	dest[9] = a11*-s + a21*c;\r\n	dest[10] = a12*-s + a22*c;\r\n	dest[11] = a13*-s + a23*c;\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.rotateY\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * Params:\r\n * mat - mat4 to rotate\r\n * angle - angle (in radians) to rotate\r\n * dest - Optional, mat4 receiving operation result. If not specified result is written to mat\r\n *\r\n * Returns:\r\n * dest if specified, mat otherwise\r\n */\r\nmat4.rotateY = function(mat, angle, dest) {\r\n	var s = Math.sin(angle);\r\n	var c = Math.cos(angle);\r\n	\r\n	// Cache the matrix values (makes for huge speed increases!)\r\n	var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];\r\n	var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];\r\n	\r\n	if(!dest) { \r\n		dest = mat; \r\n	} else if(mat != dest) { // If the source and destination differ, copy the unchanged rows\r\n		dest[4] = mat[4];\r\n		dest[5] = mat[5];\r\n		dest[6] = mat[6];\r\n		dest[7] = mat[7];\r\n		\r\n		dest[12] = mat[12];\r\n		dest[13] = mat[13];\r\n		dest[14] = mat[14];\r\n		dest[15] = mat[15];\r\n	}\r\n	\r\n	// Perform axis-specific matrix multiplication\r\n	dest[0] = a00*c + a20*-s;\r\n	dest[1] = a01*c + a21*-s;\r\n	dest[2] = a02*c + a22*-s;\r\n	dest[3] = a03*c + a23*-s;\r\n	\r\n	dest[8] = a00*s + a20*c;\r\n	dest[9] = a01*s + a21*c;\r\n	dest[10] = a02*s + a22*c;\r\n	dest[11] = a03*s + a23*c;\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.rotateZ\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * Params:\r\n * mat - mat4 to rotate\r\n * angle - angle (in radians) to rotate\r\n * dest - Optional, mat4 receiving operation result. If not specified result is written to mat\r\n *\r\n * Returns:\r\n * dest if specified, mat otherwise\r\n */\r\nmat4.rotateZ = function(mat, angle, dest) {\r\n	var s = Math.sin(angle);\r\n	var c = Math.cos(angle);\r\n	\r\n	// Cache the matrix values (makes for huge speed increases!)\r\n	var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];\r\n	var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];\r\n	\r\n	if(!dest) { \r\n		dest = mat; \r\n	} else if(mat != dest) { // If the source and destination differ, copy the unchanged last row\r\n		dest[8] = mat[8];\r\n		dest[9] = mat[9];\r\n		dest[10] = mat[10];\r\n		dest[11] = mat[11];\r\n		\r\n		dest[12] = mat[12];\r\n		dest[13] = mat[13];\r\n		dest[14] = mat[14];\r\n		dest[15] = mat[15];\r\n	}\r\n	\r\n	// Perform axis-specific matrix multiplication\r\n	dest[0] = a00*c + a10*s;\r\n	dest[1] = a01*c + a11*s;\r\n	dest[2] = a02*c + a12*s;\r\n	dest[3] = a03*c + a13*s;\r\n	\r\n	dest[4] = a00*-s + a10*c;\r\n	dest[5] = a01*-s + a11*c;\r\n	dest[6] = a02*-s + a12*c;\r\n	dest[7] = a03*-s + a13*c;\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.frustum\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * Params:\r\n * left, right - scalar, left and right bounds of the frustum\r\n * bottom, top - scalar, bottom and top bounds of the frustum\r\n * near, far - scalar, near and far bounds of the frustum\r\n * dest - Optional, mat4 frustum matrix will be written into\r\n *\r\n * Returns:\r\n * dest if specified, a new mat4 otherwise\r\n */\r\nmat4.frustum = function(left, right, bottom, top, near, far, dest) {\r\n	if(!dest) { dest = mat4.create(); }\r\n	var rl = (right - left);\r\n	var tb = (top - bottom);\r\n	var fn = (far - near);\r\n	dest[0] = (near*2) / rl;\r\n	dest[1] = 0;\r\n	dest[2] = 0;\r\n	dest[3] = 0;\r\n	dest[4] = 0;\r\n	dest[5] = (near*2) / tb;\r\n	dest[6] = 0;\r\n	dest[7] = 0;\r\n	dest[8] = (right + left) / rl;\r\n	dest[9] = (top + bottom) / tb;\r\n	dest[10] = -(far + near) / fn;\r\n	dest[11] = -1;\r\n	dest[12] = 0;\r\n	dest[13] = 0;\r\n	dest[14] = -(far*near*2) / fn;\r\n	dest[15] = 0;\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.perspective\r\n * Generates a perspective projection matrix with the given bounds\r\n *\r\n * Params:\r\n * fovy - scalar, vertical field of view\r\n * aspect - scalar, aspect ratio. typically viewport width/height\r\n * near, far - scalar, near and far bounds of the frustum\r\n * dest - Optional, mat4 frustum matrix will be written into\r\n *\r\n * Returns:\r\n * dest if specified, a new mat4 otherwise\r\n */\r\nmat4.perspective = function(fovy, aspect, near, far, dest) {\r\n	var top = near*Math.tan(fovy*Math.PI / 360.0);\r\n	var right = top*aspect;\r\n	return mat4.frustum(-right, right, -top, top, near, far, dest);\r\n};\r\n\r\n/*\r\n * mat4.ortho\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * Params:\r\n * left, right - scalar, left and right bounds of the frustum\r\n * bottom, top - scalar, bottom and top bounds of the frustum\r\n * near, far - scalar, near and far bounds of the frustum\r\n * dest - Optional, mat4 frustum matrix will be written into\r\n *\r\n * Returns:\r\n * dest if specified, a new mat4 otherwise\r\n */\r\nmat4.ortho = function(left, right, bottom, top, near, far, dest) {\r\n	if(!dest) { dest = mat4.create(); }\r\n	var rl = (right - left);\r\n	var tb = (top - bottom);\r\n	var fn = (far - near);\r\n	dest[0] = 2 / rl;\r\n	dest[1] = 0;\r\n	dest[2] = 0;\r\n	dest[3] = 0;\r\n	dest[4] = 0;\r\n	dest[5] = 2 / tb;\r\n	dest[6] = 0;\r\n	dest[7] = 0;\r\n	dest[8] = 0;\r\n	dest[9] = 0;\r\n	dest[10] = -2 / fn;\r\n	dest[11] = 0;\r\n	dest[12] = -(left + right) / rl;\r\n	dest[13] = -(top + bottom) / tb;\r\n	dest[14] = -(far + near) / fn;\r\n	dest[15] = 1;\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.ortho\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis\r\n *\r\n * Params:\r\n * eye - vec3, position of the viewer\r\n * center - vec3, point the viewer is looking at\r\n * up - vec3 pointing "up"\r\n * dest - Optional, mat4 frustum matrix will be written into\r\n *\r\n * Returns:\r\n * dest if specified, a new mat4 otherwise\r\n */\r\nmat4.lookAt = function(eye, center, up, dest) {\r\n	if(!dest) { dest = mat4.create(); }\r\n	\r\n	var eyex = eye[0],\r\n		eyey = eye[1],\r\n		eyez = eye[2],\r\n		upx = up[0],\r\n		upy = up[1],\r\n		upz = up[2],\r\n		centerx = center[0],\r\n		centery = center[1],\r\n		centerz = center[2];\r\n\r\n	if (eyex == centerx && eyey == centery && eyez == centerz) {\r\n		return mat4.identity(dest);\r\n	}\r\n	\r\n	var z0,z1,z2,x0,x1,x2,y0,y1,y2,len;\r\n	\r\n	//vec3.direction(eye, center, z);\r\n	z0 = eyex - center[0];\r\n	z1 = eyey - center[1];\r\n	z2 = eyez - center[2];\r\n	\r\n	// normalize (no check needed for 0 because of early return)\r\n	len = 1/Math.sqrt(z0*z0 + z1*z1 + z2*z2);\r\n	z0 *= len;\r\n	z1 *= len;\r\n	z2 *= len;\r\n	\r\n	//vec3.normalize(vec3.cross(up, z, x));\r\n	x0 = upy*z2 - upz*z1;\r\n	x1 = upz*z0 - upx*z2;\r\n	x2 = upx*z1 - upy*z0;\r\n	len = Math.sqrt(x0*x0 + x1*x1 + x2*x2);\r\n	if (!len) {\r\n		x0 = 0;\r\n		x1 = 0;\r\n		x2 = 0;\r\n	} else {\r\n		len = 1/len;\r\n		x0 *= len;\r\n		x1 *= len;\r\n		x2 *= len;\r\n	};\r\n	\r\n	//vec3.normalize(vec3.cross(z, x, y));\r\n	y0 = z1*x2 - z2*x1;\r\n	y1 = z2*x0 - z0*x2;\r\n	y2 = z0*x1 - z1*x0;\r\n	\r\n	len = Math.sqrt(y0*y0 + y1*y1 + y2*y2);\r\n	if (!len) {\r\n		y0 = 0;\r\n		y1 = 0;\r\n		y2 = 0;\r\n	} else {\r\n		len = 1/len;\r\n		y0 *= len;\r\n		y1 *= len;\r\n		y2 *= len;\r\n	}\r\n	\r\n	dest[0] = x0;\r\n	dest[1] = y0;\r\n	dest[2] = z0;\r\n	dest[3] = 0;\r\n	dest[4] = x1;\r\n	dest[5] = y1;\r\n	dest[6] = z1;\r\n	dest[7] = 0;\r\n	dest[8] = x2;\r\n	dest[9] = y2;\r\n	dest[10] = z2;\r\n	dest[11] = 0;\r\n	dest[12] = -(x0*eyex + x1*eyey + x2*eyez);\r\n	dest[13] = -(y0*eyex + y1*eyey + y2*eyez);\r\n	dest[14] = -(z0*eyex + z1*eyey + z2*eyez);\r\n	dest[15] = 1;\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * mat4.str\r\n * Returns a string representation of a mat4\r\n *\r\n * Params:\r\n * mat - mat4 to represent as a string\r\n *\r\n * Returns:\r\n * string representation of mat\r\n */\r\nmat4.str = function(mat) {\r\n	return \'[\' + mat[0] + \', \' + mat[1] + \', \' + mat[2] + \', \' + mat[3] + \r\n		\',\\n \'+ mat[4] + \', \' + mat[5] + \', \' + mat[6] + \', \' + mat[7] + \r\n		\',\\n \'+ mat[8] + \', \' + mat[9] + \', \' + mat[10] + \', \' + mat[11] + \r\n		\',\\n \'+ mat[12] + \', \' + mat[13] + \', \' + mat[14] + \', \' + mat[15] + \']\';\r\n};\r\n\r\n/*\r\n * quat4 - Quaternions \r\n */\r\nquat4 = {};\r\n\r\n/*\r\n * quat4.create\r\n * Creates a new instance of a quat4 using the default array type\r\n * Any javascript array containing at least 4 numeric elements can serve as a quat4\r\n *\r\n * Params:\r\n * quat - Optional, quat4 containing values to initialize with\r\n *\r\n * Returns:\r\n * New quat4\r\n */\r\nquat4.create = function(quat) {\r\n	var dest;\r\n	\r\n	if(quat) {\r\n		dest = new glMatrixArrayType(4);\r\n		dest[0] = quat[0];\r\n		dest[1] = quat[1];\r\n		dest[2] = quat[2];\r\n		dest[3] = quat[3];\r\n	} else {\r\n		if(glMatrixArrayType === Array)\r\n			dest = new glMatrixArrayType([0,0,0,0]);\r\n		else\r\n			dest = new glMatrixArrayType(4);\r\n	}\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * quat4.set\r\n * Copies the values of one quat4 to another\r\n *\r\n * Params:\r\n * quat - quat4 containing values to copy\r\n * dest - quat4 receiving copied values\r\n *\r\n * Returns:\r\n * dest\r\n */\r\nquat4.set = function(quat, dest) {\r\n	dest[0] = quat[0];\r\n	dest[1] = quat[1];\r\n	dest[2] = quat[2];\r\n	dest[3] = quat[3];\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * quat4.calculateW\r\n * Calculates the W component of a quat4 from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length. \r\n * Any existing W component will be ignored. \r\n *\r\n * Params:\r\n * quat - quat4 to calculate W component of\r\n * dest - Optional, quat4 receiving calculated values. If not specified result is written to quat\r\n *\r\n * Returns:\r\n * dest if specified, quat otherwise\r\n */\r\nquat4.calculateW = function(quat, dest) {\r\n	var x = quat[0], y = quat[1], z = quat[2];\r\n\r\n	if(!dest || quat == dest) {\r\n		quat[3] = -Math.sqrt(Math.abs(1.0 - x*x - y*y - z*z));\r\n		return quat;\r\n	}\r\n	dest[0] = x;\r\n	dest[1] = y;\r\n	dest[2] = z;\r\n	dest[3] = -Math.sqrt(Math.abs(1.0 - x*x - y*y - z*z));\r\n	return dest;\r\n};\r\n\r\n/*\r\n * quat4.inverse\r\n * Calculates the inverse of a quat4\r\n *\r\n * Params:\r\n * quat - quat4 to calculate inverse of\r\n * dest - Optional, quat4 receiving inverse values. If not specified result is written to quat\r\n *\r\n * Returns:\r\n * dest if specified, quat otherwise\r\n */\r\nquat4.inverse = function(quat, dest) {\r\n	if(!dest || quat == dest) {\r\n		quat[0] *= -1;\r\n		quat[1] *= -1;\r\n		quat[2] *= -1;\r\n		return quat;\r\n	}\r\n	dest[0] = -quat[0];\r\n	dest[1] = -quat[1];\r\n	dest[2] = -quat[2];\r\n	dest[3] = quat[3];\r\n	return dest;\r\n};\r\n\r\n/*\r\n * quat4.length\r\n * Calculates the length of a quat4\r\n *\r\n * Params:\r\n * quat - quat4 to calculate length of\r\n *\r\n * Returns:\r\n * Length of quat\r\n */\r\nquat4.length = function(quat) {\r\n	var x = quat[0], y = quat[1], z = quat[2], w = quat[3];\r\n	return Math.sqrt(x*x + y*y + z*z + w*w);\r\n};\r\n\r\n/*\r\n * quat4.normalize\r\n * Generates a unit quaternion of the same direction as the provided quat4\r\n * If quaternion length is 0, returns [0, 0, 0, 0]\r\n *\r\n * Params:\r\n * quat - quat4 to normalize\r\n * dest - Optional, quat4 receiving operation result. If not specified result is written to quat\r\n *\r\n * Returns:\r\n * dest if specified, quat otherwise\r\n */\r\nquat4.normalize = function(quat, dest) {\r\n	if(!dest) { dest = quat; }\r\n	\r\n	var x = quat[0], y = quat[1], z = quat[2], w = quat[3];\r\n	var len = Math.sqrt(x*x + y*y + z*z + w*w);\r\n	if(len == 0) {\r\n		dest[0] = 0;\r\n		dest[1] = 0;\r\n		dest[2] = 0;\r\n		dest[3] = 0;\r\n		return dest;\r\n	}\r\n	len = 1/len;\r\n	dest[0] = x * len;\r\n	dest[1] = y * len;\r\n	dest[2] = z * len;\r\n	dest[3] = w * len;\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * quat4.multiply\r\n * Performs a quaternion multiplication\r\n *\r\n * Params:\r\n * quat - quat4, first operand\r\n * quat2 - quat4, second operand\r\n * dest - Optional, quat4 receiving operation result. If not specified result is written to quat\r\n *\r\n * Returns:\r\n * dest if specified, quat otherwise\r\n */\r\nquat4.multiply = function(quat, quat2, dest) {\r\n	if(!dest) { dest = quat; }\r\n	\r\n	var qax = quat[0], qay = quat[1], qaz = quat[2], qaw = quat[3];\r\n	var qbx = quat2[0], qby = quat2[1], qbz = quat2[2], qbw = quat2[3];\r\n	\r\n	dest[0] = qax*qbw + qaw*qbx + qay*qbz - qaz*qby;\r\n	dest[1] = qay*qbw + qaw*qby + qaz*qbx - qax*qbz;\r\n	dest[2] = qaz*qbw + qaw*qbz + qax*qby - qay*qbx;\r\n	dest[3] = qaw*qbw - qax*qbx - qay*qby - qaz*qbz;\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * quat4.multiplyVec3\r\n * Transforms a vec3 with the given quaternion\r\n *\r\n * Params:\r\n * quat - quat4 to transform the vector with\r\n * vec - vec3 to transform\r\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\r\n *\r\n * Returns:\r\n * dest if specified, vec otherwise\r\n */\r\nquat4.multiplyVec3 = function(quat, vec, dest) {\r\n	if(!dest) { dest = vec; }\r\n	\r\n	var x = vec[0], y = vec[1], z = vec[2];\r\n	var qx = quat[0], qy = quat[1], qz = quat[2], qw = quat[3];\r\n\r\n	// calculate quat * vec\r\n	var ix = qw*x + qy*z - qz*y;\r\n	var iy = qw*y + qz*x - qx*z;\r\n	var iz = qw*z + qx*y - qy*x;\r\n	var iw = -qx*x - qy*y - qz*z;\r\n	\r\n	// calculate result * inverse quat\r\n	dest[0] = ix*qw + iw*-qx + iy*-qz - iz*-qy;\r\n	dest[1] = iy*qw + iw*-qy + iz*-qx - ix*-qz;\r\n	dest[2] = iz*qw + iw*-qz + ix*-qy - iy*-qx;\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * quat4.toMat3\r\n * Calculates a 3x3 matrix from the given quat4\r\n *\r\n * Params:\r\n * quat - quat4 to create matrix from\r\n * dest - Optional, mat3 receiving operation result\r\n *\r\n * Returns:\r\n * dest if specified, a new mat3 otherwise\r\n */\r\nquat4.toMat3 = function(quat, dest) {\r\n	if(!dest) { dest = mat3.create(); }\r\n	\r\n	var x = quat[0], y = quat[1], z = quat[2], w = quat[3];\r\n\r\n	var x2 = x + x;\r\n	var y2 = y + y;\r\n	var z2 = z + z;\r\n\r\n	var xx = x*x2;\r\n	var xy = x*y2;\r\n	var xz = x*z2;\r\n\r\n	var yy = y*y2;\r\n	var yz = y*z2;\r\n	var zz = z*z2;\r\n\r\n	var wx = w*x2;\r\n	var wy = w*y2;\r\n	var wz = w*z2;\r\n\r\n	dest[0] = 1 - (yy + zz);\r\n	dest[1] = xy - wz;\r\n	dest[2] = xz + wy;\r\n\r\n	dest[3] = xy + wz;\r\n	dest[4] = 1 - (xx + zz);\r\n	dest[5] = yz - wx;\r\n\r\n	dest[6] = xz - wy;\r\n	dest[7] = yz + wx;\r\n	dest[8] = 1 - (xx + yy);\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * quat4.toMat4\r\n * Calculates a 4x4 matrix from the given quat4\r\n *\r\n * Params:\r\n * quat - quat4 to create matrix from\r\n * dest - Optional, mat4 receiving operation result\r\n *\r\n * Returns:\r\n * dest if specified, a new mat4 otherwise\r\n */\r\nquat4.toMat4 = function(quat, dest) {\r\n	if(!dest) { dest = mat4.create(); }\r\n	\r\n	var x = quat[0], y = quat[1], z = quat[2], w = quat[3];\r\n\r\n	var x2 = x + x;\r\n	var y2 = y + y;\r\n	var z2 = z + z;\r\n\r\n	var xx = x*x2;\r\n	var xy = x*y2;\r\n	var xz = x*z2;\r\n\r\n	var yy = y*y2;\r\n	var yz = y*z2;\r\n	var zz = z*z2;\r\n\r\n	var wx = w*x2;\r\n	var wy = w*y2;\r\n	var wz = w*z2;\r\n\r\n	dest[0] = 1 - (yy + zz);\r\n	dest[1] = xy - wz;\r\n	dest[2] = xz + wy;\r\n	dest[3] = 0;\r\n\r\n	dest[4] = xy + wz;\r\n	dest[5] = 1 - (xx + zz);\r\n	dest[6] = yz - wx;\r\n	dest[7] = 0;\r\n\r\n	dest[8] = xz - wy;\r\n	dest[9] = yz + wx;\r\n	dest[10] = 1 - (xx + yy);\r\n	dest[11] = 0;\r\n\r\n	dest[12] = 0;\r\n	dest[13] = 0;\r\n	dest[14] = 0;\r\n	dest[15] = 1;\r\n	\r\n	return dest;\r\n};\r\n\r\n/*\r\n * quat4.slerp\r\n * Performs a spherical linear interpolation between two quat4\r\n *\r\n * Params:\r\n * quat - quat4, first quaternion\r\n * quat2 - quat4, second quaternion\r\n * slerp - interpolation amount between the two inputs\r\n * dest - Optional, quat4 receiving operation result. If not specified result is written to quat\r\n *\r\n * Returns:\r\n * dest if specified, quat otherwise\r\n */\r\nquat4.slerp = function(quat, quat2, slerp, dest) {\r\n    if(!dest) { dest = quat; }\r\n    \r\n	var cosHalfTheta =  quat[0]*quat2[0] + quat[1]*quat2[1] + quat[2]*quat2[2] + quat[3]*quat2[3];\r\n	\r\n	if (Math.abs(cosHalfTheta) >= 1.0){\r\n	    if(dest != quat) {\r\n		    dest[0] = quat[0];\r\n		    dest[1] = quat[1];\r\n		    dest[2] = quat[2];\r\n		    dest[3] = quat[3];\r\n		}\r\n		return dest;\r\n	}\r\n	\r\n	var halfTheta = Math.acos(cosHalfTheta);\r\n	var sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta*cosHalfTheta);\r\n\r\n	if (Math.abs(sinHalfTheta) < 0.001){\r\n		dest[0] = (quat[0]*0.5 + quat2[0]*0.5);\r\n		dest[1] = (quat[1]*0.5 + quat2[1]*0.5);\r\n		dest[2] = (quat[2]*0.5 + quat2[2]*0.5);\r\n		dest[3] = (quat[3]*0.5 + quat2[3]*0.5);\r\n		return dest;\r\n	}\r\n	\r\n	var ratioA = Math.sin((1 - slerp)*halfTheta) / sinHalfTheta;\r\n	var ratioB = Math.sin(slerp*halfTheta) / sinHalfTheta; \r\n	\r\n	dest[0] = (quat[0]*ratioA + quat2[0]*ratioB);\r\n	dest[1] = (quat[1]*ratioA + quat2[1]*ratioB);\r\n	dest[2] = (quat[2]*ratioA + quat2[2]*ratioB);\r\n	dest[3] = (quat[3]*ratioA + quat2[3]*ratioB);\r\n	\r\n	return dest;\r\n};\r\n\r\n\r\n/*\r\n * quat4.str\r\n * Returns a string representation of a quaternion\r\n *\r\n * Params:\r\n * quat - quat4 to represent as a string\r\n *\r\n * Returns:\r\n * string representation of quat\r\n */\r\nquat4.str = function(quat) {\r\n	return \'[\' + quat[0] + \', \' + quat[1] + \', \' + quat[2] + \', \' + quat[3] + \']\'; \r\n};\r\n\r\n\ndefine("glMatrix", ["typedefs"], (function (global) {\n    return function () {\n        var ret, fn;\n        return ret || global.glMatrix;\n    };\n}(this)));\n\n/*\r\n * glMatrixAddon.js\r\n * Extension to the glMatrix library. The original glMatrix library\r\n * was created by Brandon Jones.\r\n */\r\n\r\n\r\nmat4.xVec4 = function(mat, vec, dest){\r\n	if(!dest) { dest = vec; }	\r\n	var x = vec[0], y = vec[1], z = vec[2], w = vec[3];\r\n	\r\n	dest[0] = mat[0]*x + mat[1]*y + mat[2]*z + mat[3]*w;\r\n	dest[1] = mat[4]*x + mat[5]*y + mat[6]*z + mat[7]*w;\r\n	dest[2] = mat[8]*x + mat[9]*y + mat[10]*z + mat[11]*w;\r\n	dest[3] = mat[12]*x + mat[13]*y + mat[14]*z + mat[15]*w;\r\n	\r\n	return dest;\r\n};\r\n\r\nmat3.scale = function(mat, scalar, dest){\r\n	if(!dest || mat == dest) {\r\n		mat[0] *= scalar;\r\n		mat[1] *= scalar;\r\n		mat[2] *= scalar;\r\n		mat[3] *= scalar;\r\n		mat[4] *= scalar;\r\n		mat[5] *= scalar;\r\n		mat[6] *= scalar;\r\n		mat[7] *= scalar;\r\n		mat[8] *= scalar;\r\n		return mat;\r\n	}\r\n	dest = mat3.create();\r\n	dest[0] = mat[0]*scalar;\r\n	dest[1] = mat[1]*scalar;\r\n	dest[2] = mat[2]*scalar;\r\n	dest[3] = mat[3]*scalar;\r\n	dest[4] = mat[4]*scalar;\r\n	dest[5] = mat[5]*scalar;\r\n	dest[6] = mat[6]*scalar;\r\n	dest[7] = mat[7]*scalar;\r\n	dest[8] = mat[8]*scalar;\r\n	return dest;\r\n};\r\n\r\nmat3.inverse = function(mat, dest){\r\n	if(!dest) { dest = mat; }\r\n	\r\n	var ha00 = mat[0], ha01 = mat[1], ha02 = mat[2];\r\n	var ha10 = mat[3], ha11 = mat[4], ha12 = mat[5];\r\n	var ha20 = mat[6], ha21 = mat[7], ha22 = mat[8];\r\n	\r\n	var invDetA = 1/(ha00*ha11*ha22 + ha01*ha12*ha20 + ha02*ha10*ha21 - ha02*ha11*ha20 - ha01*ha10*ha22 - ha00*ha12*ha21);\r\n	dest[0] = (ha11*ha22 - ha12*ha21)*invDetA;\r\n	dest[1] = (ha02*ha21 - ha01*ha22)*invDetA;\r\n	dest[2] = (ha01*ha12 - ha02*ha11)*invDetA;\r\n	dest[3] = (ha12*ha20 - ha10*ha22)*invDetA;\r\n	dest[4] = (ha00*ha22 - ha02*ha20)*invDetA;\r\n	dest[5] = (ha02*ha10 - ha00*ha12)*invDetA;\r\n	dest[6] = (ha10*ha21 - ha11*ha20)*invDetA;\r\n	dest[7] = (ha01*ha20 - ha00*ha21)*invDetA;\r\n	dest[8] = (ha00*ha11 - ha01*ha10)*invDetA;\r\n	return dest;\r\n};\r\n\r\nmat3.multiply = function(mat, mat2, dest) {\r\n	if(!dest) { dest = mat; }\r\n	\r\n	var ha00 = mat[0], ha01 = mat[1], ha02 = mat[2];\r\n	var ha10 = mat[3], ha11 = mat[4], ha12 = mat[5];\r\n	var ha20 = mat[6], ha21 = mat[7], ha22 = mat[8];\r\n	\r\n	var hb00 = mat2[0], hb01 = mat2[1], hb02 = mat2[2];\r\n	var hb10 = mat2[3], hb11 = mat2[4], hb12 = mat2[5];\r\n	var hb20 = mat2[6], hb21 = mat2[7], hb22 = mat2[8];\r\n	\r\n	dest[0] = ha00*hb00 + ha01*hb10 + ha02*hb20;\r\n	dest[1] = ha00*hb01 + ha01*hb11 + ha02*hb21;\r\n	dest[2] = ha00*hb02 + ha01*hb12 + ha02*hb22;\r\n	\r\n	dest[3] = ha10*hb00 + ha11*hb10 + ha12*hb20;\r\n	dest[4] = ha10*hb01 + ha11*hb11 + ha12*hb21;\r\n	dest[5] = ha10*hb02 + ha11*hb12 + ha12*hb22;\r\n	\r\n	dest[6] = ha20*hb00 + ha21*hb10 + ha22*hb20;\r\n	dest[7] = ha20*hb01 + ha21*hb11 + ha22*hb21;\r\n	dest[8] = ha20*hb02 + ha21*hb12 + ha22*hb22;\r\n	return dest;\r\n};\r\n\r\nmat3.xVec3 = function(mat, vec, dest){\r\n	if(!dest) { dest = vec; }\r\n	var x = vec[0], y = vec[1], z = vec[2];\r\n	\r\n	dest[0] = mat[0]*x + mat[1]*y + mat[2]*z;\r\n	dest[1] = mat[3]*x + mat[4]*y + mat[5]*z;\r\n	dest[2] = mat[6]*x + mat[7]*y + mat[8]*z;\r\n	\r\n	return dest;\r\n};\r\n\r\nvar vec4={};\r\n\r\nvec4.create = function(vec){\r\n	var dest;\r\n	\r\n	if(vec) {\r\n		dest = new glMatrixArrayType(4);\r\n		dest[0] = vec[0];\r\n		dest[1] = vec[1];\r\n		dest[2] = vec[2];\r\n		dest[3] = vec[3];\r\n	} else {\r\n		if(glMatrixArrayType === Array)\r\n			dest = new glMatrixArrayType([0,0,0,0]);\r\n		else\r\n			dest = new glMatrixArrayType(4);\r\n	}\r\n	\r\n	return dest;\r\n};\r\n\r\nvec4.project = function(vec, dest){\r\n	if(!dest) { dest = vec; }\r\n	\r\n	dest[0] = vec[0]/vec[3];\r\n	dest[1] = vec[1]/vec[3];\r\n	dest[2] = vec[2]/vec[3];\r\n	return dest;\r\n};\r\n\r\nvec4.scale = function(vec, val, dest){\r\n	if(!dest || vec == dest) {\r\n		vec[0] *= val;\r\n		vec[1] *= val;\r\n		vec[2] *= val;\r\n		vec[4] *= val;\r\n		return vec;\r\n	}\r\n	\r\n	dest[0] = vec[0]*val;\r\n	dest[1] = vec[1]*val;\r\n	dest[2] = vec[2]*val;\r\n	dest[3] = vec[3]*val;\r\n	return dest;\r\n};\r\n\r\nvec4.xMat4 = function(vec, mat, dest){\r\n	if(!dest) { dest = vec; }\r\n	\r\n	var x = vec[0], y = vec[1], z = vec[2], w = vec[3];\r\n	\r\n	dest[0] = mat[0]*x + mat[4]*y + mat[8]*z + mat[12]*w;\r\n	dest[1] = mat[1]*x + mat[5]*y + mat[9]*z + mat[13]*w;\r\n	dest[2] = mat[2]*x + mat[6]*y + mat[10]*z + mat[14]*w;\r\n	dest[3] = mat[3]*x + mat[7]*y + mat[11]*z + mat[15]*w;\r\n	\r\n	return dest;\r\n};\r\n\r\n\r\nvar mat2 = {};\r\n\r\nmat2.create = function(mat){\r\n	var dest;\r\n	\r\n	if(mat) {\r\n		dest = new glMatrixArrayType(4);\r\n		dest[0] = mat[0];\r\n		dest[1] = mat[1];\r\n		dest[2] = mat[2];\r\n		dest[3] = mat[3];\r\n	} else {\r\n		if(glMatrixArrayType === Array)\r\n			dest  = new glMatrixArrayType([0,0,0,0]);\r\n		else\r\n			dest = new glMatrixArrayType(4);\r\n	}\r\n	\r\n	return dest;\r\n};\r\n\r\nmat2.xVec2 = function(mat, vec, dest){\r\n	if(!dest) { dest = vec; }\r\n	var x = vec[0], y = vec[1];\r\n	\r\n	dest[0] = mat[0]*x + mat[1]*y;\r\n	dest[1] = mat[2]*x + mat[3]*y;\r\n	\r\n	return dest;\r\n};\r\n\r\nmat2.scale = function(mat, scale, dest){\r\n	if(!dest || mat == dest) {\r\n		mat[0] *= scale;\r\n		mat[1] *= scale;\r\n		mat[2] *= scale;\r\n		mat[3] *= scale;\r\n		return mat;\r\n	}\r\n	\r\n	dest[0] = mat[0]*scale;\r\n	dest[1] = mat[1]*scale;\r\n	dest[2] = mat[2]*scale;\r\n	dest[3] = mat[3]*scale;\r\n	return dest;\r\n};\r\n\r\nmat2.determinant = function(mat){\r\n	return mat[0]*mat[3] - mat[1]*mat[2];\r\n};\r\n\r\nmat2.inverse = function(mat){\r\n  var scale = 1/(mat2.determinant(mat));\r\n  var a = mat[3]*scale,\r\n      b = -mat[1]*scale,\r\n      c = -mat[2]*scale,\r\n      d = mat[0];\r\n  mat[0] = a;\r\n  mat[1] = b;\r\n  mat[2] = c;\r\n  mat[3] = d;\r\n  return mat;\r\n};\r\n\r\nvar vec2 = {};\r\nvec2.create = function(vec){\r\n	var dest;\r\n	\r\n	if(vec) {\r\n		dest = new glMatrixArrayType(2);\r\n		dest[0] = vec[0];\r\n		dest[1] = vec[1];\r\n	} else {\r\n		if(glMatrixArrayType === Array)\r\n			dest = new glMatrixArrayType([0,0]);\r\n		else\r\n			dest = new glMatrixArrayType(2);\r\n	}\r\n	\r\n	return dest;\r\n};\r\n\r\nvec2.subtract = function(vec, vec2, dest) {\r\n	if(!dest || vec == dest) {\r\n		vec[0] -= vec2[0];\r\n		vec[1] -= vec2[1];\r\n		return vec;\r\n	}\r\n	\r\n	dest[0] = vec[0] - vec2[0];\r\n	dest[1] = vec[1] - vec2[1];\r\n	return dest;\r\n};\r\n\r\nvec2.add = function(vec, vec2, dest) {\r\n	if(!dest || vec == dest) {\r\n		vec[0] += vec2[0];\r\n		vec[1] += vec2[1];\r\n		return vec;\r\n	}\r\n	\r\n	dest[0] = vec[0] + vec2[0];\r\n	dest[1] = vec[1] + vec2[1];\r\n	return dest;\r\n};\r\n\r\nvec2.scale = function(vec, val, dest) {\r\n	if(!dest || vec == dest) {\r\n		vec[0] *= val;\r\n		vec[1] *= val;\r\n		return vec;\r\n	}\r\n	\r\n	dest[0] = vec[0]*val;\r\n	dest[1] = vec[1]*val;\r\n	return dest;\r\n};\r\n\r\nvec2.normalize = function(vec, dest) {\r\n  if(!dest) { dest = vec; }\r\n  \r\n  var x = vec[0], y = vec[1];\r\n  var len = Math.sqrt(x*x + y*y);\r\n  \r\n  if (!len) {\r\n    dest[0] = 0;\r\n    dest[1] = 0;\r\n    return dest;\r\n  } else if (len == 1) {\r\n    dest[0] = x;\r\n    dest[1] = y;\r\n    return dest;\r\n  }\r\n  \r\n  len = 1 / len;\r\n  dest[0] = x*len;\r\n  dest[1] = y*len;\r\n  return dest;\r\n};\r\n\r\nvec2.dot = function(vec, vec2){\r\n  return vec[0]*vec2[0] + vec[1]*vec2[1];\r\n};\r\n\r\nvec2.multiply = function(vec, vec2, dest){\r\n  if(!dest) { dest = vec; }\r\n  \r\n  dest[0] = vec[0]*vec2[0];\r\n  dest[1] = vec[1]*vec2[1];\r\n  return dest;\r\n};\r\n\r\n/**\r\n * @param vec vec2 to be unprojected [x,y] -> [x,y,1]\r\n * @returns vec3 unprojected vector\r\n */\r\nvec2.unproject = function(vec){\r\n	return vec3.create([vec[0], vec[1], 1]);\r\n};\r\n\r\nvec2.length = function(vec){\r\n  return Math.sqrt(vec[0]*vec[0] + vec[1]*vec[1]);\r\n};\r\n\r\nvec2.perspectiveProject = function(vec){\r\n  var result = vec2.create(vec);\r\n  return vec2.scale(result, 1/vec[2]);\r\n};\r\n\r\n/**\r\n * @param vec vec3 to be projected [x,y,z] -> [x/z,y/z]\r\n * @returns vec2 projected vector\r\n */\r\nvec3.project = function(vec){\r\n	return vec2.scale(vec2.create(vec), 1/vec[2]);\r\n};\r\n\r\nvar vec6 = {};\r\nvec6.scale = function(vec, val, dest){\r\n	if(!dest || vec == dest) {\r\n		vec[0] *= val;\r\n		vec[1] *= val;\r\n		vec[2] *= val;\r\n		vec[3] *= val;\r\n		vec[4] *= val;\r\n		vec[5] *= val;\r\n		return vec;\r\n	}\r\n	\r\n	dest[0] = vec[0]*val;\r\n	dest[1] = vec[1]*val;\r\n	dest[2] = vec[2]*val;\r\n	dest[3] = vec[3]*val;\r\n	dest[4] = vec[4]*val;\r\n	dest[5] = vec[5]*val;\r\n	return dest;\r\n};\r\n\r\nvec6.subtract = function(vec, vec2, dest){\r\n	if(!dest || vec == dest) {\r\n		vec[0] -= vec2[0];\r\n		vec[1] -= vec2[1];\r\n		vec[2] -= vec2[2];\r\n		vec[3] -= vec2[3];\r\n		vec[4] -= vec2[4];\r\n		vec[5] -= vec2[5];\r\n		return vec;\r\n	}\r\n	\r\n	dest[0] = vec[0] - vec2[0];\r\n	dest[1] = vec[1] - vec2[1];\r\n	dest[2] = vec[2] - vec2[2];\r\n	dest[3] = vec[3] - vec2[3];\r\n	dest[4] = vec[4] - vec2[4];\r\n	dest[5] = vec[5] - vec2[5];\r\n	return dest;\r\n};\r\n\r\nvec6.dot = function(vec, vec2){\r\n	return vec[0]*vec2[0] + vec[1]*vec2[1] + vec[2]*vec2[2] + vec[3]*vec2[3] + vec[4]*vec2[4] + vec[5]*vec2[5];\r\n};\r\n\r\nvar mat6 = {};\r\nmat6.xVec6 = function(mat, vec, dest){\r\n	if(!dest) { dest = vec; }	\r\n	var x = vec[0], y = vec[1], z = vec[2], u = vec[3], w = vec[4], v = vec[5];\r\n	\r\n	dest[0] = mat[0]*x + mat[1]*y + mat[2]*z + mat[3]*u + mat[4]*w + mat[5]*v;\r\n	dest[1] = mat[6]*x + mat[7]*y + mat[8]*z + mat[9]*u + mat[10]*w + mat[11]*v;\r\n	dest[2] = mat[12]*x + mat[13]*y + mat[14]*z + mat[15]*u + mat[16]*w + mat[17]*v;\r\n	dest[3] = mat[18]*x + mat[19]*y + mat[20]*z + mat[21]*u + mat[22]*w + mat[23]*v;\r\n	dest[4] = mat[24]*x + mat[25]*y + mat[26]*z + mat[27]*u + mat[28]*w + mat[29]*v;\r\n	dest[5] = mat[30]*x + mat[31]*y + mat[32]*z + mat[33]*u + mat[34]*w + mat[35]*v;\r\n	\r\n	return dest;\r\n};\r\n\r\nmat3.xVec3 = function(mat, vec, dest){\r\n	if(!dest) { dest = vec; }	\r\n	var x = vec[0], y = vec[1], z = vec[2];\r\n	\r\n	dest[0] = mat[0]*x + mat[1]*y + mat[2]*z;\r\n	dest[1] = mat[3]*x + mat[4]*y + mat[5]*z;\r\n	dest[2] = mat[6]*x + mat[7]*y + mat[8]*z;\r\n	\r\n	return dest;\r\n};\ndefine("glMatrixAddon", ["glMatrix"], (function (global) {\n    return function () {\n        var ret, fn;\n        return ret || global.glMatrixAddon;\n    };\n}(this)));\n\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\'array_helper\',[],function() {\r\n    "use strict";\r\n\r\n    return {\r\n        init : function(arr, val) {\r\n            var l = arr.length;\r\n            while (l--) {\r\n                arr[l] = val;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Shuffles the content of an array\r\n         * @return {Array} the array itself shuffled\r\n         */\r\n        shuffle : function(arr) {\r\n            var i = arr.length - 1, j, x;\r\n            for (i; i >= 0; i--) {\r\n                j = Math.floor(Math.random() * i);\r\n                x = arr[i];\r\n                arr[i] = arr[j];\r\n                arr[j] = x;\r\n            }\r\n            return arr;\r\n        },\r\n\r\n        toPointList : function(arr) {\r\n            var i, j, row = [], rows = [];\r\n            for ( i = 0; i < arr.length; i++) {\r\n                row = [];\r\n                for ( j = 0; j < arr[i].length; j++) {\r\n                    row[j] = arr[i][j];\r\n                }\r\n                rows[i] = "[" + row.join(",") + "]";\r\n            }\r\n            return "[" + rows.join(",\\r\\n") + "]";\r\n        },\r\n\r\n        /**\r\n         * returns the elements which\'s score is bigger than the threshold\r\n         * @return {Array} the reduced array\r\n         */\r\n        threshold : function(arr, threshold, scoreFunc) {\r\n            var i, queue = [];\r\n            for ( i = 0; i < arr.length; i++) {\r\n                if (scoreFunc.apply(arr, [arr[i]]) >= threshold) {\r\n                    queue.push(arr[i]);\r\n                }\r\n            }\r\n            return queue;\r\n        },\r\n\r\n        maxIndex : function(arr) {\r\n            var i, max = 0;\r\n            for ( i = 0; i < arr.length; i++) {\r\n                if (arr[i] > arr[max]) {\r\n                    max = i;\r\n                }\r\n            }\r\n            return max;\r\n        },\r\n\r\n        max : function(arr) {\r\n            var i, max = 0;\r\n            for ( i = 0; i < arr.length; i++) {\r\n                if (arr[i] > max) {\r\n                    max = arr[i];\r\n                }\r\n            }\r\n            return max;\r\n        },\r\n\r\n        sum: function(arr) {\r\n            var length = arr.length,\r\n                sum = 0;\r\n\r\n            while(length--) {\r\n                sum += arr[length];\r\n            }\r\n            return sum;\r\n        }\r\n    };\r\n}); \n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define, vec2, vec3 */\r\n\r\ndefine(\'cv_utils\',[\'cluster\', \'glMatrixAddon\', "array_helper"], function(Cluster2, glMatrixAddon, ArrayHelper) {\r\n\r\n    "use strict";\r\n    /*\r\n    * cv_utils.js\r\n    * Collection of CV functions and libraries\r\n    */\r\n\r\n    /**\r\n     * Namespace for various CV alorithms\r\n     * @class Represents a collection of useful CV algorithms/functions\r\n     */\r\n\r\n    var CVUtils = {};\r\n\r\n    /**\r\n     * @param x x-coordinate\r\n     * @param y y-coordinate\r\n     * @return ImageReference {x,y} Coordinate\r\n     */\r\n    CVUtils.imageRef = function(x, y) {\r\n        var that = {\r\n            x : x,\r\n            y : y,\r\n            toVec2 : function() {\r\n                return vec2.create([this.x, this.y]);\r\n            },\r\n            toVec3 : function() {\r\n                return vec3.create([this.x, this.y, 1]);\r\n            },\r\n            round : function() {\r\n                this.x = this.x > 0.0 ? Math.floor(this.x + 0.5) : Math.floor(this.x - 0.5);\r\n                this.y = this.y > 0.0 ? Math.floor(this.y + 0.5) : Math.floor(this.y - 0.5);\r\n                return this;\r\n            }\r\n        };\r\n        return that;\r\n    };\r\n\r\n    /**\r\n     * Computes an integral image of a given grayscale image.\r\n     * @param imageDataContainer {ImageDataContainer} the image to be integrated\r\n     */\r\n    CVUtils.computeIntegralImage2 = function(imageWrapper, integralWrapper) {\r\n        var imageData = imageWrapper.data;\r\n        var width = imageWrapper.size.x;\r\n        var height = imageWrapper.size.y;\r\n        var integralImageData = integralWrapper.data;\r\n        var sum = 0, posA = 0, posB = 0, posC = 0, posD = 0, x, y;\r\n\r\n        // sum up first column\r\n        posB = width;\r\n        sum = 0;\r\n        for ( y = 1; y < height; y++) {\r\n            sum += imageData[posA];\r\n            integralImageData[posB] += sum;\r\n            posA += width;\r\n            posB += width;\r\n        }\r\n\r\n        posA = 0;\r\n        posB = 1;\r\n        sum = 0;\r\n        for ( x = 1; x < width; x++) {\r\n            sum += imageData[posA];\r\n            integralImageData[posB] += sum;\r\n            posA++;\r\n            posB++;\r\n        }\r\n\r\n        for ( y = 1; y < height; y++) {\r\n            posA = y * width + 1;\r\n            posB = (y - 1) * width + 1;\r\n            posC = y * width;\r\n            posD = (y - 1) * width;\r\n            for ( x = 1; x < width; x++) {\r\n                integralImageData[posA] += imageData[posA] + integralImageData[posB] + integralImageData[posC] - integralImageData[posD];\r\n                posA++;\r\n                posB++;\r\n                posC++;\r\n                posD++;\r\n            }\r\n        }\r\n    };\r\n\r\n    CVUtils.computeIntegralImage = function(imageWrapper, integralWrapper) {\r\n        var imageData = imageWrapper.data;\r\n        var width = imageWrapper.size.x;\r\n        var height = imageWrapper.size.y;\r\n        var integralImageData = integralWrapper.data;\r\n        var sum = 0;\r\n\r\n        // sum up first row\r\n        for (var i = 0; i < width; i++) {\r\n            sum += imageData[i];\r\n            integralImageData[i] = sum;\r\n        }\r\n\r\n        for (var v = 1; v < height; v++) {\r\n            sum = 0;\r\n            for (var u = 0; u < width; u++) {\r\n                sum += imageData[v * width + u];\r\n                integralImageData[((v) * width) + u] = sum + integralImageData[(v - 1) * width + u];\r\n            }\r\n        }\r\n    };\r\n\r\n    CVUtils.thresholdImage = function(imageWrapper, threshold, targetWrapper) {\r\n        if (!targetWrapper) {\r\n            targetWrapper = imageWrapper;\r\n        }\r\n        var imageData = imageWrapper.data, length = imageData.length, targetData = targetWrapper.data;\r\n\r\n        while (length--) {\r\n            targetData[length] = imageData[length] < threshold ? 1 : 0;\r\n        }\r\n    };\r\n\r\n    CVUtils.computeHistogram = function(imageWrapper, bitsPerPixel) {\r\n        if (!bitsPerPixel) {\r\n            bitsPerPixel = 8;\r\n        }\r\n        var imageData = imageWrapper.data,\r\n            length = imageData.length,\r\n            bitShift = 8 - bitsPerPixel,\r\n            bucketCnt = 1 << bitsPerPixel,\r\n            hist = new Int32Array(bucketCnt);\r\n\r\n        while (length--) {\r\n            hist[imageData[length] >> bitShift]++;\r\n        }\r\n        return hist;\r\n    };\r\n\r\n    CVUtils.sharpenLine = function(line) {\r\n        var i,\r\n            length = line.length,\r\n            left = line[0],\r\n            center = line[1],\r\n            right;\r\n\r\n        for (i = 1; i < length - 1; i++) {\r\n            right = line[i + 1];\r\n            //  -1 4 -1 kernel\r\n            line[i-1] = (((center * 2) - left - right)) & 255;\r\n            left = center;\r\n            center = right;\r\n        }\r\n        return line;\r\n    };\r\n\r\n    CVUtils.determineOtsuThreshold = function(imageWrapper, bitsPerPixel) {\r\n        if (!bitsPerPixel) {\r\n            bitsPerPixel = 8;\r\n        }\r\n        var hist,\r\n            threshold,\r\n            bitShift = 8 - bitsPerPixel;\r\n\r\n        function px(init, end) {\r\n            var sum = 0, i;\r\n            for ( i = init; i <= end; i++) {\r\n                sum += hist[i];\r\n            }\r\n            return sum;\r\n        }\r\n\r\n        function mx(init, end) {\r\n            var i, sum = 0;\r\n\r\n            for ( i = init; i <= end; i++) {\r\n                sum += i * hist[i];\r\n            }\r\n\r\n            return sum;\r\n        }\r\n\r\n        function determineThreshold() {\r\n            var vet = [0], p1, p2, p12, k, m1, m2, m12,\r\n                max = (1 << bitsPerPixel) - 1;\r\n\r\n            hist = CVUtils.computeHistogram(imageWrapper, bitsPerPixel);\r\n            for ( k = 1; k < max; k++) {\r\n                p1 = px(0, k);\r\n                p2 = px(k + 1, max);\r\n                p12 = p1 * p2;\r\n                if (p12 === 0) {\r\n                    p12 = 1;\r\n                }\r\n                m1 = mx(0, k) * p2;\r\n                m2 = mx(k + 1, max) * p1;\r\n                m12 = m1 - m2;\r\n                vet[k] = m12 * m12 / p12;\r\n            }\r\n            return ArrayHelper.maxIndex(vet);\r\n        }\r\n\r\n        threshold = determineThreshold();\r\n        return threshold << bitShift;\r\n    };\r\n\r\n    CVUtils.otsuThreshold = function(imageWrapper, targetWrapper) {\r\n        var threshold = CVUtils.determineOtsuThreshold(imageWrapper);\r\n\r\n        CVUtils.thresholdImage(imageWrapper, threshold, targetWrapper);\r\n        return threshold;\r\n    };\r\n\r\n    // local thresholding\r\n    CVUtils.computeBinaryImage = function(imageWrapper, integralWrapper, targetWrapper) {\r\n        CVUtils.computeIntegralImage(imageWrapper, integralWrapper);\r\n\r\n        if (!targetWrapper) {\r\n            targetWrapper = imageWrapper;\r\n        }\r\n        var imageData = imageWrapper.data;\r\n        var targetData = targetWrapper.data;\r\n        var width = imageWrapper.size.x;\r\n        var height = imageWrapper.size.y;\r\n        var integralImageData = integralWrapper.data;\r\n        var sum = 0, v, u, kernel = 3, A, B, C, D, avg, size = (kernel * 2 + 1) * (kernel * 2 + 1);\r\n\r\n        // clear out top & bottom-border\r\n        for ( v = 0; v <= kernel; v++) {\r\n            for ( u = 0; u < width; u++) {\r\n                targetData[((v) * width) + u] = 0;\r\n                targetData[(((height - 1) - v) * width) + u] = 0;\r\n            }\r\n        }\r\n\r\n        // clear out left & right border\r\n        for ( v = kernel; v < height - kernel; v++) {\r\n            for ( u = 0; u <= kernel; u++) {\r\n                targetData[((v) * width) + u] = 0;\r\n                targetData[((v) * width) + (width - 1 - u)] = 0;\r\n            }\r\n        }\r\n\r\n        for ( v = kernel + 1; v < height - kernel - 1; v++) {\r\n            for ( u = kernel + 1; u < width - kernel; u++) {\r\n                A = integralImageData[(v - kernel - 1) * width + (u - kernel - 1)];\r\n                B = integralImageData[(v - kernel - 1) * width + (u + kernel)];\r\n                C = integralImageData[(v + kernel) * width + (u - kernel - 1)];\r\n                D = integralImageData[(v + kernel) * width + (u + kernel)];\r\n                sum = D - C - B + A;\r\n                avg = sum / (size);\r\n                targetData[v * width + u] = imageData[v * width + u] > (avg + 5) ? 0 : 1;\r\n            }\r\n        }\r\n    };\r\n\r\n    CVUtils.cluster = function(points, threshold, property) {\r\n        var i, k, cluster, point, clusters = [];\r\n\r\n        if (!property) {\r\n            property = "rad";\r\n        }\r\n\r\n        function addToCluster(point) {\r\n            var found = false;\r\n            for ( k = 0; k < clusters.length; k++) {\r\n                cluster = clusters[k];\r\n                if (cluster.fits(point)) {\r\n                    cluster.add(point);\r\n                    found = true;\r\n                }\r\n            }\r\n            return found;\r\n        }\r\n\r\n        // iterate over each cloud\r\n        for ( i = 0; i < points.length; i++) {\r\n            point = Cluster2.createPoint(points[i], i, property);\r\n            if (!addToCluster(point)) {\r\n                clusters.push(Cluster2.create(point, threshold));\r\n            }\r\n        }\r\n\r\n        return clusters;\r\n\r\n    };\r\n\r\n    CVUtils.Tracer = {\r\n        trace : function(points, vec) {\r\n            var iteration, maxIterations = 10, top = [], result = [], centerPos = 0, currentPos = 0;\r\n\r\n            function trace(idx, forward) {\r\n                var from, to, toIdx, predictedPos, thresholdX = 1, thresholdY = Math.abs(vec[1] / 10), found = false;\r\n\r\n                function match(pos, predicted) {\r\n                    if (pos.x > (predicted.x - thresholdX) && pos.x < (predicted.x + thresholdX) && pos.y > (predicted.y - thresholdY) && pos.y < (predicted.y + thresholdY)) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // check if the next index is within the vec specifications\r\n                // if not, check as long as the threshold is met\r\n\r\n                from = points[idx];\r\n                if (forward) {\r\n                    predictedPos = {\r\n                        x : from.x + vec[0],\r\n                        y : from.y + vec[1]\r\n                    };\r\n                } else {\r\n                    predictedPos = {\r\n                        x : from.x - vec[0],\r\n                        y : from.y - vec[1]\r\n                    };\r\n                }\r\n\r\n                toIdx = forward ? idx + 1 : idx - 1;\r\n                to = points[toIdx];\r\n                while (to && ( found = match(to, predictedPos)) !== true && (Math.abs(to.y - from.y) < vec[1])) {\r\n                    toIdx = forward ? toIdx + 1 : toIdx - 1;\r\n                    to = points[toIdx];\r\n                }\r\n\r\n                return found ? toIdx : null;\r\n            }\r\n\r\n            for ( iteration = 0; iteration < maxIterations; iteration++) {\r\n                // randomly select point to start with\r\n                centerPos = Math.floor(Math.random() * points.length);\r\n\r\n                // trace forward\r\n                top = [];\r\n                currentPos = centerPos;\r\n                top.push(points[currentPos]);\r\n                while (( currentPos = trace(currentPos, true)) !== null) {\r\n                    top.push(points[currentPos]);\r\n                }\r\n                if (centerPos > 0) {\r\n                    currentPos = centerPos;\r\n                    while (( currentPos = trace(currentPos, false)) !== null) {\r\n                        top.push(points[currentPos]);\r\n                    }\r\n                }\r\n\r\n                if (top.length > result.length) {\r\n                    result = top;\r\n                }\r\n            }\r\n\r\n            return result;\r\n\r\n        }\r\n    };\r\n\r\n    CVUtils.DILATE = 1;\r\n    CVUtils.ERODE = 2;\r\n\r\n    CVUtils.dilate = function(inImageWrapper, outImageWrapper) {\r\n        var v, u, inImageData = inImageWrapper.data, outImageData = outImageWrapper.data, height = inImageWrapper.size.y, width = inImageWrapper.size.x, sum, yStart1, yStart2, xStart1, xStart2;\r\n\r\n        for ( v = 1; v < height - 1; v++) {\r\n            for ( u = 1; u < width - 1; u++) {\r\n                yStart1 = v - 1;\r\n                yStart2 = v + 1;\r\n                xStart1 = u - 1;\r\n                xStart2 = u + 1;\r\n                sum = inImageData[yStart1 * width + xStart1]/* +   inImageData[yStart1*width+u] */ + inImageData[yStart1 * width + xStart2] +\r\n                /* inImageData[v*width+xStart1]  + */\r\n                inImageData[v * width + u] + /* inImageData[v*width+xStart2] +*/\r\n                inImageData[yStart2 * width + xStart1]/* +   inImageData[yStart2*width+u]*/ + inImageData[yStart2 * width + xStart2];\r\n                outImageData[v * width + u] = sum > 0 ? 1 : 0;\r\n            }\r\n        }\r\n    };\r\n\r\n    CVUtils.erode = function(inImageWrapper, outImageWrapper) {\r\n        var v, u, inImageData = inImageWrapper.data, outImageData = outImageWrapper.data, height = inImageWrapper.size.y, width = inImageWrapper.size.x, sum, yStart1, yStart2, xStart1, xStart2;\r\n\r\n        for ( v = 1; v < height - 1; v++) {\r\n            for ( u = 1; u < width - 1; u++) {\r\n                yStart1 = v - 1;\r\n                yStart2 = v + 1;\r\n                xStart1 = u - 1;\r\n                xStart2 = u + 1;\r\n                sum = inImageData[yStart1 * width + xStart1]/* +   inImageData[yStart1*width+u] */ + inImageData[yStart1 * width + xStart2] +\r\n                /* inImageData[v*width+xStart1]  + */\r\n                inImageData[v * width + u] + /* inImageData[v*width+xStart2] +*/\r\n                inImageData[yStart2 * width + xStart1]/* +   inImageData[yStart2*width+u]*/ + inImageData[yStart2 * width + xStart2];\r\n                outImageData[v * width + u] = sum === 5 ? 1 : 0;\r\n            }\r\n        }\r\n    };\r\n\r\n    CVUtils.subtract = function(aImageWrapper, bImageWrapper, resultImageWrapper) {\r\n        if (!resultImageWrapper) {\r\n            resultImageWrapper = aImageWrapper;\r\n        }\r\n        var length = aImageWrapper.data.length, aImageData = aImageWrapper.data, bImageData = bImageWrapper.data, cImageData = resultImageWrapper.data;\r\n\r\n        while (length--) {\r\n            cImageData[length] = aImageData[length] - bImageData[length];\r\n        }\r\n    };\r\n\r\n    CVUtils.bitwiseOr = function(aImageWrapper, bImageWrapper, resultImageWrapper) {\r\n        if (!resultImageWrapper) {\r\n            resultImageWrapper = aImageWrapper;\r\n        }\r\n        var length = aImageWrapper.data.length, aImageData = aImageWrapper.data, bImageData = bImageWrapper.data, cImageData = resultImageWrapper.data;\r\n\r\n        while (length--) {\r\n            cImageData[length] = aImageData[length] || bImageData[length];\r\n        }\r\n    };\r\n\r\n    CVUtils.countNonZero = function(imageWrapper) {\r\n        var length = imageWrapper.data.length, data = imageWrapper.data, sum = 0;\r\n\r\n        while (length--) {\r\n            sum += data[length];\r\n        }\r\n        return sum;\r\n    };\r\n\r\n    CVUtils.topGeneric = function(list, top, scoreFunc) {\r\n        var i, minIdx = 0, min = 0, queue = [], score, hit, pos;\r\n\r\n        for ( i = 0; i < top; i++) {\r\n            queue[i] = {\r\n                score : 0,\r\n                item : null\r\n            };\r\n        }\r\n\r\n        for ( i = 0; i < list.length; i++) {\r\n            score = scoreFunc.apply(this, [list[i]]);\r\n            if (score > min) {\r\n                hit = queue[minIdx];\r\n                hit.score = score;\r\n                hit.item = list[i];\r\n                min = Number.MAX_VALUE;\r\n                for ( pos = 0; pos < top; pos++) {\r\n                    if (queue[pos].score < min) {\r\n                        min = queue[pos].score;\r\n                        minIdx = pos;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return queue;\r\n    };\r\n\r\n    CVUtils.grayArrayFromImage = function(htmlImage, offsetX, ctx, array) {\r\n        ctx.drawImage(htmlImage, offsetX, 0, htmlImage.width, htmlImage.height);\r\n        var ctxData = ctx.getImageData(offsetX, 0, htmlImage.width, htmlImage.height).data;\r\n        CVUtils.computeGray(ctxData, array);\r\n    };\r\n\r\n    CVUtils.grayArrayFromContext = function(ctx, size, offset, array) {\r\n        var ctxData = ctx.getImageData(offset.x, offset.y, size.x, size.y).data;\r\n        CVUtils.computeGray(ctxData, array);\r\n    };\r\n\r\n    CVUtils.grayAndHalfSampleFromCanvasData = function(canvasData, size, outArray) {\r\n        var topRowIdx = 0;\r\n        var bottomRowIdx = size.x;\r\n        var endIdx = Math.floor(canvasData.length / 4);\r\n        var outWidth = size.x / 2;\r\n        var outImgIdx = 0;\r\n        var inWidth = size.x;\r\n        var i;\r\n\r\n        while (bottomRowIdx < endIdx) {\r\n            for ( i = 0; i < outWidth; i++) {\r\n                outArray[outImgIdx] = Math.floor(((0.299 * canvasData[topRowIdx * 4 + 0] + 0.587 * canvasData[topRowIdx * 4 + 1] + 0.114 * canvasData[topRowIdx * 4 + 2]) + (0.299 * canvasData[(topRowIdx + 1) * 4 + 0] + 0.587 * canvasData[(topRowIdx + 1) * 4 + 1] + 0.114 * canvasData[(topRowIdx + 1) * 4 + 2]) + (0.299 * canvasData[(bottomRowIdx) * 4 + 0] + 0.587 * canvasData[(bottomRowIdx) * 4 + 1] + 0.114 * canvasData[(bottomRowIdx) * 4 + 2]) + (0.299 * canvasData[(bottomRowIdx + 1) * 4 + 0] + 0.587 * canvasData[(bottomRowIdx + 1) * 4 + 1] + 0.114 * canvasData[(bottomRowIdx + 1) * 4 + 2])) / 4);\r\n                outImgIdx++;\r\n                topRowIdx = topRowIdx + 2;\r\n                bottomRowIdx = bottomRowIdx + 2;\r\n            }\r\n            topRowIdx = topRowIdx + inWidth;\r\n            bottomRowIdx = bottomRowIdx + inWidth;\r\n        }\r\n\r\n    };\r\n\r\n    CVUtils.computeGray = function(imageData, outArray, config) {\r\n        var l = (imageData.length / 4) | 0,\r\n            i,\r\n            singleChannel = config && config.singleChannel === true;\r\n\r\n        if (singleChannel) {\r\n            for (i = 0; i < l; i++) {\r\n                outArray[i] = imageData[i * 4 + 0];\r\n            }\r\n        } else {\r\n            for (i = 0; i < l; i++) {\r\n                outArray[i] = Math.floor(0.299 * imageData[i * 4 + 0] + 0.587 * imageData[i * 4 + 1] + 0.114 * imageData[i * 4 + 2]);\r\n            }\r\n        }\r\n    };\r\n\r\n    CVUtils.loadImageArray = function(src, callback, canvas) {\r\n        if (!canvas)\r\n            canvas = document.createElement(\'canvas\');\r\n        var img = new Image();\r\n        img.callback = callback;\r\n        img.onload = function() {\r\n            canvas.width = this.width;\r\n            canvas.height = this.height;\r\n            var ctx = canvas.getContext(\'2d\');\r\n            ctx.drawImage(this, 0, 0);\r\n            var array = new Uint8Array(this.width * this.height);\r\n            ctx.drawImage(this, 0, 0);\r\n            var data = ctx.getImageData(0, 0, this.width, this.height).data;\r\n            CVUtils.computeGray(data, array);\r\n            this.callback(array, {\r\n                x : this.width,\r\n                y : this.height\r\n            }, this);\r\n        };\r\n        img.src = src;\r\n    };\r\n\r\n    /**\r\n     * @param inImg {ImageWrapper} input image to be sampled\r\n     * @param outImg {ImageWrapper} to be stored in\r\n     */\r\n    CVUtils.halfSample = function(inImgWrapper, outImgWrapper) {\r\n        var inImg = inImgWrapper.data;\r\n        var inWidth = inImgWrapper.size.x;\r\n        var outImg = outImgWrapper.data;\r\n        var topRowIdx = 0;\r\n        var bottomRowIdx = inWidth;\r\n        var endIdx = inImg.length;\r\n        var outWidth = inWidth / 2;\r\n        var outImgIdx = 0;\r\n        while (bottomRowIdx < endIdx) {\r\n            for (var i = 0; i < outWidth; i++) {\r\n                outImg[outImgIdx] = Math.floor((inImg[topRowIdx] + inImg[topRowIdx + 1] + inImg[bottomRowIdx] + inImg[bottomRowIdx + 1]) / 4);\r\n                outImgIdx++;\r\n                topRowIdx = topRowIdx + 2;\r\n                bottomRowIdx = bottomRowIdx + 2;\r\n            }\r\n            topRowIdx = topRowIdx + inWidth;\r\n            bottomRowIdx = bottomRowIdx + inWidth;\r\n        }\r\n    };\r\n\r\n    CVUtils.hsv2rgb = function(hsv, rgb) {\r\n        var h = hsv[0], s = hsv[1], v = hsv[2], c = v * s, x = c * (1 - Math.abs((h / 60) % 2 - 1)), m = v - c, r = 0, g = 0, b = 0;\r\n        rgb = rgb || [0, 0, 0];\r\n\r\n        if (h < 60) {\r\n            r = c;\r\n            g = x;\r\n        } else if (h < 120) {\r\n            r = x;\r\n            g = c;\r\n        } else if (h < 180) {\r\n            g = c;\r\n            b = x;\r\n        } else if (h < 240) {\r\n            g = x;\r\n            b = c;\r\n        } else if (h < 300) {\r\n            r = x;\r\n            b = c;\r\n        } else if (h < 360) {\r\n            r = c;\r\n            b = x;\r\n        }\r\n        rgb[0] = ((r + m) * 255) | 0;\r\n        rgb[1] = ((g + m) * 255) | 0;\r\n        rgb[2] = ((b + m) * 255) | 0;\r\n        return rgb;\r\n    };\r\n\r\n    CVUtils._computeDivisors = function(n) {\r\n        var largeDivisors = [],\r\n            divisors = [],\r\n            i;\r\n\r\n        for (i = 1; i < Math.sqrt(n) + 1; i++) {\r\n            if (n % i === 0) {\r\n                divisors.push(i);\r\n                if (i !== n/i) {\r\n                    largeDivisors.unshift(Math.floor(n/i));\r\n                }\r\n            }\r\n        }\r\n        return divisors.concat(largeDivisors);\r\n    };\r\n\r\n    CVUtils._computeIntersection = function(arr1, arr2) {\r\n        var i = 0,\r\n            j = 0,\r\n            result = [];\r\n\r\n        while (i < arr1.length && j < arr2.length) {\r\n            if (arr1[i] === arr2[j]) {\r\n                result.push(arr1[i]);\r\n                i++;\r\n                j++;\r\n            } else if (arr1[i] > arr2[j]) {\r\n                j++;\r\n            } else {\r\n                i++;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    CVUtils.calculatePatchSize = function(patchSize, imgSize) {\r\n        var divisorsX = this._computeDivisors(imgSize.x),\r\n            divisorsY = this._computeDivisors(imgSize.y),\r\n            wideSide = Math.max(imgSize.x, imgSize.y),\r\n            common = this._computeIntersection(divisorsX, divisorsY),\r\n            nrOfPatchesList = [8, 10, 15, 20, 32, 60, 80],\r\n            nrOfPatchesMap = {\r\n                "x-small": 5,\r\n                "small": 4,\r\n                "medium": 3,\r\n                "large": 2,\r\n                "x-large": 1\r\n            },\r\n            nrOfPatchesIdx = nrOfPatchesMap[patchSize] || nrOfPatchesMap.medium,\r\n            nrOfPatches = nrOfPatchesList[nrOfPatchesIdx],\r\n            desiredPatchSize = Math.floor(wideSide/nrOfPatches),\r\n            optimalPatchSize;\r\n\r\n        function findPatchSizeForDivisors(divisors) {\r\n            var i = 0,\r\n                found = divisors[Math.floor(divisors.length/2)];\r\n\r\n            while(i < (divisors.length - 1) && divisors[i] < desiredPatchSize) {\r\n                i++;\r\n            }\r\n            if (i > 0) {\r\n                if (Math.abs(divisors[i] - desiredPatchSize) > Math.abs(divisors[i-1] - desiredPatchSize)) {\r\n                    found = divisors[i-1];\r\n                } else {\r\n                    found = divisors[i];\r\n                }\r\n            }\r\n            if (desiredPatchSize / found < nrOfPatchesList[nrOfPatchesIdx+1] / nrOfPatchesList[nrOfPatchesIdx] &&\r\n                desiredPatchSize / found > nrOfPatchesList[nrOfPatchesIdx-1]/nrOfPatchesList[nrOfPatchesIdx] ) {\r\n                return {x: found, y: found};\r\n            }\r\n            return null;\r\n        }\r\n\r\n        optimalPatchSize = findPatchSizeForDivisors(common);\r\n        if (!optimalPatchSize) {\r\n            optimalPatchSize = findPatchSizeForDivisors(this._computeDivisors(wideSide));\r\n            if (!optimalPatchSize) {\r\n                optimalPatchSize = findPatchSizeForDivisors((this._computeDivisors(desiredPatchSize * nrOfPatches)));\r\n            }\r\n        }\r\n        return optimalPatchSize;\r\n    };\r\n\r\n    CVUtils._parseCSSDimensionValues = function(value) {\r\n        var dimension = {\r\n                value: parseFloat(value),\r\n                unit: value.indexOf("%") === value.length-1 ? "%" : "%"\r\n            };\r\n\r\n        return dimension;\r\n    };\r\n\r\n    CVUtils._dimensionsConverters = {\r\n        top: function(dimension, context) {\r\n            if (dimension.unit === "%") {\r\n                return Math.floor(context.height * (dimension.value / 100));\r\n            }\r\n        },\r\n        right: function(dimension, context) {\r\n            if (dimension.unit === "%") {\r\n                return Math.floor(context.width - (context.width * (dimension.value / 100)));\r\n            }\r\n        },\r\n        bottom: function(dimension, context) {\r\n            if (dimension.unit === "%") {\r\n                return Math.floor(context.height - (context.height * (dimension.value / 100)));\r\n            }\r\n        },\r\n        left: function(dimension, context) {\r\n            if (dimension.unit === "%") {\r\n                return Math.floor(context.width * (dimension.value / 100));\r\n            }\r\n        }\r\n    };\r\n\r\n    CVUtils.computeImageArea = function(inputWidth, inputHeight, area) {\r\n        var context = {width: inputWidth, height: inputHeight};\r\n\r\n        var parsedArea = Object.keys(area).reduce(function(result, key) {\r\n            var value = area[key],\r\n                parsed = CVUtils._parseCSSDimensionValues(value),\r\n                calculated = CVUtils._dimensionsConverters[key](parsed, context);\r\n\r\n            result[key] = calculated;\r\n            return result;\r\n        }, {});\r\n\r\n        return {\r\n            sx: parsedArea.left,\r\n            sy: parsedArea.top,\r\n            sw: parsedArea.right - parsedArea.left,\r\n            sh: parsedArea.bottom - parsedArea.top\r\n        };\r\n    };\r\n\r\n    return (CVUtils);\r\n});\r\n\r\n\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define, vec2, mat2  */\r\n\r\ndefine(\'image_wrapper\',[\r\n    "subImage",\r\n    "cv_utils",\r\n    "array_helper"\r\n    ], \r\n    function(SubImage, CVUtils, ArrayHelper) {\r\n    \r\n    \'use strict\';\r\n\r\n    /**\r\n     * Represents a basic image combining the data and size.\r\n     * In addition, some methods for manipulation are contained.\r\n     * @param size {x,y} The size of the image in pixel\r\n     * @param data {Array} If given, a flat array containing the pixel data\r\n     * @param ArrayType {Type} If given, the desired DataType of the Array (may be typed/non-typed)\r\n     * @param initialize {Boolean} Indicating if the array should be initialized on creation.\r\n     * @returns {ImageWrapper}\r\n     */\r\n    function ImageWrapper(size, data, ArrayType, initialize) {\r\n        if (!data) {\r\n            if (ArrayType) {\r\n                this.data = new ArrayType(size.x * size.y);\r\n                if (ArrayType === Array && initialize) {\r\n                    ArrayHelper.init(this.data, 0);\r\n                }\r\n            } else {\r\n                this.data = new Uint8Array(size.x * size.y);\r\n                if (Uint8Array === Array && initialize) {\r\n                    ArrayHelper.init(this.data, 0);\r\n                }\r\n            }\r\n\r\n        } else {\r\n            this.data = data;\r\n        }\r\n        this.size = size;\r\n    }\r\n\r\n    /**\r\n     * tests if a position is within the image with a given offset\r\n     * @param imgRef {x, y} The location to test\r\n     * @param border Number the padding value in pixel\r\n     * @returns {Boolean} true if location inside the image\'s border, false otherwise\r\n     * @see cvd/image.h\r\n     */\r\n    ImageWrapper.prototype.inImageWithBorder = function(imgRef, border) {\r\n        return (imgRef.x >= border) && (imgRef.y >= border) && (imgRef.x < (this.size.x - border)) && (imgRef.y < (this.size.y - border));\r\n    };\r\n\r\n    /**\r\n     * Transforms an image according to the given affine-transformation matrix.\r\n     * @param inImg ImageWrapper a image containing the information to be extracted.\r\n     * @param outImg ImageWrapper the image to be filled.  The whole image out image is filled by the in image.\r\n     * @param M mat2 the matrix used to map point in the out matrix to those in the in matrix\r\n     * @param inOrig vec2 origin in the in image\r\n     * @param outOrig vec2 origin in the out image\r\n     * @returns Number the number of pixels not in the in image\r\n     * @see cvd/vision.h\r\n     */\r\n    ImageWrapper.transform = function(inImg, outImg, M, inOrig, outOrig) {\r\n        var w = outImg.size.x, h = outImg.size.y, iw = inImg.size.x, ih = inImg.size.y;\r\n        var across = vec2.create([M[0], M[2]]);\r\n        var down = vec2.create([M[1], M[3]]);\r\n        var defaultValue = 0;\r\n\r\n        var p0 = vec2.subtract(inOrig, mat2.xVec2(M, outOrig, vec2.create()), vec2.create());\r\n\r\n        var min_x = p0[0], min_y = p0[1];\r\n        var max_x = min_x, max_y = min_y;\r\n        var p, i, j;\r\n\r\n        var sampleFunc = ImageWrapper.sample;\r\n\r\n        if (across[0] < 0)\r\n            min_x += w * across[0];\r\n        else\r\n            max_x += w * across[0];\r\n\r\n        if (down[0] < 0)\r\n            min_x += h * down[0];\r\n        else\r\n            max_x += h * down[0];\r\n\r\n        if (across[1] < 0)\r\n            min_y += w * across[1];\r\n        else\r\n            max_y += w * across[1];\r\n\r\n        if (down[1] < 0)\r\n            min_y += h * down[1];\r\n        else\r\n            max_y += h * down[1];\r\n\r\n        var carrigeReturn = vec2.subtract(down, vec2.scale(across, w, vec2.create()), vec2.create());\r\n\r\n        if (min_x >= 0 && min_y >= 0 && max_x < iw - 1 && max_y < ih - 1) {\r\n            p = p0;\r\n            for ( i = 0; i < h; ++i, vec2.add(p, carrigeReturn))\r\n                for ( j = 0; j < w; ++j, vec2.add(p, across))\r\n                    outImg.set(j, i, sampleFunc(inImg, p[0], p[1]));\r\n            return 0;\r\n        } else {\r\n            var x_bound = iw - 1;\r\n            var y_bound = ih - 1;\r\n            var count = 0;\r\n            p = p0;\r\n            for ( i = 0; i < h; ++i, vec2.add(p, carrigeReturn)) {\r\n                for ( j = 0; j < w; ++j, vec2.add(p, across)) {\r\n                    if (0 <= p[0] && 0 <= p[1] && p[0] < x_bound && p[1] < y_bound) {\r\n                        outImg.set(j, i, sampleFunc(inImg, p[0], p[1]));\r\n                    } else {\r\n                        outImg.set(j, i, defaultValue); ++count;\r\n                    }\r\n                }\r\n            }\r\n            return count;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Performs bilinear sampling\r\n     * @param inImg Image to extract sample from\r\n     * @param x the x-coordinate\r\n     * @param y the y-coordinate\r\n     * @returns the sampled value\r\n     * @see cvd/vision.h\r\n     */\r\n    ImageWrapper.sample = function(inImg, x, y) {\r\n        var lx = Math.floor(x);\r\n        var ly = Math.floor(y);\r\n        var w = inImg.size.x;\r\n        var base = ly * inImg.size.x + lx;\r\n        var a = inImg.data[base + 0];\r\n        var b = inImg.data[base + 1];\r\n        var c = inImg.data[base + w];\r\n        var d = inImg.data[base + w + 1];\r\n        var e = a - b;\r\n        x -= lx;\r\n        y -= ly;\r\n\r\n        var result = Math.floor(x * (y * (e - c + d) - e) + y * (c - a) + a);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Initializes a given array. Sets each element to zero.\r\n     * @param array {Array} The array to initialize\r\n     */\r\n    ImageWrapper.clearArray = function(array) {\r\n        var l = array.length;\r\n        while (l--) {\r\n            array[l] = 0;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Creates a {SubImage} from the current image ({this}).\r\n     * @param from {ImageRef} The position where to start the {SubImage} from. (top-left corner)\r\n     * @param size {ImageRef} The size of the resulting image\r\n     * @returns {SubImage} A shared part of the original image\r\n     */\r\n    ImageWrapper.prototype.subImage = function(from, size) {\r\n        return new SubImage(from, size, this);\r\n    };\r\n\r\n    /**\r\n     * Creates an {ImageWrapper) and copies the needed underlying image-data area\r\n     * @param imageWrapper {ImageWrapper} The target {ImageWrapper} where the data should be copied\r\n     * @param from {ImageRef} The location where to copy from (top-left location)\r\n     */\r\n    ImageWrapper.prototype.subImageAsCopy = function(imageWrapper, from) {\r\n        var sizeY = imageWrapper.size.y, sizeX = imageWrapper.size.x;\r\n        var x, y;\r\n        for ( x = 0; x < sizeX; x++) {\r\n            for ( y = 0; y < sizeY; y++) {\r\n                imageWrapper.data[y * sizeX + x] = this.data[(from.y + y) * this.size.x + from.x + x];\r\n            }\r\n        }\r\n    };\r\n\r\n    ImageWrapper.prototype.copyTo = function(imageWrapper) {\r\n        var length = this.data.length, srcData = this.data, dstData = imageWrapper.data;\r\n\r\n        while (length--) {\r\n            dstData[length] = srcData[length];\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Retrieves a given pixel position from the image\r\n     * @param x {Number} The x-position\r\n     * @param y {Number} The y-position\r\n     * @returns {Number} The grayscale value at the pixel-position\r\n     */\r\n    ImageWrapper.prototype.get = function(x, y) {\r\n        return this.data[y * this.size.x + x];\r\n    };\r\n\r\n    /**\r\n     * Retrieves a given pixel position from the image\r\n     * @param x {Number} The x-position\r\n     * @param y {Number} The y-position\r\n     * @returns {Number} The grayscale value at the pixel-position\r\n     */\r\n    ImageWrapper.prototype.getSafe = function(x, y) {\r\n        var i;\r\n        \r\n        if (!this.indexMapping) {\r\n            this.indexMapping = {\r\n                x : [],\r\n                y : []\r\n            };\r\n            for (i = 0; i < this.size.x; i++) {\r\n                this.indexMapping.x[i] = i;\r\n                this.indexMapping.x[i + this.size.x] = i;\r\n            }\r\n            for (i = 0; i < this.size.y; i++) {\r\n                this.indexMapping.y[i] = i;\r\n                this.indexMapping.y[i + this.size.y] = i;\r\n            }\r\n        }\r\n        return this.data[(this.indexMapping.y[y + this.size.y]) * this.size.x + this.indexMapping.x[x + this.size.x]];\r\n    };\r\n\r\n    /**\r\n     * Sets a given pixel position in the image\r\n     * @param x {Number} The x-position\r\n     * @param y {Number} The y-position\r\n     * @param value {Number} The grayscale value to set\r\n     * @returns {ImageWrapper} The Image itself (for possible chaining)\r\n     */\r\n    ImageWrapper.prototype.set = function(x, y, value) {\r\n        this.data[y * this.size.x + x] = value;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Sets the border of the image (1 pixel) to zero\r\n     */\r\n    ImageWrapper.prototype.zeroBorder = function() {\r\n        var i, width = this.size.x, height = this.size.y, data = this.data;\r\n        for ( i = 0; i < width; i++) {\r\n            data[i] = data[(height - 1) * width + i] = 0;\r\n        }\r\n        for ( i = 1; i < height - 1; i++) {\r\n            data[i * width] = data[i * width + (width - 1)] = 0;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Inverts a binary image in place\r\n     */\r\n    ImageWrapper.prototype.invert = function() {\r\n        var data = this.data, length = data.length;\r\n\r\n        while (length--) {\r\n            data[length] = data[length] ? 0 : 1;\r\n        }\r\n\r\n    };\r\n\r\n    ImageWrapper.prototype.convolve = function(kernel) {\r\n        var x, y, kx, ky, kSize = (kernel.length / 2) | 0, accu = 0;\r\n        for ( y = 0; y < this.size.y; y++) {\r\n            for ( x = 0; x < this.size.x; x++) {\r\n                accu = 0;\r\n                for ( ky = -kSize; ky <= kSize; ky++) {\r\n                    for ( kx = -kSize; kx <= kSize; kx++) {\r\n                        accu += kernel[ky+kSize][kx + kSize] * this.getSafe(x + kx, y + ky);\r\n                    }\r\n                }\r\n                this.data[y * this.size.x + x] = accu;\r\n            }\r\n        }\r\n    };\r\n\r\n    ImageWrapper.prototype.moments = function(labelcount) {\r\n        var data = this.data,\r\n            x,\r\n            y,\r\n            height = this.size.y,\r\n            width = this.size.x,\r\n            val,\r\n            ysq,\r\n            labelsum = [],\r\n            i,\r\n            label,\r\n            mu11,\r\n            mu02,\r\n            mu20,\r\n            x_,\r\n            y_,\r\n            tmp,\r\n            result = [],\r\n            PI = Math.PI,\r\n            PI_4 = PI / 4;\r\n\r\n        if (labelcount <= 0) {\r\n            return result;\r\n        }\r\n\r\n        for ( i = 0; i < labelcount; i++) {\r\n            labelsum[i] = {\r\n                m00 : 0,\r\n                m01 : 0,\r\n                m10 : 0,\r\n                m11 : 0,\r\n                m02 : 0,\r\n                m20 : 0,\r\n                theta : 0,\r\n                rad : 0\r\n            };\r\n        }\r\n\r\n        for ( y = 0; y < height; y++) {\r\n            ysq = y * y;\r\n            for ( x = 0; x < width; x++) {\r\n                val = data[y * width + x];\r\n                if (val > 0) {\r\n                    label = labelsum[val - 1];\r\n                    label.m00 += 1;\r\n                    label.m01 += y;\r\n                    label.m10 += x;\r\n                    label.m11 += x * y;\r\n                    label.m02 += ysq;\r\n                    label.m20 += x * x;\r\n                }\r\n            }\r\n        }\r\n\r\n        for ( i = 0; i < labelcount; i++) {\r\n            label = labelsum[i];\r\n            if (!isNaN(label.m00) && label.m00 !== 0) {\r\n                x_ = label.m10 / label.m00;\r\n                y_ = label.m01 / label.m00;\r\n                mu11 = label.m11 / label.m00 - x_ * y_;\r\n                mu02 = label.m02 / label.m00 - y_ * y_;\r\n                mu20 = label.m20 / label.m00 - x_ * x_;\r\n                tmp = (mu02 - mu20) / (2 * mu11);\r\n                tmp = 0.5 * Math.atan(tmp) + (mu11 >= 0 ? PI_4 : -PI_4 ) + PI;\r\n                label.theta = (tmp * 180 / PI + 90) % 180 - 90;\r\n                if (label.theta < 0) {\r\n                    label.theta += 180;\r\n                }\r\n                label.rad = tmp > PI ? tmp - PI : tmp;\r\n                label.vec = vec2.create([Math.cos(tmp), Math.sin(tmp)]);\r\n                result.push(label);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Displays the {ImageWrapper} in a given canvas\r\n     * @param canvas {Canvas} The canvas element to write to\r\n     * @param scale {Number} Scale which is applied to each pixel-value\r\n     */\r\n    ImageWrapper.prototype.show = function(canvas, scale) {\r\n        var ctx,\r\n            frame,\r\n            data,\r\n            current,\r\n            pixel,\r\n            x,\r\n            y;\r\n        \r\n        if (!scale) {\r\n            scale = 1.0;\r\n        }\r\n        ctx = canvas.getContext(\'2d\');\r\n        canvas.width = this.size.x;\r\n        canvas.height = this.size.y;\r\n        frame = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        data = frame.data;\r\n        current = 0;\r\n        for (y = 0; y < this.size.y; y++) {\r\n            for (x = 0; x < this.size.x; x++) {\r\n                pixel = y * this.size.x + x;\r\n                current = this.get(x, y) * scale;\r\n                data[pixel * 4 + 0] = current;\r\n                data[pixel * 4 + 1] = current;\r\n                data[pixel * 4 + 2] = current;\r\n                data[pixel * 4 + 3] = 255;\r\n            }\r\n        }\r\n        //frame.data = data;\r\n        ctx.putImageData(frame, 0, 0);\r\n    };\r\n\r\n    /**\r\n     * Displays the {SubImage} in a given canvas\r\n     * @param canvas {Canvas} The canvas element to write to\r\n     * @param scale {Number} Scale which is applied to each pixel-value\r\n     */\r\n    ImageWrapper.prototype.overlay = function(canvas, scale, from) {\r\n        if (!scale || scale < 0 || scale > 360) {\r\n            scale = 360;\r\n        }\r\n        var hsv = [0, 1, 1];\r\n        var rgb = [0, 0, 0];\r\n        var whiteRgb = [255, 255, 255];\r\n        var blackRgb = [0, 0, 0];\r\n        var result = [];\r\n        var ctx = canvas.getContext(\'2d\');\r\n        var frame = ctx.getImageData(from.x, from.y, this.size.x, this.size.y);\r\n        var data = frame.data;\r\n        var length = this.data.length;\r\n        while (length--) {\r\n            hsv[0] = this.data[length] * scale;\r\n            result = hsv[0] <= 0 ? whiteRgb : hsv[0] >= 360 ? blackRgb : CVUtils.hsv2rgb(hsv, rgb);\r\n            data[length * 4 + 0] = result[0];\r\n            data[length * 4 + 1] = result[1];\r\n            data[length * 4 + 2] = result[2];\r\n            data[length * 4 + 3] = 255;\r\n        }\r\n        ctx.putImageData(frame, from.x, from.y);\r\n    };\r\n\r\n    return (ImageWrapper);\r\n}); \n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\n/**\r\n * http://www.codeproject.com/Tips/407172/Connected-Component-Labeling-and-Vectorization\r\n */\r\ndefine(\'tracer\',[],function() {\r\n    "use strict";\r\n    \r\n    var Tracer = {\r\n        searchDirections : [[0, 1], [1, 1], [1, 0], [1, -1], [0, -1], [-1, -1], [-1, 0], [-1, 1]],\r\n        create : function(imageWrapper, labelWrapper) {\r\n            var imageData = imageWrapper.data,\r\n                labelData = labelWrapper.data,\r\n                searchDirections = this.searchDirections,\r\n                width = imageWrapper.size.x,\r\n                pos;\r\n\r\n            function trace(current, color, label, edgelabel) {\r\n                var i,\r\n                    y,\r\n                    x;\r\n\r\n                for ( i = 0; i < 7; i++) {\r\n                    y = current.cy + searchDirections[current.dir][0];\r\n                    x = current.cx + searchDirections[current.dir][1];\r\n                    pos = y * width + x;\r\n                    if ((imageData[pos] === color) && ((labelData[pos] === 0) || (labelData[pos] === label))) {\r\n                        labelData[pos] = label;\r\n                        current.cy = y;\r\n                        current.cx = x;\r\n                        return true;\r\n                    } else {\r\n                        if (labelData[pos] === 0) {\r\n                            labelData[pos] = edgelabel;\r\n                        }\r\n                        current.dir = (current.dir + 1) % 8;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n\r\n            function vertex2D(x, y, dir) {\r\n                return {\r\n                    dir : dir,\r\n                    x : x,\r\n                    y : y,\r\n                    next : null,\r\n                    prev : null\r\n                };\r\n            }\r\n\r\n            function contourTracing(sy, sx, label, color, edgelabel) {\r\n                var Fv = null,\r\n                    Cv,\r\n                    P,\r\n                    ldir,\r\n                    current = {\r\n                        cx : sx,\r\n                        cy : sy,\r\n                        dir : 0\r\n                    };\r\n\r\n                if (trace(current, color, label, edgelabel)) {\r\n                    Fv = vertex2D(sx, sy, current.dir);\r\n                    Cv = Fv;\r\n                    ldir = current.dir;\r\n                    P = vertex2D(current.cx, current.cy, 0);\r\n                    P.prev = Cv;\r\n                    Cv.next = P;\r\n                    P.next = null;\r\n                    Cv = P;\r\n                    do {\r\n                        current.dir = (current.dir + 6) % 8;\r\n                        trace(current, color, label, edgelabel);\r\n                        if (ldir != current.dir) {\r\n                            Cv.dir = current.dir;\r\n                            P = vertex2D(current.cx, current.cy, 0);\r\n                            P.prev = Cv;\r\n                            Cv.next = P;\r\n                            P.next = null;\r\n                            Cv = P;\r\n                        } else {\r\n                            Cv.dir = ldir;\r\n                            Cv.x = current.cx;\r\n                            Cv.y = current.cy;\r\n                        }\r\n                        ldir = current.dir;\r\n                    } while(current.cx != sx || current.cy != sy);\r\n                    Fv.prev = Cv.prev;\r\n                    Cv.prev.next = Fv;\r\n                }\r\n                return Fv;\r\n            }\r\n\r\n            return {\r\n                trace : function(current, color, label, edgelabel) {\r\n                    return trace(current, color, label, edgelabel);\r\n                },\r\n                contourTracing : function(sy, sx, label, color, edgelabel) {\r\n                    return contourTracing(sy, sx, label, color, edgelabel);\r\n                }\r\n            };\r\n        }\r\n    };\r\n\r\n    return (Tracer);\r\n});\r\n\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\n/**\r\n * http://www.codeproject.com/Tips/407172/Connected-Component-Labeling-and-Vectorization\r\n */\r\ndefine(\'rasterizer\',["tracer"], function(Tracer) {\r\n    "use strict";\r\n\r\n    var Rasterizer = {\r\n        createContour2D : function() {\r\n            return {\r\n                dir : null,\r\n                index : null,\r\n                firstVertex : null,\r\n                insideContours : null,\r\n                nextpeer : null,\r\n                prevpeer : null\r\n            };\r\n        },\r\n        CONTOUR_DIR : {\r\n            CW_DIR : 0,\r\n            CCW_DIR : 1,\r\n            UNKNOWN_DIR : 2\r\n        },\r\n        DIR : {\r\n            OUTSIDE_EDGE : -32767,\r\n            INSIDE_EDGE : -32766\r\n        },\r\n        create : function(imageWrapper, labelWrapper) {\r\n            var imageData = imageWrapper.data,\r\n                labelData = labelWrapper.data,\r\n                width = imageWrapper.size.x,\r\n                height = imageWrapper.size.y,\r\n                tracer = Tracer.create(imageWrapper, labelWrapper);\r\n\r\n            return {\r\n                rasterize : function(depthlabel) {\r\n                    var color,\r\n                        bc,\r\n                        lc,\r\n                        labelindex,\r\n                        cx,\r\n                        cy,\r\n                        colorMap = [],\r\n                        vertex,\r\n                        p,\r\n                        cc,\r\n                        sc,\r\n                        pos,\r\n                        connectedCount = 0,\r\n                        i;\r\n\r\n                    for ( i = 0; i < 400; i++) {\r\n                        colorMap[i] = 0;\r\n                    }\r\n\r\n                    colorMap[0] = imageData[0];\r\n                    cc = null;\r\n                    for ( cy = 1; cy < height - 1; cy++) {\r\n                        labelindex = 0;\r\n                        bc = colorMap[0];\r\n                        for ( cx = 1; cx < width - 1; cx++) {\r\n                            pos = cy * width + cx;\r\n                            if (labelData[pos] === 0) {\r\n                                color = imageData[pos];\r\n                                if (color !== bc) {\r\n                                    if (labelindex === 0) {\r\n                                        lc = connectedCount + 1;\r\n                                        colorMap[lc] = color;\r\n                                        bc = color;\r\n                                        vertex = tracer.contourTracing(cy, cx, lc, color, Rasterizer.DIR.OUTSIDE_EDGE);\r\n                                        if (vertex !== null) {\r\n                                            connectedCount++;\r\n                                            labelindex = lc;\r\n                                            p = Rasterizer.createContour2D();\r\n                                            p.dir = Rasterizer.CONTOUR_DIR.CW_DIR;\r\n                                            p.index = labelindex;\r\n                                            p.firstVertex = vertex;\r\n                                            p.nextpeer = cc;\r\n                                            p.insideContours = null;\r\n                                            if (cc !== null) {\r\n                                                cc.prevpeer = p;\r\n                                            }\r\n                                            cc = p;\r\n                                        }\r\n                                    } else {\r\n                                        vertex = tracer.contourTracing(cy, cx, Rasterizer.DIR.INSIDE_EDGE, color, labelindex);\r\n                                        if (vertex !== null) {\r\n                                            p = Rasterizer.createContour2D();\r\n                                            p.firstVertex = vertex;\r\n                                            p.insideContours = null;\r\n                                            if (depthlabel === 0) {\r\n                                                p.dir = Rasterizer.CONTOUR_DIR.CCW_DIR;\r\n                                            } else {\r\n                                                p.dir = Rasterizer.CONTOUR_DIR.CW_DIR;\r\n                                            }\r\n                                            p.index = depthlabel;\r\n                                            sc = cc;\r\n                                            while ((sc !== null) && sc.index !== labelindex) {\r\n                                                sc = sc.nextpeer;\r\n                                            }\r\n                                            if (sc !== null) {\r\n                                                p.nextpeer = sc.insideContours;\r\n                                                if (sc.insideContours !== null) {\r\n                                                    sc.insideContours.prevpeer = p;\r\n                                                }\r\n                                                sc.insideContours = p;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    labelData[pos] = labelindex;\r\n                                }\r\n                            } else if (labelData[pos] === Rasterizer.DIR.OUTSIDE_EDGE || labelData[pos] === Rasterizer.DIR.INSIDE_EDGE) {\r\n                                labelindex = 0;\r\n                                if (labelData[pos] === Rasterizer.DIR.INSIDE_EDGE) {\r\n                                    bc = imageData[pos];\r\n                                } else {\r\n                                    bc = colorMap[0];\r\n                                }\r\n                            } else {\r\n                                labelindex = labelData[pos];\r\n                                bc = colorMap[labelindex];\r\n                            }\r\n                        }\r\n                    }\r\n                    sc = cc;\r\n                    while (sc !== null) {\r\n                        sc.index = depthlabel;\r\n                        sc = sc.nextpeer;\r\n                    }\r\n                    return {\r\n                        cc : cc,\r\n                        count : connectedCount\r\n                    };\r\n                },\r\n                debug: {\r\n                    drawContour : function(canvas, firstContour) {\r\n                        var ctx = canvas.getContext("2d"),\r\n                            pq = firstContour,\r\n                            iq,\r\n                            q,\r\n                            p;\r\n                            \r\n                        ctx.strokeStyle = "red";\r\n                        ctx.fillStyle = "red";\r\n                        ctx.lineWidth = 1;\r\n    \r\n                        if (pq !== null) {\r\n                            iq = pq.insideContours;\r\n                        } else {\r\n                            iq = null;\r\n                        }\r\n    \r\n                        while (pq !== null) {\r\n                            if (iq !== null) {\r\n                                q = iq;\r\n                                iq = iq.nextpeer;\r\n                            } else {\r\n                                q = pq;\r\n                                pq = pq.nextpeer;\r\n                                if (pq !== null) {\r\n                                    iq = pq.insideContours;\r\n                                } else {\r\n                                    iq = null;\r\n                                }\r\n                            }\r\n    \r\n                            switch(q.dir) {\r\n                            case Rasterizer.CONTOUR_DIR.CW_DIR:\r\n                                ctx.strokeStyle = "red";\r\n                                break;\r\n                            case Rasterizer.CONTOUR_DIR.CCW_DIR:\r\n                                ctx.strokeStyle = "blue";\r\n                                break;\r\n                            case Rasterizer.CONTOUR_DIR.UNKNOWN_DIR:\r\n                                ctx.strokeStyle = "green";\r\n                                break;\r\n                            }\r\n    \r\n                            p = q.firstVertex;\r\n                            ctx.beginPath();\r\n                            ctx.moveTo(p.x, p.y);\r\n                            do {\r\n                                p = p.next;\r\n                                ctx.lineTo(p.x, p.y);\r\n                            } while(p !== q.firstVertex);\r\n                            ctx.stroke();\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    };\r\n\r\n    return (Rasterizer);\r\n});\r\n\n/* jshint undef: true, unused: true, browser:true, devel: true, -W041: false */\r\n/* global define */\r\n\r\ndefine(\'skeletonizer\',[],function() {\r\n    "use strict";\r\n\r\n    /* @preserve ASM BEGIN */\r\n    function Skeletonizer(stdlib, foreign, buffer) {\r\n        "use asm";\r\n\r\n        var images = new stdlib.Uint8Array(buffer),\r\n            size = foreign.size | 0,\r\n            imul = stdlib.Math.imul;\r\n\r\n        function erode(inImagePtr, outImagePtr) {\r\n            inImagePtr = inImagePtr | 0;\r\n            outImagePtr = outImagePtr | 0;\r\n\r\n            var v = 0,\r\n                u = 0,\r\n                sum = 0,\r\n                yStart1 = 0,\r\n                yStart2 = 0,\r\n                xStart1 = 0,\r\n                xStart2 = 0,\r\n                offset = 0;\r\n\r\n            for ( v = 1; (v | 0) < ((size - 1) | 0); v = (v + 1) | 0) {\r\n                offset = (offset + size) | 0;\r\n                for ( u = 1; (u | 0) < ((size - 1) | 0); u = (u + 1) | 0) {\r\n                    yStart1 = (offset - size) | 0;\r\n                    yStart2 = (offset + size) | 0;\r\n                    xStart1 = (u - 1) | 0;\r\n                    xStart2 = (u + 1) | 0;\r\n                    sum = ((images[(inImagePtr + yStart1 + xStart1) | 0] | 0) + (images[(inImagePtr + yStart1 + xStart2) | 0] | 0) + (images[(inImagePtr + offset + u) | 0] | 0) + (images[(inImagePtr + yStart2 + xStart1) | 0] | 0) + (images[(inImagePtr + yStart2 + xStart2) | 0] | 0)) | 0;\r\n                    if ((sum | 0) == (5 | 0)) {\r\n                        images[(outImagePtr + offset + u) | 0] = 1;\r\n                    } else {\r\n                        images[(outImagePtr + offset + u) | 0] = 0;\r\n                    }\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        function subtract(aImagePtr, bImagePtr, outImagePtr) {\r\n            aImagePtr = aImagePtr | 0;\r\n            bImagePtr = bImagePtr | 0;\r\n            outImagePtr = outImagePtr | 0;\r\n\r\n            var length = 0;\r\n\r\n            length = imul(size, size) | 0;\r\n\r\n            while ((length | 0) > 0) {\r\n                length = (length - 1) | 0;\r\n                images[(outImagePtr + length) | 0] = ((images[(aImagePtr + length) | 0] | 0) - (images[(bImagePtr + length) | 0] | 0)) | 0;\r\n            }\r\n        }\r\n\r\n        function bitwiseOr(aImagePtr, bImagePtr, outImagePtr) {\r\n            aImagePtr = aImagePtr | 0;\r\n            bImagePtr = bImagePtr | 0;\r\n            outImagePtr = outImagePtr | 0;\r\n\r\n            var length = 0;\r\n\r\n            length = imul(size, size) | 0;\r\n\r\n            while ((length | 0) > 0) {\r\n                length = (length - 1) | 0;\r\n                images[(outImagePtr + length) | 0] = ((images[(aImagePtr + length) | 0] | 0) | (images[(bImagePtr + length) | 0] | 0)) | 0;\r\n            }\r\n        }\r\n\r\n        function countNonZero(imagePtr) {\r\n            imagePtr = imagePtr | 0;\r\n\r\n            var sum = 0,\r\n                length = 0;\r\n\r\n            length = imul(size, size) | 0;\r\n\r\n            while ((length | 0) > 0) {\r\n                length = (length - 1) | 0;\r\n                sum = ((sum | 0) + (images[(imagePtr + length) | 0] | 0)) | 0;\r\n            }\r\n\r\n            return (sum | 0);\r\n        }\r\n\r\n        function init(imagePtr, value) {\r\n            imagePtr = imagePtr | 0;\r\n            value = value | 0;\r\n\r\n            var length = 0;\r\n\r\n            length = imul(size, size) | 0;\r\n\r\n            while ((length | 0) > 0) {\r\n                length = (length - 1) | 0;\r\n                images[(imagePtr + length) | 0] = value;\r\n            }\r\n        }\r\n\r\n        function dilate(inImagePtr, outImagePtr) {\r\n            inImagePtr = inImagePtr | 0;\r\n            outImagePtr = outImagePtr | 0;\r\n\r\n            var v = 0,\r\n                u = 0,\r\n                sum = 0,\r\n                yStart1 = 0,\r\n                yStart2 = 0,\r\n                xStart1 = 0,\r\n                xStart2 = 0,\r\n                offset = 0;\r\n\r\n            for ( v = 1; (v | 0) < ((size - 1) | 0); v = (v + 1) | 0) {\r\n                offset = (offset + size) | 0;\r\n                for ( u = 1; (u | 0) < ((size - 1) | 0); u = (u + 1) | 0) {\r\n                    yStart1 = (offset - size) | 0;\r\n                    yStart2 = (offset + size) | 0;\r\n                    xStart1 = (u - 1) | 0;\r\n                    xStart2 = (u + 1) | 0;\r\n                    sum = ((images[(inImagePtr + yStart1 + xStart1) | 0] | 0) + (images[(inImagePtr + yStart1 + xStart2) | 0] | 0) + (images[(inImagePtr + offset + u) | 0] | 0) + (images[(inImagePtr + yStart2 + xStart1) | 0] | 0) + (images[(inImagePtr + yStart2 + xStart2) | 0] | 0)) | 0;\r\n                    if ((sum | 0) > (0 | 0)) {\r\n                        images[(outImagePtr + offset + u) | 0] = 1;\r\n                    } else {\r\n                        images[(outImagePtr + offset + u) | 0] = 0;\r\n                    }\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        function memcpy(srcImagePtr, dstImagePtr) {\r\n            srcImagePtr = srcImagePtr | 0;\r\n            dstImagePtr = dstImagePtr | 0;\r\n\r\n            var length = 0;\r\n\r\n            length = imul(size, size) | 0;\r\n\r\n            while ((length | 0) > 0) {\r\n                length = (length - 1) | 0;\r\n                images[(dstImagePtr + length) | 0] = (images[(srcImagePtr + length) | 0] | 0);\r\n            }\r\n        }\r\n\r\n        function zeroBorder(imagePtr) {\r\n            imagePtr = imagePtr | 0;\r\n\r\n            var x = 0,\r\n                y = 0;\r\n\r\n            for ( x = 0; (x | 0) < ((size - 1) | 0); x = (x + 1) | 0) {\r\n                images[(imagePtr + x) | 0] = 0;\r\n                images[(imagePtr + y) | 0] = 0;\r\n                y = ((y + size) - 1) | 0;\r\n                images[(imagePtr + y) | 0] = 0;\r\n                y = (y + 1) | 0;\r\n            }\r\n            for ( x = 0; (x | 0) < (size | 0); x = (x + 1) | 0) {\r\n                images[(imagePtr + y) | 0] = 0;\r\n                y = (y + 1) | 0;\r\n            }\r\n        }\r\n\r\n        function skeletonize() {\r\n            var subImagePtr = 0,\r\n                erodedImagePtr = 0,\r\n                tempImagePtr = 0,\r\n                skelImagePtr = 0,\r\n                sum = 0,\r\n                done = 0;\r\n                \r\n            erodedImagePtr = imul(size, size) | 0;\r\n            tempImagePtr = (erodedImagePtr + erodedImagePtr) | 0;\r\n            skelImagePtr = (tempImagePtr + erodedImagePtr) | 0;\r\n\r\n            // init skel-image\r\n            init(skelImagePtr, 0);\r\n            zeroBorder(subImagePtr);\r\n\r\n            do {\r\n                erode(subImagePtr, erodedImagePtr);\r\n                dilate(erodedImagePtr, tempImagePtr);\r\n                subtract(subImagePtr, tempImagePtr, tempImagePtr);\r\n                bitwiseOr(skelImagePtr, tempImagePtr, skelImagePtr);\r\n                memcpy(erodedImagePtr, subImagePtr);\r\n                sum = countNonZero(subImagePtr) | 0;\r\n                done = ((sum | 0) == 0 | 0);\r\n            } while(!done);\r\n        }\r\n\r\n        return {\r\n            skeletonize : skeletonize\r\n        };\r\n    }\r\n    /* @preserve ASM END */\r\n\r\n    return Skeletonizer;\r\n});\r\n\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\'image_debug\',[],function() {\r\n    "use strict";\r\n    \r\n    return {\r\n        drawRect: function(pos, size, ctx, style){\r\n            ctx.strokeStyle = style.color;\r\n            ctx.fillStyle = style.color;\r\n            ctx.lineWidth = 1;\r\n            ctx.beginPath();\r\n            ctx.strokeRect(pos.x, pos.y, size.x, size.y);\r\n        },\r\n        drawPath: function(path, def, ctx, style) {\r\n            ctx.strokeStyle = style.color;\r\n            ctx.fillStyle = style.color;\r\n            ctx.lineWidth = style.lineWidth;\r\n            ctx.beginPath();\r\n            ctx.moveTo(path[0][def.x], path[0][def.y]);\r\n            for (var j = 1; j < path.length; j++) {\r\n                ctx.lineTo(path[j][def.x], path[j][def.y]);\r\n            }\r\n            ctx.closePath();\r\n            ctx.stroke();\r\n        },\r\n        drawImage: function(imageData, size, ctx) {\r\n            var canvasData = ctx.getImageData(0, 0, size.x, size.y),\r\n                data = canvasData.data,\r\n                imageDataPos = imageData.length,\r\n                canvasDataPos = data.length,\r\n                value;\r\n\r\n            if (canvasDataPos/imageDataPos !== 4) {\r\n                return false;\r\n            }\r\n            while(imageDataPos--){\r\n                value = imageData[imageDataPos];\r\n                data[--canvasDataPos] = 255;\r\n                data[--canvasDataPos] = value;\r\n                data[--canvasDataPos] = value;\r\n                data[--canvasDataPos] = value;\r\n            }\r\n            ctx.putImageData(canvasData, 0, 0);\r\n            return true;\r\n        }\r\n    };\r\n    \r\n});\r\n\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define, mat2, vec2 */\r\n\r\ndefine("barcode_locator", ["image_wrapper", "cv_utils", "rasterizer", "tracer", "skeletonizer", "array_helper", "image_debug"],\r\nfunction(ImageWrapper, CVUtils, Rasterizer, Tracer, skeletonizer, ArrayHelper, ImageDebug) {\r\n\r\n    var _config,\r\n        _currentImageWrapper,\r\n        _skelImageWrapper,\r\n        _subImageWrapper,\r\n        _labelImageWrapper,\r\n        _patchGrid,\r\n        _patchLabelGrid,\r\n        _imageToPatchGrid,\r\n        _binaryImageWrapper,\r\n        _patchSize,\r\n        _canvasContainer = {\r\n            ctx : {\r\n                binary : null\r\n            },\r\n            dom : {\r\n                binary : null\r\n            }\r\n        },\r\n        _numPatches = {x: 0, y: 0},\r\n        _inputImageWrapper,\r\n        _skeletonizer,\r\n        self = this;\r\n\r\n    function initBuffers() {\r\n        var skeletonImageData;\r\n        \r\n        if (_config.halfSample) {\r\n            _currentImageWrapper = new ImageWrapper({\r\n                x : _inputImageWrapper.size.x / 2 | 0,\r\n                y : _inputImageWrapper.size.y / 2 | 0\r\n            });\r\n        } else {\r\n            _currentImageWrapper = _inputImageWrapper;\r\n        }\r\n\r\n        _patchSize = CVUtils.calculatePatchSize(_config.patchSize, _currentImageWrapper.size);\r\n\r\n        _numPatches.x = _currentImageWrapper.size.x / _patchSize.x | 0;\r\n        _numPatches.y = _currentImageWrapper.size.y / _patchSize.y | 0;\r\n\r\n        _binaryImageWrapper = new ImageWrapper(_currentImageWrapper.size, undefined, Uint8Array, false);\r\n\r\n        _labelImageWrapper = new ImageWrapper(_patchSize, undefined, Array, true);\r\n\r\n        skeletonImageData = new ArrayBuffer(64*1024);\r\n        _subImageWrapper = new ImageWrapper(_patchSize, new Uint8Array(skeletonImageData, 0, _patchSize.x * _patchSize.y));\r\n        _skelImageWrapper = new ImageWrapper(_patchSize, new Uint8Array(skeletonImageData, _patchSize.x * _patchSize.y * 3, _patchSize.x * _patchSize.y), undefined, true);\r\n        _skeletonizer = skeletonizer(self, {\r\n            size : _patchSize.x\r\n        }, skeletonImageData);\r\n\r\n        _imageToPatchGrid = new ImageWrapper({\r\n            x : (_currentImageWrapper.size.x / _subImageWrapper.size.x) | 0,\r\n            y : (_currentImageWrapper.size.y / _subImageWrapper.size.y) | 0\r\n        }, undefined, Array, true);\r\n        _patchGrid = new ImageWrapper(_imageToPatchGrid.size, undefined, undefined, true);\r\n        _patchLabelGrid = new ImageWrapper(_imageToPatchGrid.size, undefined, Int32Array, true);\r\n    }\r\n\r\n    function initCanvas() {\r\n        if (_config.useWorker || typeof document === \'undefined\') {\r\n            return;\r\n        }\r\n        _canvasContainer.dom.binary = document.createElement("canvas");\r\n        _canvasContainer.dom.binary.className = "binaryBuffer";\r\n        if (_config.showCanvas === true) {\r\n            document.querySelector("#debug").appendChild(_canvasContainer.dom.binary);\r\n        }\r\n        _canvasContainer.ctx.binary = _canvasContainer.dom.binary.getContext("2d");\r\n        _canvasContainer.dom.binary.width = _binaryImageWrapper.size.x;\r\n        _canvasContainer.dom.binary.height = _binaryImageWrapper.size.y;\r\n    }\r\n\r\n    /**\r\n     * Creates a bounding box which encloses all the given patches\r\n     * @returns {Array} The minimal bounding box \r\n     */\r\n    function boxFromPatches(patches) {\r\n        var overAvg, i, j, patch, transMat, minx = _binaryImageWrapper.size.x, miny = _binaryImageWrapper.size.y, maxx = -_binaryImageWrapper.size.x, maxy = -_binaryImageWrapper.size.y, box, scale;\r\n\r\n        // draw all patches which are to be taken into consideration\r\n        overAvg = 0;\r\n        for ( i = 0; i < patches.length; i++) {\r\n            patch = patches[i];\r\n            overAvg += patch.rad;\r\n            if (_config.showPatches) {\r\n                ImageDebug.drawRect(patch.pos, _subImageWrapper.size, _canvasContainer.ctx.binary, {color: "red"});\r\n            }\r\n        }\r\n\r\n        overAvg /= patches.length;\r\n        overAvg = (overAvg * 180 / Math.PI + 90) % 180 - 90;\r\n        if (overAvg < 0) {\r\n            overAvg += 180;\r\n        }\r\n\r\n        //console.log(overAvg);\r\n        overAvg = (180 - overAvg) * Math.PI / 180;\r\n        transMat = mat2.create([Math.cos(overAvg), -Math.sin(overAvg), Math.sin(overAvg), Math.cos(overAvg)]);\r\n\r\n        // iterate over patches and rotate by angle\r\n        for ( i = 0; i < patches.length; i++) {\r\n            patch = patches[i];\r\n            for ( j = 0; j < 4; j++) {\r\n                mat2.xVec2(transMat, patch.box[j]);\r\n            }\r\n\r\n            if (_config.boxFromPatches.showTransformed) {\r\n                ImageDebug.drawPath(patch.box, {x: 0, y: 1}, _canvasContainer.ctx.binary, {color: \'#99ff00\', lineWidth: 2});\r\n            }\r\n        }\r\n\r\n        // find bounding box\r\n        for ( i = 0; i < patches.length; i++) {\r\n            patch = patches[i];\r\n            for ( j = 0; j < 4; j++) {\r\n                if (patch.box[j][0] < minx) {\r\n                    minx = patch.box[j][0];\r\n                }\r\n                if (patch.box[j][0] > maxx) {\r\n                    maxx = patch.box[j][0];\r\n                }\r\n                if (patch.box[j][1] < miny) {\r\n                    miny = patch.box[j][1];\r\n                }\r\n                if (patch.box[j][1] > maxy) {\r\n                    maxy = patch.box[j][1];\r\n                }\r\n            }\r\n        }\r\n\r\n        box = [[minx, miny], [maxx, miny], [maxx, maxy], [minx, maxy]];\r\n\r\n        if (_config.boxFromPatches.showTransformedBox) {\r\n            ImageDebug.drawPath(box, {x: 0, y: 1}, _canvasContainer.ctx.binary, {color: \'#ff0000\', lineWidth: 2});\r\n        }\r\n\r\n        scale = _config.halfSample ? 2 : 1;\r\n        // reverse rotation;\r\n        transMat = mat2.inverse(transMat);\r\n        for ( j = 0; j < 4; j++) {\r\n            mat2.xVec2(transMat, box[j]);\r\n        }\r\n\r\n        if (_config.boxFromPatches.showBB) {\r\n            ImageDebug.drawPath(box, {x: 0, y: 1}, _canvasContainer.ctx.binary, {color: \'#ff0000\', lineWidth: 2});\r\n        }\r\n        \r\n        for ( j = 0; j < 4; j++) {\r\n            vec2.scale(box[j], scale);\r\n        }\r\n\r\n        return box;\r\n    }\r\n\r\n    /**\r\n     * Creates a binary image of the current image\r\n     */\r\n    function binarizeImage() {\r\n        CVUtils.otsuThreshold(_currentImageWrapper, _binaryImageWrapper);\r\n        _binaryImageWrapper.zeroBorder();\r\n        if (_config.showCanvas) {\r\n            _binaryImageWrapper.show(_canvasContainer.dom.binary, 255);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Iterate over the entire image\r\n     * extract patches\r\n     */\r\n    function findPatches() {\r\n        var i,\r\n            j,\r\n            x,\r\n            y,\r\n            moments,\r\n            patchesFound = [],\r\n            rasterizer,\r\n            rasterResult,\r\n            patch;\r\n        for ( i = 0; i < _numPatches.x; i++) {\r\n            for ( j = 0; j < _numPatches.y; j++) {\r\n\r\n                x = _subImageWrapper.size.x * i;\r\n                y = _subImageWrapper.size.y * j;\r\n\r\n                // seperate parts\r\n                skeletonize(x, y);\r\n\r\n                // Rasterize, find individual bars\r\n                _skelImageWrapper.zeroBorder();\r\n                ArrayHelper.init(_labelImageWrapper.data, 0);\r\n                rasterizer = Rasterizer.create(_skelImageWrapper, _labelImageWrapper);\r\n                rasterResult = rasterizer.rasterize(0);\r\n\r\n                if (_config.showLabels) {\r\n                    _labelImageWrapper.overlay(_canvasContainer.dom.binary, Math.floor(360 / rasterResult.count), {x : x, y : y});\r\n                }\r\n\r\n                // calculate moments from the skeletonized patch\r\n                moments = _labelImageWrapper.moments(rasterResult.count);\r\n\r\n                // extract eligible patches\r\n                patchesFound = patchesFound.concat(describePatch(moments, [i, j], x, y));\r\n            }\r\n        }\r\n        \r\n        if (_config.showFoundPatches) {\r\n            for ( i = 0; i < patchesFound.length; i++) {\r\n                patch = patchesFound[i];\r\n                ImageDebug.drawRect(patch.pos, _subImageWrapper.size, _canvasContainer.ctx.binary, {color: "#99ff00", lineWidth: 2});\r\n            }\r\n        }\r\n        \r\n        return patchesFound;\r\n    }\r\n    \r\n    /**\r\n     * Finds those connected areas which contain at least 6 patches\r\n     * and returns them ordered DESC by the number of contained patches\r\n     * @param {Number} maxLabel \r\n     */\r\n    function findBiggestConnectedAreas(maxLabel){\r\n        var i,\r\n            sum,\r\n            labelHist = [],\r\n            topLabels = [];\r\n            \r\n        for ( i = 0; i < maxLabel; i++) {\r\n            labelHist.push(0);\r\n        }\r\n        sum = _patchLabelGrid.data.length;\r\n        while (sum--) {\r\n            if (_patchLabelGrid.data[sum] > 0) {\r\n                labelHist[_patchLabelGrid.data[sum] - 1]++;\r\n            }\r\n        }\r\n\r\n        labelHist = labelHist.map(function(val, idx) {\r\n            return {\r\n                val : val,\r\n                label : idx + 1\r\n            };\r\n        });\r\n\r\n        labelHist.sort(function(a, b) {\r\n            return b.val - a.val;\r\n        });\r\n\r\n        // extract top areas with at least 6 patches present\r\n        topLabels = labelHist.filter(function(el) {\r\n            return el.val >= 5;\r\n        });\r\n        \r\n        return topLabels;\r\n    }\r\n    \r\n    /**\r\n     * \r\n     */\r\n    function findBoxes(topLabels, maxLabel) {\r\n        var i,\r\n            j,\r\n            sum,\r\n            patches = [],\r\n            patch,\r\n            box,\r\n            boxes = [],\r\n            hsv = [0, 1, 1],\r\n            rgb = [0, 0, 0];\r\n            \r\n        for ( i = 0; i < topLabels.length; i++) {\r\n            sum = _patchLabelGrid.data.length;\r\n            patches.length = 0;\r\n            while (sum--) {\r\n                if (_patchLabelGrid.data[sum] === topLabels[i].label) {\r\n                    patch = _imageToPatchGrid.data[sum];\r\n                    patches.push(patch);\r\n                }\r\n            }\r\n            box = boxFromPatches(patches);\r\n            if (box) {\r\n                boxes.push(box);\r\n\r\n                // draw patch-labels if requested\r\n                if (_config.showRemainingPatchLabels) {\r\n                    for ( j = 0; j < patches.length; j++) {\r\n                        patch = patches[j];\r\n                        hsv[0] = (topLabels[i].label / (maxLabel + 1)) * 360;\r\n                        CVUtils.hsv2rgb(hsv, rgb);\r\n                        ImageDebug.drawRect(patch.pos, _subImageWrapper.size, _canvasContainer.ctx.binary, {color: "rgb(" + rgb.join(",") + ")", lineWidth: 2});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return boxes;\r\n    }\r\n\r\n    /**\r\n     * Find similar moments (via cluster)\r\n     * @param {Object} moments\r\n     */\r\n    function similarMoments(moments) {\r\n        var clusters = CVUtils.cluster(moments, 0.90);\r\n        var topCluster = CVUtils.topGeneric(clusters, 1, function(e) {\r\n            return e.getPoints().length;\r\n        });\r\n        var points = [], result = [];\r\n        if (topCluster.length === 1) {\r\n            points = topCluster[0].item.getPoints();\r\n            for (var i = 0; i < points.length; i++) {\r\n                result.push(points[i].point);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function skeletonize(x, y) {\r\n        _binaryImageWrapper.subImageAsCopy(_subImageWrapper, CVUtils.imageRef(x, y));\r\n        _skeletonizer.skeletonize();\r\n        \r\n        // Show skeleton if requested\r\n        if (_config.showSkeleton) {\r\n            _skelImageWrapper.overlay(_canvasContainer.dom.binary, 360, CVUtils.imageRef(x, y));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Extracts and describes those patches which seem to contain a barcode pattern\r\n     * @param {Array} moments\r\n     * @param {Object} patchPos,\r\n     * @param {Number} x\r\n     * @param {Number} y\r\n     * @returns {Array} list of patches\r\n     */\r\n    function describePatch(moments, patchPos, x, y) {\r\n        var k,\r\n            avg,\r\n            sum = 0,\r\n            eligibleMoments = [],\r\n            matchingMoments,\r\n            patch,\r\n            patchesFound = [],\r\n            minComponentWeight = Math.ceil(_patchSize.x/3);\r\n\r\n        if (moments.length >= 2) {\r\n            // only collect moments which\'s area covers at least minComponentWeight pixels.\r\n            for ( k = 0; k < moments.length; k++) {\r\n                if (moments[k].m00 > minComponentWeight) {\r\n                    eligibleMoments.push(moments[k]);\r\n                }\r\n            }\r\n\r\n            // if at least 2 moments are found which have at least minComponentWeights covered\r\n            if (eligibleMoments.length >= 2) {\r\n                sum = eligibleMoments.length;\r\n                matchingMoments = similarMoments(eligibleMoments);\r\n                avg = 0;\r\n                // determine the similarity of the moments\r\n                for ( k = 0; k < matchingMoments.length; k++) {\r\n                    avg += matchingMoments[k].rad;\r\n                }\r\n\r\n                // Only two of the moments are allowed not to fit into the equation\r\n                // add the patch to the set\r\n                if (matchingMoments.length > 1 && matchingMoments.length >= (eligibleMoments.length / 4) * 3 && matchingMoments.length > moments.length / 4) {\r\n                    avg /= matchingMoments.length;\r\n                    patch = {\r\n                        index : patchPos[1] * _numPatches.x + patchPos[0],\r\n                        pos : {\r\n                            x : x,\r\n                            y : y\r\n                        },\r\n                        box : [vec2.create([x, y]), vec2.create([x + _subImageWrapper.size.x, y]), vec2.create([x + _subImageWrapper.size.x, y + _subImageWrapper.size.y]), vec2.create([x, y + _subImageWrapper.size.y])],\r\n                        moments : matchingMoments,\r\n                        rad : avg,\r\n                        vec : vec2.create([Math.cos(avg), Math.sin(avg)])\r\n                    };\r\n                    patchesFound.push(patch);\r\n                }\r\n            }\r\n        }\r\n        return patchesFound;\r\n    }\r\n\r\n    /**\r\n     * finds patches which are connected and share the same orientation\r\n     * @param {Object} patchesFound\r\n     */\r\n    function rasterizeAngularSimilarity(patchesFound) {\r\n        var label = 0,\r\n            threshold = 0.95,\r\n            currIdx = 0,\r\n            j,\r\n            patch,\r\n            hsv = [0, 1, 1],\r\n            rgb = [0, 0, 0];\r\n\r\n        function notYetProcessed() {\r\n            var i;\r\n            for ( i = 0; i < _patchLabelGrid.data.length; i++) {\r\n                if (_patchLabelGrid.data[i] === 0 && _patchGrid.data[i] === 1) {\r\n                    return i;\r\n                }\r\n            }\r\n            return _patchLabelGrid.length;\r\n        }\r\n\r\n        function trace(currentIdx) {\r\n            var x, y, currentPatch, patch, idx, dir, current = {\r\n                x : currentIdx % _patchLabelGrid.size.x,\r\n                y : (currentIdx / _patchLabelGrid.size.x) | 0\r\n            }, similarity;\r\n\r\n            if (currentIdx < _patchLabelGrid.data.length) {\r\n                currentPatch = _imageToPatchGrid.data[currentIdx];\r\n                // assign label\r\n                _patchLabelGrid.data[currentIdx] = label;\r\n                for ( dir = 0; dir < Tracer.searchDirections.length; dir++) {\r\n                    y = current.y + Tracer.searchDirections[dir][0];\r\n                    x = current.x + Tracer.searchDirections[dir][1];\r\n                    idx = y * _patchLabelGrid.size.x + x;\r\n\r\n                    // continue if patch empty\r\n                    if (_patchGrid.data[idx] === 0) {\r\n                        _patchLabelGrid.data[idx] = Number.MAX_VALUE;\r\n                        continue;\r\n                    }\r\n\r\n                    patch = _imageToPatchGrid.data[idx];\r\n                    if (_patchLabelGrid.data[idx] === 0) {\r\n                        similarity = Math.abs(vec2.dot(patch.vec, currentPatch.vec));\r\n                        if (similarity > threshold) {\r\n                            trace(idx);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        // prepare for finding the right patches\r\n        ArrayHelper.init(_patchGrid.data, 0);\r\n        ArrayHelper.init(_patchLabelGrid.data, 0);\r\n        ArrayHelper.init(_imageToPatchGrid.data, null);\r\n\r\n        for ( j = 0; j < patchesFound.length; j++) {\r\n            patch = patchesFound[j];\r\n            _imageToPatchGrid.data[patch.index] = patch;\r\n            _patchGrid.data[patch.index] = 1;\r\n        }\r\n\r\n        // rasterize the patches found to determine area\r\n        _patchGrid.zeroBorder();\r\n\r\n        while (( currIdx = notYetProcessed()) < _patchLabelGrid.data.length) {\r\n            label++;\r\n            trace(currIdx);\r\n        }\r\n        \r\n        // draw patch-labels if requested\r\n        if (_config.showPatchLabels) {\r\n            for ( j = 0; j < _patchLabelGrid.data.length; j++) {\r\n                if (_patchLabelGrid.data[j] > 0 && _patchLabelGrid.data[j] <= label) {\r\n                    patch = _imageToPatchGrid.data[j];\r\n                    hsv[0] = (_patchLabelGrid.data[j] / (label + 1)) * 360;\r\n                    CVUtils.hsv2rgb(hsv, rgb);\r\n                    ImageDebug.drawRect(patch.pos, _subImageWrapper.size, _canvasContainer.ctx.binary, {color: "rgb(" + rgb.join(",") + ")", lineWidth: 2});\r\n                }\r\n            }\r\n        }\r\n        \r\n        return label;\r\n    }\r\n\r\n    return {\r\n        init : function(inputImageWrapper, config) {\r\n            _config = config;\r\n            _inputImageWrapper = inputImageWrapper;\r\n\r\n            initBuffers();\r\n            initCanvas();\r\n        },\r\n\r\n        locate : function() {\r\n            var patchesFound,\r\n            topLabels,\r\n            boxes;\r\n\r\n            if (_config.halfSample) {\r\n                CVUtils.halfSample(_inputImageWrapper, _currentImageWrapper);\r\n            }\r\n\r\n            binarizeImage();\r\n            patchesFound = findPatches();\r\n            // return unless 5% or more patches are found\r\n            if (patchesFound.length < _numPatches.x * _numPatches.y * 0.05) {\r\n                return null;\r\n            }\r\n\r\n            // rasterrize area by comparing angular similarity;\r\n            var maxLabel = rasterizeAngularSimilarity(patchesFound);\r\n            if (maxLabel < 1) {\r\n                return null;\r\n            }\r\n\r\n            // search for area with the most patches (biggest connected area)\r\n            topLabels = findBiggestConnectedAreas(maxLabel);\r\n            if (topLabels.length === 0) {\r\n                return null;\r\n            }\r\n\r\n            boxes = findBoxes(topLabels, maxLabel);\r\n            return boxes;\r\n        },\r\n\r\n        checkImageConstraints: function(inputStream, config) {\r\n            var patchSize,\r\n                width = inputStream.getWidth(),\r\n                height = inputStream.getHeight(),\r\n                halfSample = config.halfSample ? 0.5 : 1,\r\n                size,\r\n                area;\r\n\r\n            // calculate width and height based on area\r\n            if (inputStream.getConfig().area) {\r\n                area = CVUtils.computeImageArea(width, height, inputStream.getConfig().area);\r\n                inputStream.setTopRight({x: area.sx, y: area.sy});\r\n                inputStream.setCanvasSize({x: width, y: height});\r\n                width = area.sw;\r\n                height = area.sh;\r\n            }\r\n\r\n            size = {\r\n                x: Math.floor(width * halfSample),\r\n                y: Math.floor(height * halfSample)\r\n            };\r\n\r\n            patchSize = CVUtils.calculatePatchSize(config.patchSize, size);\r\n            console.log("Patch-Size: " + JSON.stringify(patchSize));\r\n\r\n            inputStream.setWidth(Math.floor(Math.floor(size.x/patchSize.x)*(1/halfSample)*patchSize.x));\r\n            inputStream.setHeight(Math.floor(Math.floor(size.y/patchSize.y)*(1/halfSample)*patchSize.y));\r\n\r\n            if ((inputStream.getWidth() % patchSize.x) === 0 && (inputStream.getHeight() % patchSize.y) === 0) {\r\n                return true;\r\n            }\r\n\r\n            throw new Error("Image dimensions do not comply with the current settings: Width (" +\r\n                width + " )and height (" + height +\r\n                ") must a multiple of " + patchSize.x);\r\n        }\r\n    };\r\n});\r\n\r\n\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\'bresenham\',["cv_utils", "image_wrapper"], function(CVUtils, ImageWrapper) {\r\n    "use strict";\r\n    var Bresenham = {};\r\n\r\n    var Slope = {\r\n        DIR : {\r\n            UP : 1,\r\n            DOWN : -1\r\n        }\r\n    };\r\n    /**\r\n     * Scans a line of the given image from point p1 to p2 and returns a result object containing \r\n     * gray-scale values (0-255) of the underlying pixels in addition to the min\r\n     * and max values.\r\n     * @param {Object} imageWrapper\r\n     * @param {Object} p1 The start point {x,y}\r\n     * @param {Object} p2 The end point {x,y}\r\n     * @returns {line, min, max}\r\n     */\r\n    Bresenham.getBarcodeLine = function(imageWrapper, p1, p2) {\r\n        var x0 = p1.x | 0,\r\n            y0 = p1.y | 0,\r\n            x1 = p2.x | 0,\r\n            y1 = p2.y | 0,\r\n            steep = Math.abs(y1 - y0) > Math.abs(x1 - x0),\r\n            deltax,\r\n            deltay,\r\n            error,\r\n            ystep,\r\n            y,\r\n            tmp,\r\n            x,\r\n            line = [],\r\n            imageData = imageWrapper.data,\r\n            width = imageWrapper.size.x,\r\n            sum = 0,\r\n            val,\r\n            min = 255,\r\n            max = 0;\r\n\r\n        function read(a, b) {\r\n            val = imageData[b * width + a];\r\n            sum += val;\r\n            min = val < min ? val : min;\r\n            max = val > max ? val : max;\r\n            line.push(val);\r\n        }\r\n\r\n        if (steep) {\r\n            tmp = x0;\r\n            x0 = y0;\r\n            y0 = tmp;\r\n\r\n            tmp = x1;\r\n            x1 = y1;\r\n            y1 = tmp;\r\n        }\r\n        if (x0 > x1) {\r\n            tmp = x0;\r\n            x0 = x1;\r\n            x1 = tmp;\r\n\r\n            tmp = y0;\r\n            y0 = y1;\r\n            y1 = tmp;\r\n        }\r\n        deltax = x1 - x0;\r\n        deltay = Math.abs(y1 - y0);\r\n        error = (deltax / 2) | 0;\r\n        y = y0;\r\n        ystep = y0 < y1 ? 1 : -1;\r\n        for ( x = x0; x < x1; x++) {\r\n            if(steep){\r\n                read(y, x);\r\n            } else {\r\n                read(x, y);\r\n            }\r\n            error = error - deltay;\r\n            if (error < 0) {\r\n                y = y + ystep;\r\n                error = error + deltax;\r\n            }\r\n        }\r\n\r\n        return {\r\n            line : line,\r\n            min : min,\r\n            max : max\r\n        };\r\n    };\r\n\r\n    Bresenham.toOtsuBinaryLine = function(result) {\r\n        var line = result.line,\r\n            image = new ImageWrapper({x: line.length - 1, y: 1}, line),\r\n            threshold = CVUtils.determineOtsuThreshold(image, 5);\r\n\r\n        line = CVUtils.sharpenLine(line);\r\n        CVUtils.thresholdImage(image, threshold);\r\n\r\n        return {\r\n            line: line,\r\n            threshold: threshold\r\n        };\r\n    };\r\n    \r\n    /**\r\n     * Converts the result from getBarcodeLine into a binary representation \r\n     * also considering the frequency and slope of the signal for more robust results\r\n     * @param {Object} result {line, min, max}\r\n     */\r\n    Bresenham.toBinaryLine = function(result) {\r\n\r\n        var min = result.min,\r\n            max = result.max,\r\n            line = result.line,\r\n            slope,\r\n            slope2,\r\n            center = min + (max - min) / 2,\r\n            extrema = [],\r\n            currentDir,\r\n            dir,\r\n            threshold = (max - min) / 12,\r\n            rThreshold = -threshold,\r\n            i,\r\n            j;\r\n\r\n        // 1. find extrema\r\n        currentDir = line[0] > center ? Slope.DIR.UP : Slope.DIR.DOWN;\r\n        extrema.push({\r\n            pos : 0,\r\n            val : line[0]\r\n        });\r\n        for ( i = 0; i < line.length - 2; i++) {\r\n            slope = (line[i + 1] - line[i]);\r\n            slope2 = (line[i + 2] - line[i + 1]);\r\n            if ((slope + slope2) < rThreshold && line[i + 1] < (center*1.5)) {\r\n                dir = Slope.DIR.DOWN;\r\n            } else if ((slope + slope2) > threshold && line[i + 1] > (center*0.5)) {\r\n                dir = Slope.DIR.UP;\r\n            } else {\r\n                dir = currentDir;\r\n            }\r\n\r\n            if (currentDir !== dir) {\r\n                extrema.push({\r\n                    pos : i,\r\n                    val : line[i]\r\n                });\r\n                currentDir = dir;\r\n            }\r\n        }\r\n        extrema.push({\r\n            pos : line.length,\r\n            val : line[line.length - 1]\r\n        });\r\n\r\n        for ( j = extrema[0].pos; j < extrema[1].pos; j++) {\r\n            line[j] = line[j] > center ? 0 : 1;\r\n        }\r\n\r\n        // iterate over extrema and convert to binary based on avg between minmax\r\n        for ( i = 1; i < extrema.length - 1; i++) {\r\n            if (extrema[i + 1].val > extrema[i].val) {\r\n                threshold = (extrema[i].val + ((extrema[i + 1].val - extrema[i].val) / 3) * 2) | 0;\r\n            } else {\r\n                threshold = (extrema[i + 1].val + ((extrema[i].val - extrema[i + 1].val) / 3)) | 0;\r\n            }\r\n\r\n            for ( j = extrema[i].pos; j < extrema[i + 1].pos; j++) {\r\n                line[j] = line[j] > threshold ? 0 : 1;\r\n            }\r\n        }\r\n\r\n        return {\r\n            line : line,\r\n            threshold : threshold\r\n        };\r\n    };\r\n    \r\n    /**\r\n     * Used for development only \r\n     */\r\n    Bresenham.debug = {\r\n        printFrequency: function(line, canvas) {\r\n            var i,\r\n                ctx = canvas.getContext("2d");\r\n            canvas.width = line.length;\r\n            canvas.height = 256;\r\n    \r\n            ctx.beginPath();\r\n            ctx.strokeStyle = "blue";\r\n            for ( i = 0; i < line.length; i++) {\r\n                ctx.moveTo(i, 255);\r\n                ctx.lineTo(i, 255 - line[i]);\r\n            }\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n        },\r\n        \r\n        printPattern: function(line, canvas) {\r\n            var ctx = canvas.getContext("2d"), i;\r\n    \r\n            canvas.width = line.length;\r\n            ctx.fillColor = "black";\r\n            for ( i = 0; i < line.length; i++) {\r\n                if (line[i] === 1) {\r\n                    ctx.fillRect(i, 0, 1, 100);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (Bresenham);\r\n}); \n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\r\n    \'barcode_reader\',[],function() {\r\n        "use strict";\r\n        \r\n        function BarcodeReader(config) {\r\n            this._row = [];\r\n            this.config = config || {};\r\n            return this;\r\n        }\r\n        \r\n        BarcodeReader.prototype._nextUnset = function(line, start) {\r\n            var i;\r\n            \r\n            if (start === undefined) {\r\n                start = 0;\r\n            }\r\n            for (i = start; i < line.length; i++) {\r\n                if (!line[i]) {\r\n                    return i;\r\n                }\r\n            }\r\n            return line.length;\r\n        };\r\n        \r\n        BarcodeReader.prototype._matchPattern = function(counter, code) {\r\n            var i,\r\n                error = 0,\r\n                singleError = 0,\r\n                modulo = this.MODULO,\r\n                maxSingleError = this.SINGLE_CODE_ERROR || 1;\r\n                \r\n            for (i = 0; i < counter.length; i++) {\r\n                singleError = Math.abs(code[i] - counter[i]);\r\n                if (singleError > maxSingleError) {\r\n                    return Number.MAX_VALUE;\r\n                }\r\n                error += singleError;\r\n            }\r\n            return error/modulo;\r\n        };\r\n\r\n        BarcodeReader.prototype._nextSet = function(line, offset) {\r\n            var i;\r\n\r\n            offset = offset || 0;\r\n            for (i = offset; i < line.length; i++) {\r\n                if (line[i]) {\r\n                    return i;\r\n                }\r\n            }\r\n            return line.length;\r\n        };\r\n\r\n        BarcodeReader.prototype._normalize = function(counter, modulo) {\r\n            var i,\r\n                self = this,\r\n                sum = 0,\r\n                ratio,\r\n                numOnes = 0,\r\n                normalized = [],\r\n                norm = 0;\r\n                \r\n            if (!modulo) {\r\n                modulo = self.MODULO;\r\n            }\r\n            for (i = 0; i < counter.length; i++) {\r\n                if (counter[i] === 1) {\r\n                    numOnes++;\r\n                } else {\r\n                    sum += counter[i];\r\n                }\r\n            }\r\n            ratio = sum / (modulo - numOnes);\r\n            if (ratio > 1.0) {\r\n                for (i = 0; i < counter.length; i++) {\r\n                    norm = counter[i] === 1 ? counter[i] : counter[i] / ratio;\r\n                    normalized.push(norm);\r\n                }\r\n            } else {\r\n                ratio = (sum + numOnes)/modulo;\r\n                for (i = 0; i < counter.length; i++) {\r\n                    norm = counter[i] / ratio;\r\n                    normalized.push(norm);\r\n                }\r\n            }\r\n            return normalized;\r\n        };\r\n\r\n        BarcodeReader.prototype._matchTrace = function(cmpCounter, epsilon) {\r\n            var counter = [],\r\n                i,\r\n                self = this,\r\n                offset = self._nextSet(self._row),\r\n                isWhite = !self._row[offset],\r\n                counterPos = 0,\r\n                bestMatch = {\r\n                    error : Number.MAX_VALUE,\r\n                    code : -1,\r\n                    start : 0\r\n                },\r\n                error;\r\n\r\n            if (cmpCounter) {\r\n                for ( i = 0; i < cmpCounter.length; i++) {\r\n                    counter.push(0);\r\n                }\r\n                for ( i = offset; i < self._row.length; i++) {\r\n                    if (self._row[i] ^ isWhite) {\r\n                        counter[counterPos]++;\r\n                    } else {\r\n                        if (counterPos === counter.length - 1) {\r\n                            error = self._matchPattern(counter, cmpCounter);\r\n\r\n                            if (error < epsilon) {\r\n                                bestMatch.start = i - offset;\r\n                                bestMatch.end = i;\r\n                                bestMatch.counter = counter;\r\n                                return bestMatch;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        } else {\r\n                            counterPos++;\r\n                        }\r\n                        counter[counterPos] = 1;\r\n                        isWhite = !isWhite;\r\n                    }\r\n                }\r\n            } else {\r\n                counter.push(0);\r\n                for ( i = offset; i < self._row.length; i++) {\r\n                    if (self._row[i] ^ isWhite) {\r\n                        counter[counterPos]++;\r\n                    } else {\r\n                        counterPos++;\r\n                        counter.push(0);\r\n                        counter[counterPos] = 1;\r\n                        isWhite = !isWhite;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // if cmpCounter was not given\r\n            bestMatch.start = offset;\r\n            bestMatch.end = self._row.length - 1;\r\n            bestMatch.counter = counter;\r\n            return bestMatch;\r\n        };\r\n        \r\n        BarcodeReader.prototype.decodePattern = function(pattern) {\r\n            var self = this,\r\n                result;\r\n            \r\n            self._row = pattern;\r\n            result = self._decode();\r\n            if (result === null) {\r\n                self._row.reverse();\r\n                result = self._decode();\r\n                if (result) {\r\n                    result.direction = BarcodeReader.DIRECTION.REVERSE;\r\n                    result.start = self._row.length - result.start;\r\n                    result.end = self._row.length - result.end;\r\n                }\r\n            } else {\r\n                result.direction = BarcodeReader.DIRECTION.FORWARD;\r\n            }\r\n            if (result) {\r\n                result.format = self.FORMAT;\r\n            }\r\n            return result;\r\n        };\r\n\r\n        BarcodeReader.prototype._matchRange = function(start, end, value) {\r\n            var i;\r\n\r\n            start = start < 0 ? 0 : start;\r\n            for (i = start; i < end; i++) {\r\n                if (this._row[i] !== value) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n\r\n        BarcodeReader.prototype._fillCounters = function(offset, end, isWhite) {\r\n            var self = this,\r\n                counterPos = 0,\r\n                i,\r\n                counters = [];\r\n\r\n            isWhite = (typeof isWhite !== \'undefined\') ? isWhite : true;\r\n            offset = (typeof offset !== \'undefined\') ? offset : self._nextUnset(self._row);\r\n            end = end || self._row.length;\r\n\r\n            counters[counterPos] = 0;\r\n            for (i = offset; i < end; i++) {\r\n                if (self._row[i] ^ isWhite) {\r\n                    counters[counterPos]++;\r\n                } else {\r\n                    counterPos++;\r\n                    counters[counterPos] = 1;\r\n                    isWhite = !isWhite;\r\n                }\r\n            }\r\n            return counters;\r\n        };\r\n\r\n        Object.defineProperty(BarcodeReader.prototype, "FORMAT", {\r\n            value: \'unknown\',\r\n            writeable: false\r\n        });\r\n        \r\n        BarcodeReader.DIRECTION = {\r\n            FORWARD : 1,\r\n            REVERSE : -1\r\n        };\r\n        \r\n        BarcodeReader.Exception = {\r\n            StartNotFoundException : "Start-Info was not found!",\r\n            CodeNotFoundException : "Code could not be found!",\r\n            PatternNotFoundException : "Pattern could not be found!"\r\n        };\r\n\r\n        BarcodeReader.CONFIG_KEYS = {};\r\n        \r\n        return (BarcodeReader);\r\n    }\r\n);\r\n\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\r\n     \'code_128_reader\',[\r\n        "./barcode_reader"\r\n    ],\r\n    function(BarcodeReader) {\r\n        "use strict";\r\n        \r\n        function Code128Reader() {\r\n            BarcodeReader.call(this);\r\n        }\r\n        \r\n        var properties = {\r\n            CODE_SHIFT : {value: 98},\r\n            CODE_C : {value: 99},\r\n            CODE_B : {value: 100},\r\n            CODE_A : {value: 101},\r\n            START_CODE_A : {value: 103},\r\n            START_CODE_B : {value: 104},\r\n            START_CODE_C : {value: 105},\r\n            STOP_CODE : {value: 106},\r\n            MODULO : {value: 11},\r\n            CODE_PATTERN : {value: [\r\n                [2, 1, 2, 2, 2, 2],\r\n                [2, 2, 2, 1, 2, 2],\r\n                [2, 2, 2, 2, 2, 1],\r\n                [1, 2, 1, 2, 2, 3],\r\n                [1, 2, 1, 3, 2, 2],\r\n                [1, 3, 1, 2, 2, 2],\r\n                [1, 2, 2, 2, 1, 3],\r\n                [1, 2, 2, 3, 1, 2],\r\n                [1, 3, 2, 2, 1, 2],\r\n                [2, 2, 1, 2, 1, 3],\r\n                [2, 2, 1, 3, 1, 2],\r\n                [2, 3, 1, 2, 1, 2],\r\n                [1, 1, 2, 2, 3, 2],\r\n                [1, 2, 2, 1, 3, 2],\r\n                [1, 2, 2, 2, 3, 1],\r\n                [1, 1, 3, 2, 2, 2],\r\n                [1, 2, 3, 1, 2, 2],\r\n                [1, 2, 3, 2, 2, 1],\r\n                [2, 2, 3, 2, 1, 1],\r\n                [2, 2, 1, 1, 3, 2],\r\n                [2, 2, 1, 2, 3, 1],\r\n                [2, 1, 3, 2, 1, 2],\r\n                [2, 2, 3, 1, 1, 2],\r\n                [3, 1, 2, 1, 3, 1],\r\n                [3, 1, 1, 2, 2, 2],\r\n                [3, 2, 1, 1, 2, 2],\r\n                [3, 2, 1, 2, 2, 1],\r\n                [3, 1, 2, 2, 1, 2],\r\n                [3, 2, 2, 1, 1, 2],\r\n                [3, 2, 2, 2, 1, 1],\r\n                [2, 1, 2, 1, 2, 3],\r\n                [2, 1, 2, 3, 2, 1],\r\n                [2, 3, 2, 1, 2, 1],\r\n                [1, 1, 1, 3, 2, 3],\r\n                [1, 3, 1, 1, 2, 3],\r\n                [1, 3, 1, 3, 2, 1],\r\n                [1, 1, 2, 3, 1, 3],\r\n                [1, 3, 2, 1, 1, 3],\r\n                [1, 3, 2, 3, 1, 1],\r\n                [2, 1, 1, 3, 1, 3],\r\n                [2, 3, 1, 1, 1, 3],\r\n                [2, 3, 1, 3, 1, 1],\r\n                [1, 1, 2, 1, 3, 3],\r\n                [1, 1, 2, 3, 3, 1],\r\n                [1, 3, 2, 1, 3, 1],\r\n                [1, 1, 3, 1, 2, 3],\r\n                [1, 1, 3, 3, 2, 1],\r\n                [1, 3, 3, 1, 2, 1],\r\n                [3, 1, 3, 1, 2, 1],\r\n                [2, 1, 1, 3, 3, 1],\r\n                [2, 3, 1, 1, 3, 1],\r\n                [2, 1, 3, 1, 1, 3],\r\n                [2, 1, 3, 3, 1, 1],\r\n                [2, 1, 3, 1, 3, 1],\r\n                [3, 1, 1, 1, 2, 3],\r\n                [3, 1, 1, 3, 2, 1],\r\n                [3, 3, 1, 1, 2, 1],\r\n                [3, 1, 2, 1, 1, 3],\r\n                [3, 1, 2, 3, 1, 1],\r\n                [3, 3, 2, 1, 1, 1],\r\n                [3, 1, 4, 1, 1, 1],\r\n                [2, 2, 1, 4, 1, 1],\r\n                [4, 3, 1, 1, 1, 1],\r\n                [1, 1, 1, 2, 2, 4],\r\n                [1, 1, 1, 4, 2, 2],\r\n                [1, 2, 1, 1, 2, 4],\r\n                [1, 2, 1, 4, 2, 1],\r\n                [1, 4, 1, 1, 2, 2],\r\n                [1, 4, 1, 2, 2, 1],\r\n                [1, 1, 2, 2, 1, 4],\r\n                [1, 1, 2, 4, 1, 2],\r\n                [1, 2, 2, 1, 1, 4],\r\n                [1, 2, 2, 4, 1, 1],\r\n                [1, 4, 2, 1, 1, 2],\r\n                [1, 4, 2, 2, 1, 1],\r\n                [2, 4, 1, 2, 1, 1],\r\n                [2, 2, 1, 1, 1, 4],\r\n                [4, 1, 3, 1, 1, 1],\r\n                [2, 4, 1, 1, 1, 2],\r\n                [1, 3, 4, 1, 1, 1],\r\n                [1, 1, 1, 2, 4, 2],\r\n                [1, 2, 1, 1, 4, 2],\r\n                [1, 2, 1, 2, 4, 1],\r\n                [1, 1, 4, 2, 1, 2],\r\n                [1, 2, 4, 1, 1, 2],\r\n                [1, 2, 4, 2, 1, 1],\r\n                [4, 1, 1, 2, 1, 2],\r\n                [4, 2, 1, 1, 1, 2],\r\n                [4, 2, 1, 2, 1, 1],\r\n                [2, 1, 2, 1, 4, 1],\r\n                [2, 1, 4, 1, 2, 1],\r\n                [4, 1, 2, 1, 2, 1],\r\n                [1, 1, 1, 1, 4, 3],\r\n                [1, 1, 1, 3, 4, 1],\r\n                [1, 3, 1, 1, 4, 1],\r\n                [1, 1, 4, 1, 1, 3],\r\n                [1, 1, 4, 3, 1, 1],\r\n                [4, 1, 1, 1, 1, 3],\r\n                [4, 1, 1, 3, 1, 1],\r\n                [1, 1, 3, 1, 4, 1],\r\n                [1, 1, 4, 1, 3, 1],\r\n                [3, 1, 1, 1, 4, 1],\r\n                [4, 1, 1, 1, 3, 1],\r\n                [2, 1, 1, 4, 1, 2],\r\n                [2, 1, 1, 2, 1, 4],\r\n                [2, 1, 1, 2, 3, 2],\r\n                [2, 3, 3, 1, 1, 1, 2]\r\n            ]},\r\n            SINGLE_CODE_ERROR: {value: 1},\r\n            AVG_CODE_ERROR: {value: 0.5},\r\n            FORMAT: {value: "code_128", writeable: false}\r\n        };\r\n        \r\n        Code128Reader.prototype = Object.create(BarcodeReader.prototype, properties);\r\n        Code128Reader.prototype.constructor = Code128Reader;\r\n        \r\n        Code128Reader.prototype._decodeCode = function(start) {\r\n            var counter = [0, 0, 0, 0, 0, 0],\r\n                i,\r\n                self = this,\r\n                offset = start,\r\n                isWhite = !self._row[offset],\r\n                counterPos = 0,\r\n                bestMatch = {\r\n                    error : Number.MAX_VALUE,\r\n                    code : -1,\r\n                    start : start,\r\n                    end : start\r\n                },\r\n                code,\r\n                error,\r\n                normalized;\r\n\r\n            for ( i = offset; i < self._row.length; i++) {\r\n                if (self._row[i] ^ isWhite) {\r\n                    counter[counterPos]++;\r\n                } else {\r\n                    if (counterPos === counter.length - 1) {\r\n                        normalized = self._normalize(counter);\r\n                        if (normalized) {\r\n                            for (code = 0; code < self.CODE_PATTERN.length; code++) {\r\n                                error = self._matchPattern(normalized, self.CODE_PATTERN[code]);\r\n                                if (error < bestMatch.error) {\r\n                                    bestMatch.code = code;\r\n                                    bestMatch.error = error;\r\n                                }\r\n                            }\r\n                            bestMatch.end = i;\r\n                            return bestMatch;\r\n                        }\r\n                    } else {\r\n                        counterPos++;\r\n                    }\r\n                    counter[counterPos] = 1;\r\n                    isWhite = !isWhite;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Code128Reader.prototype._findStart = function() {\r\n            var counter = [0, 0, 0, 0, 0, 0],\r\n                i,\r\n                self = this,\r\n                offset = self._nextSet(self._row),\r\n                isWhite = false,\r\n                counterPos = 0,\r\n                bestMatch = {\r\n                    error : Number.MAX_VALUE,\r\n                    code : -1,\r\n                    start : 0,\r\n                    end : 0\r\n                },\r\n                code,\r\n                error,\r\n                j,\r\n                sum,\r\n                normalized;\r\n                \r\n            for ( i = offset; i < self._row.length; i++) {\r\n                if (self._row[i] ^ isWhite) {\r\n                    counter[counterPos]++;\r\n                } else {\r\n                    if (counterPos === counter.length - 1) {\r\n                        sum = 0;\r\n                        for ( j = 0; j < counter.length; j++) {\r\n                            sum += counter[j];\r\n                        }\r\n                        normalized = self._normalize(counter);\r\n                        if (normalized) {\r\n                            for (code = self.START_CODE_A; code <= self.START_CODE_C; code++) {\r\n                                error = self._matchPattern(normalized, self.CODE_PATTERN[code]);\r\n                                if (error < bestMatch.error) {\r\n                                    bestMatch.code = code;\r\n                                    bestMatch.error = error;\r\n                                }\r\n                            }\r\n                            if (bestMatch.error < self.AVG_CODE_ERROR) {\r\n                                bestMatch.start = i - sum;\r\n                                bestMatch.end = i;\r\n                                return bestMatch;\r\n                            }\r\n                        }\r\n\r\n                        for ( j = 0; j < 4; j++) {\r\n                            counter[j] = counter[j + 2];\r\n                        }\r\n                        counter[4] = 0;\r\n                        counter[5] = 0;\r\n                        counterPos--;\r\n                    } else {\r\n                        counterPos++;\r\n                    }\r\n                    counter[counterPos] = 1;\r\n                    isWhite = !isWhite;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Code128Reader.prototype._decode = function() {\r\n            var self = this,\r\n                startInfo = self._findStart(),\r\n                code = null,\r\n                done = false,\r\n                result = [],\r\n                multiplier = 0,\r\n                checksum = 0,\r\n                codeset,\r\n                rawResult = [],\r\n                decodedCodes = [],\r\n                shiftNext = false,\r\n                unshift,\r\n                lastCharacterWasPrintable;\r\n\r\n            if (startInfo === null) {\r\n                return null;\r\n            }\r\n            code = {\r\n                code : startInfo.code,\r\n                start : startInfo.start,\r\n                end : startInfo.end\r\n            };\r\n            decodedCodes.push(code);\r\n            checksum = code.code;\r\n            switch(code.code) {\r\n            case self.START_CODE_A:\r\n                codeset = self.CODE_A;\r\n                break;\r\n            case self.START_CODE_B:\r\n                codeset = self.CODE_B;\r\n                break;\r\n            case self.START_CODE_C:\r\n                codeset = self.CODE_C;\r\n                break;\r\n            default:\r\n                return null;\r\n            }\r\n\r\n            while (!done) {\r\n                unshift = shiftNext;\r\n                shiftNext = false;\r\n                code = self._decodeCode(code.end);\r\n                if (code !== null) {\r\n                    if (code.code !== self.STOP_CODE) {\r\n                        rawResult.push(code.code);\r\n                        multiplier++;\r\n                        checksum += multiplier * code.code;\r\n                    }\r\n                    decodedCodes.push(code);\r\n\r\n                    switch(codeset) {\r\n                    case self.CODE_A:\r\n                        if (code.code < 64) {\r\n                            result.push(String.fromCharCode(32 + code.code));\r\n                        } else if (code.code < 96) {\r\n                            result.push(String.fromCharCode(code.code - 64));\r\n                        } else {\r\n                            switch (code.code) {\r\n                            case self.CODE_SHIFT:\r\n                                shiftNext = true;\r\n                                codeset = self.CODE_B;\r\n                                break;\r\n                            case self.CODE_B:\r\n                                codeset = self.CODE_B;\r\n                                break;\r\n                            case self.CODE_C:\r\n                                codeset = self.CODE_C;\r\n                                break;\r\n                            case self.STOP_CODE:\r\n                                done = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case self.CODE_B:\r\n                        if (code.code < 96) {\r\n                            result.push(String.fromCharCode(32 + code.code));\r\n                        } else {\r\n                            if (code.code != self.STOP_CODE) {\r\n                                lastCharacterWasPrintable = false;\r\n                            }\r\n                            switch (code.code) {\r\n                            case self.CODE_SHIFT:\r\n                                shiftNext = true;\r\n                                codeset = self.CODE_A;\r\n                                break;\r\n                            case self.CODE_A:\r\n                                codeset = self.CODE_A;\r\n                                break;\r\n                            case self.CODE_C:\r\n                                codeset = self.CODE_C;\r\n                                break;\r\n                            case self.STOP_CODE:\r\n                                done = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case self.CODE_C:\r\n                        if (code.code < 100) {\r\n                            result.push(code.code < 10 ? "0" + code.code : code.code);\r\n                        }\r\n                        switch (code.code) {\r\n                        case self.CODE_A:\r\n                            codeset = self.CODE_A;\r\n                            break;\r\n                        case self.CODE_B:\r\n                            codeset = self.CODE_B;\r\n                            break;\r\n                        case self.STOP_CODE:\r\n                            done = true;\r\n                            break;\r\n                        }\r\n                        break;\r\n                    }\r\n                } else {\r\n                    done = true;\r\n                }\r\n                if (unshift) {\r\n                    codeset = codeset == self.CODE_A ? self.CODE_B : self.CODE_A;\r\n                }\r\n            }\r\n\r\n            if (code === null) {\r\n                return null;\r\n            }\r\n\r\n            // find end bar\r\n            code.end = self._nextUnset(self._row, code.end);\r\n            if(!self._verifyTrailingWhitespace(code)){\r\n                return null;\r\n            }\r\n\r\n            // checksum\r\n            // Does not work correctly yet!!! startcode - endcode?\r\n            checksum -= multiplier * rawResult[rawResult.length - 1];\r\n            if (checksum % 103 != rawResult[rawResult.length - 1]) {\r\n                return null;\r\n            }\r\n\r\n            if (!result.length) {\r\n                return null;\r\n            }\r\n\r\n            // remove last code from result (checksum)\r\n            result.splice(result.length - 1, 1);\r\n\r\n\r\n\r\n            return {\r\n                code : result.join(""),\r\n                start : startInfo.start,\r\n                end : code.end,\r\n                codeset : codeset,\r\n                startInfo : startInfo,\r\n                decodedCodes : decodedCodes,\r\n                endInfo : code\r\n            };\r\n        };\r\n\r\n\r\n        BarcodeReader.prototype._verifyTrailingWhitespace = function(endInfo) {\r\n            var self = this,\r\n                trailingWhitespaceEnd;\r\n\r\n            trailingWhitespaceEnd = endInfo.end + ((endInfo.end - endInfo.start) / 2);\r\n            if (trailingWhitespaceEnd < self._row.length) {\r\n                if (self._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\r\n                    return endInfo;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        \r\n        return (Code128Reader);\r\n    }\r\n);\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\r\n     \'ean_reader\',[\r\n        "./barcode_reader"\r\n    ],\r\n    function(BarcodeReader) {\r\n        "use strict";\r\n        \r\n        function EANReader(opts) {\r\n            BarcodeReader.call(this, opts);\r\n        }\r\n        \r\n        var properties = {\r\n            CODE_L_START : {value: 0},\r\n            MODULO : {value: 7},\r\n            CODE_G_START : {value: 10},\r\n            START_PATTERN : {value: [1 / 3 * 7, 1 / 3 * 7, 1 / 3 * 7]},\r\n            STOP_PATTERN : {value: [1 / 3 * 7, 1 / 3 * 7, 1 / 3 * 7]},\r\n            MIDDLE_PATTERN : {value: [1 / 5 * 7, 1 / 5 * 7, 1 / 5 * 7, 1 / 5 * 7, 1 / 5 * 7]},\r\n            CODE_PATTERN : {value: [\r\n                [3, 2, 1, 1],\r\n                [2, 2, 2, 1],\r\n                [2, 1, 2, 2],\r\n                [1, 4, 1, 1],\r\n                [1, 1, 3, 2],\r\n                [1, 2, 3, 1],\r\n                [1, 1, 1, 4],\r\n                [1, 3, 1, 2],\r\n                [1, 2, 1, 3],\r\n                [3, 1, 1, 2],\r\n                [1, 1, 2, 3],\r\n                [1, 2, 2, 2],\r\n                [2, 2, 1, 2],\r\n                [1, 1, 4, 1],\r\n                [2, 3, 1, 1],\r\n                [1, 3, 2, 1],\r\n                [4, 1, 1, 1],\r\n                [2, 1, 3, 1],\r\n                [3, 1, 2, 1],\r\n                [2, 1, 1, 3]\r\n            ]},\r\n            CODE_FREQUENCY : {value: [0, 11, 13, 14, 19, 25, 28, 21, 22, 26]},\r\n            SINGLE_CODE_ERROR: {value: 0.67},\r\n            AVG_CODE_ERROR: {value: 0.27},\r\n            FORMAT: {value: "ean_13", writeable: false}\r\n        };\r\n        \r\n        EANReader.prototype = Object.create(BarcodeReader.prototype, properties);\r\n        EANReader.prototype.constructor = EANReader;\r\n        \r\n        EANReader.prototype._decodeCode = function(start, coderange) {\r\n            var counter = [0, 0, 0, 0],\r\n                i,\r\n                self = this,\r\n                offset = start,\r\n                isWhite = !self._row[offset],\r\n                counterPos = 0,\r\n                bestMatch = {\r\n                    error : Number.MAX_VALUE,\r\n                    code : -1,\r\n                    start : start,\r\n                    end : start\r\n                },\r\n                code,\r\n                error,\r\n                normalized;\r\n\r\n            if (!coderange) {\r\n                coderange = self.CODE_PATTERN.length;\r\n            }\r\n\r\n            for ( i = offset; i < self._row.length; i++) {\r\n                if (self._row[i] ^ isWhite) {\r\n                    counter[counterPos]++;\r\n                } else {\r\n                    if (counterPos === counter.length - 1) {\r\n                        normalized = self._normalize(counter);\r\n                        if (normalized) {\r\n                            for (code = 0; code < coderange; code++) {\r\n                                error = self._matchPattern(normalized, self.CODE_PATTERN[code]);\r\n                                if (error < bestMatch.error) {\r\n                                    bestMatch.code = code;\r\n                                    bestMatch.error = error;\r\n                                }\r\n                            }\r\n                            bestMatch.end = i;\r\n                            if (bestMatch.error > self.AVG_CODE_ERROR) {\r\n                                return null;\r\n                            }\r\n                            return bestMatch;\r\n                        }\r\n                    } else {\r\n                        counterPos++;\r\n                    }\r\n                    counter[counterPos] = 1;\r\n                    isWhite = !isWhite;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        EANReader.prototype._findPattern = function(pattern, offset, isWhite, tryHarder, epsilon) {\r\n            var counter = [],\r\n                self = this,\r\n                i,\r\n                counterPos = 0,\r\n                bestMatch = {\r\n                    error : Number.MAX_VALUE,\r\n                    code : -1,\r\n                    start : 0,\r\n                    end : 0\r\n                },\r\n                error,\r\n                j,\r\n                sum,\r\n                normalized;\r\n\r\n            if (!offset) {\r\n                offset = self._nextSet(self._row);\r\n            }\r\n\r\n            if (isWhite === undefined) {\r\n                isWhite = false;\r\n            }\r\n\r\n            if (tryHarder === undefined) {\r\n                tryHarder = true;\r\n            }\r\n\r\n            if ( epsilon === undefined) {\r\n                epsilon = self.AVG_CODE_ERROR;\r\n            }\r\n\r\n            for ( i = 0; i < pattern.length; i++) {\r\n                counter[i] = 0;\r\n            }\r\n\r\n            for ( i = offset; i < self._row.length; i++) {\r\n                if (self._row[i] ^ isWhite) {\r\n                    counter[counterPos]++;\r\n                } else {\r\n                    if (counterPos === counter.length - 1) {\r\n                        sum = 0;\r\n                        for ( j = 0; j < counter.length; j++) {\r\n                            sum += counter[j];\r\n                        }\r\n                        normalized = self._normalize(counter);\r\n                        if (normalized) {\r\n                            error = self._matchPattern(normalized, pattern);\r\n\r\n                            if (error < epsilon) {\r\n                                bestMatch.error = error;\r\n                                bestMatch.start = i - sum;\r\n                                bestMatch.end = i;\r\n                                return bestMatch;\r\n                            }\r\n                        }\r\n                        if (tryHarder) {\r\n                            for ( j = 0; j < counter.length - 2; j++) {\r\n                                counter[j] = counter[j + 2];\r\n                            }\r\n                            counter[counter.length - 2] = 0;\r\n                            counter[counter.length - 1] = 0;\r\n                            counterPos--;\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    } else {\r\n                        counterPos++;\r\n                    }\r\n                    counter[counterPos] = 1;\r\n                    isWhite = !isWhite;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        EANReader.prototype._findStart = function() {\r\n            var self = this,\r\n                leadingWhitespaceStart,\r\n                offset = self._nextSet(self._row),\r\n                startInfo;\r\n\r\n            while(!startInfo) {\r\n                startInfo = self._findPattern(self.START_PATTERN, offset);\r\n                if (!startInfo) {\r\n                    return null;\r\n                }\r\n                leadingWhitespaceStart = startInfo.start - (startInfo.end - startInfo.start);\r\n                if (leadingWhitespaceStart >= 0) {\r\n                    if (self._matchRange(leadingWhitespaceStart, startInfo.start, 0)) {\r\n                        return startInfo;\r\n                    }\r\n                }\r\n                offset = startInfo.end;\r\n                startInfo = null;\r\n            }\r\n        };\r\n\r\n        EANReader.prototype._verifyTrailingWhitespace = function(endInfo) {\r\n            var self = this,\r\n                trailingWhitespaceEnd;\r\n\r\n            trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start);\r\n            if (trailingWhitespaceEnd < self._row.length) {\r\n                if (self._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\r\n                    return endInfo;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        EANReader.prototype._findEnd = function(offset, isWhite) {\r\n            var self = this,\r\n                endInfo = self._findPattern(self.STOP_PATTERN, offset, isWhite, false);\r\n\r\n            return endInfo !== null ? self._verifyTrailingWhitespace(endInfo) : null;\r\n        };\r\n\r\n        EANReader.prototype._calculateFirstDigit = function(codeFrequency) {\r\n            var i,\r\n                self = this;\r\n\r\n            for ( i = 0; i < self.CODE_FREQUENCY.length; i++) {\r\n                if (codeFrequency === self.CODE_FREQUENCY[i]) {\r\n                    return i;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        EANReader.prototype._decodePayload = function(code, result, decodedCodes) {\r\n            var i,\r\n                self = this,\r\n                codeFrequency = 0x0,\r\n                firstDigit;\r\n\r\n            for ( i = 0; i < 6; i++) {\r\n                code = self._decodeCode(code.end);\r\n                if (!code) {\r\n                    return null;\r\n                }\r\n                if (code.code >= self.CODE_G_START) {\r\n                    code.code = code.code - self.CODE_G_START;\r\n                    codeFrequency |= 1 << (5 - i);\r\n                } else {\r\n                    codeFrequency |= 0 << (5 - i);\r\n                }\r\n                result.push(code.code);\r\n                decodedCodes.push(code);\r\n            }\r\n\r\n            firstDigit = self._calculateFirstDigit(codeFrequency);\r\n            if (firstDigit === null) {\r\n                return null;\r\n            }\r\n            result.unshift(firstDigit);\r\n\r\n            code = self._findPattern(self.MIDDLE_PATTERN, code.end, true, false);\r\n            if (code === null) {\r\n                return null;\r\n            }\r\n            decodedCodes.push(code);\r\n\r\n            for ( i = 0; i < 6; i++) {\r\n                code = self._decodeCode(code.end, self.CODE_G_START);\r\n                if (!code) {\r\n                    return null;\r\n                }\r\n                decodedCodes.push(code);\r\n                result.push(code.code);\r\n            }\r\n\r\n            return code;\r\n        };\r\n\r\n        EANReader.prototype._decode = function() {\r\n            var startInfo,\r\n                self = this,\r\n                code,\r\n                result = [],\r\n                decodedCodes = [];\r\n\r\n            startInfo = self._findStart();\r\n            if (!startInfo) {\r\n                return null;\r\n            }\r\n            code = {\r\n                code : startInfo.code,\r\n                start : startInfo.start,\r\n                end : startInfo.end\r\n            };\r\n            decodedCodes.push(code);\r\n            code = self._decodePayload(code, result, decodedCodes);\r\n            if (!code) {\r\n                return null;\r\n            }\r\n            code = self._findEnd(code.end, false);\r\n            if (!code){\r\n                return null;\r\n            }\r\n\r\n            decodedCodes.push(code);\r\n\r\n            // Checksum\r\n            if (!self._checksum(result)) {\r\n                return null;\r\n            }\r\n\r\n            return {\r\n                code : result.join(""),\r\n                start : startInfo.start,\r\n                end : code.end,\r\n                codeset : "",\r\n                startInfo : startInfo,\r\n                decodedCodes : decodedCodes\r\n            };\r\n        };\r\n\r\n        EANReader.prototype._checksum = function(result) {\r\n            var sum = 0, i;\r\n\r\n            for ( i = result.length - 2; i >= 0; i -= 2) {\r\n                sum += result[i];\r\n            }\r\n            sum *= 3;\r\n            for ( i = result.length - 1; i >= 0; i -= 2) {\r\n                sum += result[i];\r\n            }\r\n            return sum % 10 === 0;\r\n        };\r\n        \r\n        return (EANReader);\r\n    }\r\n);\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\r\n    \'code_39_reader\',[\r\n        "./barcode_reader",\r\n        "./array_helper"\r\n    ],\r\n    function(BarcodeReader, ArrayHelper) {\r\n        "use strict";\r\n\r\n        function Code39Reader() {\r\n            BarcodeReader.call(this);\r\n        }\r\n\r\n        var properties = {\r\n            ALPHABETH_STRING: {value: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. *$/+%"},\r\n            ALPHABET: {value: [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 46, 32, 42, 36, 47, 43, 37]},\r\n            CHARACTER_ENCODINGS: {value: [0x034, 0x121, 0x061, 0x160, 0x031, 0x130, 0x070, 0x025, 0x124, 0x064, 0x109, 0x049, 0x148, 0x019, 0x118, 0x058, 0x00D, 0x10C, 0x04C, 0x01C, 0x103, 0x043, 0x142, 0x013, 0x112, 0x052, 0x007, 0x106, 0x046, 0x016, 0x181, 0x0C1, 0x1C0, 0x091, 0x190, 0x0D0, 0x085, 0x184, 0x0C4, 0x094, 0x0A8, 0x0A2, 0x08A, 0x02A]},\r\n            ASTERISK: {value: 0x094},\r\n            FORMAT: {value: "code_39", writeable: false}\r\n        };\r\n\r\n        Code39Reader.prototype = Object.create(BarcodeReader.prototype, properties);\r\n        Code39Reader.prototype.constructor = Code39Reader;\r\n\r\n        Code39Reader.prototype._toCounters = function(start, counter) {\r\n            var self = this,\r\n                numCounters = counter.length,\r\n                end = self._row.length,\r\n                isWhite = !self._row[start],\r\n                i,\r\n                counterPos = 0;\r\n\r\n            ArrayHelper.init(counter, 0);\r\n\r\n            for ( i = start; i < end; i++) {\r\n                if (self._row[i] ^ isWhite) {\r\n                    counter[counterPos]++;\r\n                } else {\r\n                    counterPos++;\r\n                    if (counterPos === numCounters) {\r\n                        break;\r\n                    } else {\r\n                        counter[counterPos] = 1;\r\n                        isWhite = !isWhite;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return counter;\r\n        };\r\n\r\n        Code39Reader.prototype._decode = function() {\r\n            var self = this,\r\n                counters = [0,0,0,0,0,0,0,0,0],\r\n                result = [],\r\n                start = self._findStart(),\r\n                decodedChar,\r\n                lastStart,\r\n                pattern,\r\n                nextStart;\r\n\r\n            if (!start) {\r\n                return null;\r\n            }\r\n            nextStart = self._nextSet(self._row, start.end);\r\n\r\n            do {\r\n                counters = self._toCounters(nextStart, counters);\r\n                pattern = self._toPattern(counters);\r\n                if (pattern < 0) {\r\n                    return null;\r\n                }\r\n                decodedChar = self._patternToChar(pattern);\r\n                if (decodedChar < 0){\r\n                    return null;\r\n                }\r\n                result.push(decodedChar);\r\n                lastStart = nextStart;\r\n                nextStart += ArrayHelper.sum(counters);\r\n                nextStart = self._nextSet(self._row, nextStart);\r\n            } while(decodedChar !== \'*\');\r\n            result.pop();\r\n\r\n            if (!result.length) {\r\n                return null;\r\n            }\r\n\r\n            if(!self._verifyTrailingWhitespace(lastStart, nextStart, counters)) {\r\n                return null;\r\n            }\r\n\r\n            return {\r\n                code : result.join(""),\r\n                start : start.start,\r\n                end : nextStart,\r\n                startInfo : start,\r\n                decodedCodes : result\r\n            };\r\n        };\r\n\r\n        Code39Reader.prototype._verifyTrailingWhitespace = function(lastStart, nextStart, counters) {\r\n            var trailingWhitespaceEnd,\r\n                patternSize = ArrayHelper.sum(counters);\r\n\r\n            trailingWhitespaceEnd = nextStart - lastStart - patternSize;\r\n            if ((trailingWhitespaceEnd * 3) >= patternSize) {\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        Code39Reader.prototype._patternToChar = function(pattern) {\r\n            var i,\r\n                self = this;\r\n\r\n            for (i = 0; i < self.CHARACTER_ENCODINGS.length; i++) {\r\n                if (self.CHARACTER_ENCODINGS[i] === pattern) {\r\n                    return String.fromCharCode(self.ALPHABET[i]);\r\n                }\r\n            }\r\n        };\r\n\r\n        Code39Reader.prototype._findNextWidth = function(counters, current) {\r\n            var i,\r\n                minWidth = Number.MAX_VALUE;\r\n\r\n            for (i = 0; i < counters.length; i++) {\r\n                if (counters[i] < minWidth && counters[i] > current) {\r\n                    minWidth = counters[i];\r\n                }\r\n            }\r\n\r\n            return minWidth;\r\n        };\r\n\r\n        Code39Reader.prototype._toPattern = function(counters) {\r\n            var numCounters = counters.length,\r\n                maxNarrowWidth = 0,\r\n                numWideBars = numCounters,\r\n                wideBarWidth = 0,\r\n                self = this,\r\n                pattern,\r\n                i;\r\n\r\n            while(numWideBars > 3) {\r\n                maxNarrowWidth = self._findNextWidth(counters, maxNarrowWidth);\r\n                numWideBars = 0;\r\n                pattern = 0;\r\n                for (i = 0; i < numCounters; i++) {\r\n                    if (counters[i] > maxNarrowWidth) {\r\n                        pattern |= 1 << (numCounters - 1 - i);\r\n                        numWideBars++;\r\n                        wideBarWidth += counters[i];\r\n                    }\r\n                }\r\n\r\n                if (numWideBars === 3) {\r\n                    for (i = 0; i < numCounters && numWideBars > 0; i++) {\r\n                        if (counters[i] > maxNarrowWidth) {\r\n                            numWideBars--;\r\n                            if ((counters[i] * 2) >= wideBarWidth) {\r\n                                return -1;\r\n                            }\r\n                        }\r\n                    }\r\n                    return pattern;\r\n                }\r\n            }\r\n            return -1;\r\n        };\r\n\r\n        Code39Reader.prototype._findStart = function() {\r\n            var self = this,\r\n                offset = self._nextSet(self._row),\r\n                patternStart = offset,\r\n                counter = [0,0,0,0,0,0,0,0,0],\r\n                counterPos = 0,\r\n                isWhite = false,\r\n                i,\r\n                j,\r\n                whiteSpaceMustStart;\r\n\r\n            for ( i = offset; i < self._row.length; i++) {\r\n                if (self._row[i] ^ isWhite) {\r\n                    counter[counterPos]++;\r\n                } else {\r\n                    if (counterPos === counter.length - 1) {\r\n\r\n                        // find start pattern\r\n                        if (self._toPattern(counter) === self.ASTERISK) {\r\n                            whiteSpaceMustStart = Math.floor(Math.max(0, patternStart - ((i - patternStart) / 4)));\r\n                            if (self._matchRange(whiteSpaceMustStart, patternStart, 0)) {\r\n                                return {\r\n                                    start: patternStart,\r\n                                    end: i\r\n                                };\r\n                            }\r\n                        }\r\n\r\n                        patternStart += counter[0] + counter[1];\r\n                        for ( j = 0; j < 7; j++) {\r\n                            counter[j] = counter[j + 2];\r\n                        }\r\n                        counter[7] = 0;\r\n                        counter[8] = 0;\r\n                        counterPos--;\r\n                    } else {\r\n                        counterPos++;\r\n                    }\r\n                    counter[counterPos] = 1;\r\n                    isWhite = !isWhite;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        return (Code39Reader);\r\n    }\r\n);\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\r\n    \'code_39_vin_reader\',[\r\n        "./code_39_reader"\r\n    ],\r\n    function(Code39Reader) {\r\n        "use strict";\r\n\r\n        function Code39VINReader() {\r\n            Code39Reader.call(this);\r\n        }\r\n\r\n        var patterns = {\r\n            IOQ: /[IOQ]/g,\r\n            AZ09: /[A-Z0-9]{17}/\r\n        };\r\n\r\n        Code39VINReader.prototype = Object.create(Code39Reader.prototype);\r\n        Code39VINReader.prototype.constructor = Code39VINReader;\r\n\r\n        // Cribbed from:\r\n        // https://github.com/zxing/zxing/blob/master/core/src/main/java/com/google/zxing/client/result/VINResultParser.java\r\n        Code39VINReader.prototype._decode = function() {\r\n            var result = Code39Reader.prototype._decode.apply(this);\r\n            if (!result) {\r\n                return null;\r\n            }\r\n\r\n            var code = result.code;\r\n\r\n            if (!code) {\r\n                return;\r\n            }\r\n\r\n            code = code.replace(patterns.IOQ, \'\');\r\n\r\n            if (!code.match(patterns.AZ09)) {\r\n                console.log(\'Failed AZ09 pattern code:\', code);\r\n                return null;\r\n            }\r\n\r\n            if (!this._checkChecksum(code)) {\r\n                return null;\r\n            }\r\n\r\n            result.code = code;\r\n            return result;\r\n        };\r\n\r\n        Code39VINReader.prototype._checkChecksum = function(code) {\r\n            // TODO\r\n            return !!code;\r\n        };\r\n\r\n        return (Code39VINReader);\r\n    }\r\n);\r\n\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\r\n    \'codabar_reader\',[\r\n        "./barcode_reader"\r\n    ],\r\n    function(BarcodeReader) {\r\n        "use strict";\r\n\r\n        function CodabarReader() {\r\n            BarcodeReader.call(this);\r\n            this._counters = [];\r\n        }\r\n\r\n        var properties = {\r\n            ALPHABETH_STRING: {value: "0123456789-$:/.+ABCD"},\r\n            ALPHABET: {value: [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 36, 58, 47, 46, 43, 65, 66, 67, 68]},\r\n            CHARACTER_ENCODINGS: {value: [0x003, 0x006, 0x009, 0x060, 0x012, 0x042, 0x021, 0x024, 0x030, 0x048, 0x00c, 0x018, 0x045, 0x051, 0x054, 0x015, 0x01A, 0x029, 0x00B, 0x00E]},\r\n            START_END: {value: [0x01A, 0x029, 0x00B, 0x00E]},\r\n            MIN_ENCODED_CHARS: {value: 4},\r\n            MAX_ACCEPTABLE: {value: 2.0},\r\n            PADDING: {value: 1.5},\r\n            FORMAT: {value: "codabar", writeable: false}\r\n        };\r\n\r\n        CodabarReader.prototype = Object.create(BarcodeReader.prototype, properties);\r\n        CodabarReader.prototype.constructor = CodabarReader;\r\n\r\n        CodabarReader.prototype._decode = function() {\r\n            var self = this,\r\n                result = [],\r\n                start,\r\n                decodedChar,\r\n                pattern,\r\n                nextStart,\r\n                end;\r\n\r\n            this._counters = self._fillCounters();\r\n            start = self._findStart();\r\n            if (!start) {\r\n                return null;\r\n            }\r\n            nextStart = start.startCounter;\r\n\r\n            do {\r\n                pattern = self._toPattern(nextStart);\r\n                if (pattern < 0) {\r\n                    return null;\r\n                }\r\n                decodedChar = self._patternToChar(pattern);\r\n                if (decodedChar < 0){\r\n                    return null;\r\n                }\r\n                result.push(decodedChar);\r\n                nextStart += 8;\r\n                if (result.length > 1 && self._isStartEnd(pattern)) {\r\n                    break;\r\n                }\r\n            } while(nextStart < self._counters.length);\r\n\r\n            // verify end\r\n            if ((result.length - 2) < self.MIN_ENCODED_CHARS || !self._isStartEnd(pattern)) {\r\n                return null;\r\n            }\r\n\r\n            // verify end white space\r\n            if (!self._verifyWhitespace(start.startCounter, nextStart - 8)){\r\n                return null;\r\n            }\r\n\r\n            if (!self._validateResult(result, start.startCounter)){\r\n                return null;\r\n            }\r\n\r\n            nextStart = nextStart > self._counters.length ? self._counters.length : nextStart;\r\n            end = start.start + self._sumCounters(start.startCounter, nextStart - 8);\r\n\r\n            return {\r\n                code : result.join(""),\r\n                start : start.start,\r\n                end : end,\r\n                startInfo : start,\r\n                decodedCodes : result\r\n            };\r\n        };\r\n\r\n        CodabarReader.prototype._verifyWhitespace = function(startCounter, endCounter) {\r\n            if ((startCounter - 1 <= 0) || this._counters[startCounter-1] >= (this._calculatePatternLength(startCounter) / 2.0)) {\r\n                if ((endCounter + 8 >= this._counters.length) || this._counters[endCounter+7] >= (this._calculatePatternLength(endCounter) / 2.0)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n\r\n        CodabarReader.prototype._calculatePatternLength = function(offset) {\r\n            var i,\r\n                sum = 0;\r\n\r\n            for (i = offset; i < offset + 7; i++) {\r\n                sum += this._counters[i];\r\n            }\r\n\r\n            return sum;\r\n        };\r\n\r\n        CodabarReader.prototype._thresholdResultPattern = function(result, startCounter){\r\n            var self = this,\r\n                categorization = {\r\n                    space: {\r\n                        narrow: { size: 0, counts: 0, min: 0, max: Number.MAX_VALUE},\r\n                        wide: {size: 0, counts: 0, min: 0, max: Number.MAX_VALUE}\r\n                    },\r\n                    bar: {\r\n                        narrow: { size: 0, counts: 0, min: 0, max: Number.MAX_VALUE},\r\n                        wide: { size: 0, counts: 0, min: 0, max: Number.MAX_VALUE}\r\n                    }\r\n                },\r\n                kind,\r\n                cat,\r\n                i,\r\n                j,\r\n                pos = startCounter,\r\n                pattern;\r\n\r\n            for (i = 0; i < result.length; i++){\r\n                pattern = self._charToPattern(result[i]);\r\n                for (j = 6; j >= 0; j--) {\r\n                    kind = (j & 1) === 2 ? categorization.bar : categorization.space;\r\n                    cat = (pattern & 1)  === 1 ? kind.wide : kind.narrow;\r\n                    cat.size += self._counters[pos + j];\r\n                    cat.counts++;\r\n                    pattern >>= 1;\r\n                }\r\n                pos += 8;\r\n            }\r\n\r\n            ["space", "bar"].forEach(function(key) {\r\n                var kind = categorization[key];\r\n                kind.wide.min = Math.floor((kind.narrow.size/kind.narrow.counts + kind.wide.size / kind.wide.counts) / 2);\r\n                kind.narrow.max = Math.ceil(kind.wide.min);\r\n                kind.wide.max = Math.ceil((kind.wide.size * self.MAX_ACCEPTABLE + self.PADDING) / kind.wide.counts);\r\n            });\r\n\r\n            return categorization;\r\n        };\r\n\r\n        CodabarReader.prototype._charToPattern = function(char) {\r\n            var self = this,\r\n                charCode = char.charCodeAt(0),\r\n                i;\r\n\r\n            for (i = 0; i < self.ALPHABET.length; i++) {\r\n                if (self.ALPHABET[i] === charCode){\r\n                    return self.CHARACTER_ENCODINGS[i];\r\n                }\r\n            }\r\n            return 0x0;\r\n        };\r\n\r\n        CodabarReader.prototype._validateResult = function(result, startCounter) {\r\n            var self = this,\r\n                thresholds = self._thresholdResultPattern(result, startCounter),\r\n                i,\r\n                j,\r\n                kind,\r\n                cat,\r\n                size,\r\n                pos = startCounter,\r\n                pattern;\r\n\r\n            for (i = 0; i < result.length; i++) {\r\n                pattern = self._charToPattern(result[i]);\r\n                for (j = 6; j >= 0; j--) {\r\n                    kind = (j & 1) === 0 ? thresholds.bar : thresholds.space;\r\n                    cat = (pattern & 1)  === 1 ? kind.wide : kind.narrow;\r\n                    size = self._counters[pos + j];\r\n                    if (size < cat.min || size > cat.max) {\r\n                        return false;\r\n                    }\r\n                    pattern >>= 1;\r\n                }\r\n                pos += 8;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        CodabarReader.prototype._patternToChar = function(pattern) {\r\n            var i,\r\n                self = this;\r\n\r\n            for (i = 0; i < self.CHARACTER_ENCODINGS.length; i++) {\r\n                if (self.CHARACTER_ENCODINGS[i] === pattern) {\r\n                    return String.fromCharCode(self.ALPHABET[i]);\r\n                }\r\n            }\r\n            return -1;\r\n        };\r\n\r\n        CodabarReader.prototype._computeAlternatingThreshold = function(offset, end) {\r\n            var i,\r\n                min = Number.MAX_VALUE,\r\n                max = 0,\r\n                counter;\r\n\r\n            for (i = offset; i < end; i += 2){\r\n                counter = this._counters[i];\r\n                if (counter > max) {\r\n                    max = counter;\r\n                }\r\n                if (counter < min) {\r\n                    min = counter;\r\n                }\r\n            }\r\n\r\n            return ((min + max) / 2.0) | 0;\r\n        };\r\n\r\n        CodabarReader.prototype._toPattern = function(offset) {\r\n            var numCounters = 7,\r\n                end = offset + numCounters,\r\n                barThreshold,\r\n                spaceThreshold,\r\n                bitmask = 1 << (numCounters - 1),\r\n                pattern = 0,\r\n                i,\r\n                threshold;\r\n\r\n            if (end > this._counters.length) {\r\n                return -1;\r\n            }\r\n\r\n            barThreshold = this._computeAlternatingThreshold(offset, end);\r\n            spaceThreshold = this._computeAlternatingThreshold(offset + 1, end);\r\n\r\n            for (i = 0; i < numCounters; i++){\r\n                threshold = (i & 1) === 0 ? barThreshold : spaceThreshold;\r\n                if (this._counters[offset + i] > threshold) {\r\n                    pattern |= bitmask;\r\n                }\r\n                bitmask >>= 1;\r\n            }\r\n\r\n            return pattern;\r\n        };\r\n\r\n        CodabarReader.prototype._isStartEnd = function(pattern) {\r\n            var i;\r\n\r\n            for (i = 0; i < this.START_END.length; i++) {\r\n                if (this.START_END[i] === pattern) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n\r\n        CodabarReader.prototype._sumCounters = function(start, end) {\r\n            var i,\r\n                sum = 0;\r\n\r\n            for (i = start; i < end; i++) {\r\n                sum += this._counters[i];\r\n            }\r\n            return sum;\r\n        };\r\n\r\n        CodabarReader.prototype._findStart = function() {\r\n            var self = this,\r\n                i,\r\n                pattern,\r\n                start = self._nextUnset(self._row),\r\n                end;\r\n\r\n            for (i = 1; i < this._counters.length; i++) {\r\n                pattern = self._toPattern(i);\r\n                if (pattern !== -1 && self._isStartEnd(pattern)) {\r\n                    // TODO: Look for whitespace ahead\r\n                    start += self._sumCounters(0, i);\r\n                    end = start + self._sumCounters(i, i + 8);\r\n                    return {\r\n                        start: start,\r\n                        end: end,\r\n                        startCounter: i,\r\n                        endCounter: i + 8\r\n                    };\r\n                }\r\n            }\r\n        };\r\n\r\n        return (CodabarReader);\r\n    }\r\n);\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\r\n    \'upc_reader\',[\r\n        "./ean_reader"\r\n    ],\r\n    function(EANReader) {\r\n        "use strict";\r\n\r\n        function UPCReader() {\r\n            EANReader.call(this);\r\n        }\r\n\r\n        var properties = {\r\n            FORMAT: {value: "upc_a", writeable: false}\r\n        };\r\n\r\n        UPCReader.prototype = Object.create(EANReader.prototype, properties);\r\n        UPCReader.prototype.constructor = UPCReader;\r\n\r\n        UPCReader.prototype._decode = function() {\r\n            var result = EANReader.prototype._decode.call(this);\r\n\r\n            if (result && result.code && result.code.length === 13 && result.code.charAt(0) === "0") {\r\n\r\n                result.code = result.code.substring(1);\r\n                return result;\r\n            }\r\n            return null;\r\n        };\r\n\r\n        return (UPCReader);\r\n    }\r\n);\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\r\n    \'ean_8_reader\',[\r\n        "./ean_reader"\r\n    ],\r\n    function(EANReader) {\r\n        "use strict";\r\n\r\n        function EAN8Reader() {\r\n            EANReader.call(this);\r\n        }\r\n\r\n        var properties = {\r\n            FORMAT: {value: "ean_8", writeable: false}\r\n        };\r\n\r\n        EAN8Reader.prototype = Object.create(EANReader.prototype, properties);\r\n        EAN8Reader.prototype.constructor = EAN8Reader;\r\n\r\n        EAN8Reader.prototype._decodePayload = function(code, result, decodedCodes) {\r\n            var i,\r\n                self = this;\r\n\r\n            for ( i = 0; i < 4; i++) {\r\n                code = self._decodeCode(code.end, self.CODE_G_START);\r\n                if (!code) {\r\n                    return null;\r\n                }\r\n                result.push(code.code);\r\n                decodedCodes.push(code);\r\n            }\r\n\r\n            code = self._findPattern(self.MIDDLE_PATTERN, code.end, true, false);\r\n            if (code === null) {\r\n                return null;\r\n            }\r\n            decodedCodes.push(code);\r\n\r\n            for ( i = 0; i < 4; i++) {\r\n                code = self._decodeCode(code.end, self.CODE_G_START);\r\n                if (!code) {\r\n                    return null;\r\n                }\r\n                decodedCodes.push(code);\r\n                result.push(code.code);\r\n            }\r\n\r\n            return code;\r\n        };\r\n\r\n        return (EAN8Reader);\r\n    }\r\n);\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\r\n    \'upc_e_reader\',[\r\n        "./ean_reader"\r\n    ],\r\n    function(EANReader) {\r\n        "use strict";\r\n\r\n        function UPCEReader() {\r\n            EANReader.call(this);\r\n        }\r\n\r\n        var properties = {\r\n            CODE_FREQUENCY : {value: [\r\n                [ 56, 52, 50, 49, 44, 38, 35, 42, 41, 37 ],\r\n                [7, 11, 13, 14, 19, 25, 28, 21, 22, 26]]},\r\n            STOP_PATTERN: { value: [1 / 6 * 7, 1 / 6 * 7, 1 / 6 * 7, 1 / 6 * 7, 1 / 6 * 7, 1 / 6 * 7]},\r\n            FORMAT: {value: "upc_e", writeable: false}\r\n        };\r\n\r\n        UPCEReader.prototype = Object.create(EANReader.prototype, properties);\r\n        UPCEReader.prototype.constructor = UPCEReader;\r\n\r\n        UPCEReader.prototype._decodePayload = function(code, result, decodedCodes) {\r\n            var i,\r\n                self = this,\r\n                codeFrequency = 0x0;\r\n\r\n            for ( i = 0; i < 6; i++) {\r\n                code = self._decodeCode(code.end);\r\n                if (!code) {\r\n                    return null;\r\n                }\r\n                if (code.code >= self.CODE_G_START) {\r\n                    code.code = code.code - self.CODE_G_START;\r\n                    codeFrequency |= 1 << (5 - i);\r\n                }\r\n                result.push(code.code);\r\n                decodedCodes.push(code);\r\n            }\r\n            if (!self._determineParity(codeFrequency, result)) {\r\n                return null;\r\n            }\r\n\r\n            return code;\r\n        };\r\n\r\n        UPCEReader.prototype._determineParity = function(codeFrequency, result) {\r\n            var self =this,\r\n                i,\r\n                nrSystem;\r\n\r\n            for (nrSystem = 0; nrSystem < self.CODE_FREQUENCY.length; nrSystem++){\r\n                for ( i = 0; i < self.CODE_FREQUENCY[nrSystem].length; i++) {\r\n                    if (codeFrequency === self.CODE_FREQUENCY[nrSystem][i]) {\r\n                        result.unshift(nrSystem);\r\n                        result.push(i);\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n\r\n        UPCEReader.prototype._convertToUPCA = function(result) {\r\n            var upca = [result[0]],\r\n                lastDigit = result[result.length - 2];\r\n\r\n            if (lastDigit <= 2) {\r\n                upca = upca.concat(result.slice(1, 3))\r\n                    .concat([lastDigit, 0, 0, 0, 0])\r\n                    .concat(result.slice(3, 6));\r\n            } else if (lastDigit === 3) {\r\n                upca = upca.concat(result.slice(1, 4))\r\n                    .concat([0 ,0, 0, 0, 0])\r\n                    .concat(result.slice(4,6));\r\n            } else if (lastDigit === 4) {\r\n                upca = upca.concat(result.slice(1, 5))\r\n                    .concat([0, 0, 0, 0, 0, result[5]]);\r\n            } else {\r\n                upca = upca.concat(result.slice(1, 6))\r\n                    .concat([0, 0, 0, 0, lastDigit]);\r\n            }\r\n\r\n            upca.push(result[result.length - 1]);\r\n            return upca;\r\n        };\r\n\r\n        UPCEReader.prototype._checksum = function(result) {\r\n            return EANReader.prototype._checksum.call(this, this._convertToUPCA(result));\r\n        };\r\n\r\n        UPCEReader.prototype._findEnd = function(offset, isWhite) {\r\n            isWhite = true;\r\n            return EANReader.prototype._findEnd.call(this, offset, isWhite);\r\n        };\r\n\r\n        UPCEReader.prototype._verifyTrailingWhitespace = function(endInfo) {\r\n            var self = this,\r\n                trailingWhitespaceEnd;\r\n\r\n            trailingWhitespaceEnd = endInfo.end + ((endInfo.end - endInfo.start)/2);\r\n            if (trailingWhitespaceEnd < self._row.length) {\r\n                if (self._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\r\n                    return endInfo;\r\n                }\r\n            }\r\n        };\r\n\r\n        return (UPCEReader);\r\n    }\r\n);\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\'html_utils\',[], function() {\r\n    "use strict";\r\n\r\n    function createNode(htmlStr) {\r\n        var temp = document.createElement(\'div\');\r\n        \r\n        temp.innerHTML = htmlStr;\r\n        while (temp.firstChild) {\r\n            return temp.firstChild;\r\n        }\r\n    }\r\n\r\n    function mergeObjects(obj1, obj2) {\r\n        for (var p in obj2) {\r\n            try {\r\n                if (obj2[p].constructor == Object) {\r\n                    obj1[p] = mergeObjects(obj1[p], obj2[p]);\r\n                } else {\r\n                    obj1[p] = obj2[p];\r\n                }\r\n            } catch(e) {\r\n                obj1[p] = obj2[p];\r\n            }\r\n        }\r\n\r\n        return obj1;\r\n    }\r\n\r\n    return {\r\n        createNode : function(htmlStr) {\r\n            return createNode(htmlStr);\r\n        },\r\n        mergeObjects : function(obj1, obj2) {\r\n            return mergeObjects(obj1, obj2);\r\n        }\r\n    };\r\n}); \n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\r\n    \'i2of5_reader\',[\r\n        "./barcode_reader",\r\n        "./html_utils"\r\n    ],\r\n    function(BarcodeReader, HTMLUtils) {\r\n        "use strict";\r\n\r\n        function I2of5Reader(opts) {\r\n            opts = HTMLUtils.mergeObjects(getDefaulConfig(), opts);\r\n            BarcodeReader.call(this, opts);\r\n            this.barSpaceRatio = [1, 1];\r\n            if (opts.normalizeBarSpaceWidth) {\r\n                this.SINGLE_CODE_ERROR = 0.38;\r\n                this.AVG_CODE_ERROR = 0.09;\r\n            }\r\n        }\r\n\r\n        function getDefaulConfig() {\r\n            var config = {};\r\n\r\n            Object.keys(I2of5Reader.CONFIG_KEYS).forEach(function(key) {\r\n                config[key] = I2of5Reader.CONFIG_KEYS[key][\'default\'];\r\n            });\r\n            return config;\r\n        }\r\n\r\n        var N = 1,\r\n            W = 3,\r\n            properties = {\r\n            MODULO : {value: 10},\r\n            START_PATTERN : {value: [N*2.5, N*2.5, N*2.5, N*2.5]},\r\n            STOP_PATTERN : {value: [N*2, N*2, W*2]},\r\n            CODE_PATTERN : {value: [\r\n                [N, N, W, W, N],\r\n                [W, N, N, N, W],\r\n                [N, W, N, N, W],\r\n                [W, W, N, N, N],\r\n                [N, N, W, N, W],\r\n                [W, N, W, N, N],\r\n                [N, W, W, N, N],\r\n                [N, N, N, W, W],\r\n                [W, N, N, W, N],\r\n                [N, W, N, W, N]\r\n            ]},\r\n            SINGLE_CODE_ERROR: {value: 0.78, writable: true},\r\n            AVG_CODE_ERROR: {value: 0.38, writable: true},\r\n            MAX_CORRECTION_FACTOR: {value: 5},\r\n            FORMAT: {value: "i2of5"}\r\n        };\r\n\r\n        I2of5Reader.prototype = Object.create(BarcodeReader.prototype, properties);\r\n        I2of5Reader.prototype.constructor = I2of5Reader;\r\n\r\n        I2of5Reader.prototype._matchPattern = function(counter, code) {\r\n            if (this.config.normalizeBarSpaceWidth) {\r\n                var i,\r\n                    counterSum = [0, 0],\r\n                    codeSum = [0, 0],\r\n                    correction = [0, 0],\r\n                    correctionRatio = this.MAX_CORRECTION_FACTOR,\r\n                    correctionRatioInverse = 1 / correctionRatio;\r\n\r\n                for (i = 0; i < counter.length; i++) {\r\n                    counterSum[i % 2] += counter[i];\r\n                    codeSum[i % 2] += code[i];\r\n                }\r\n                correction[0] = codeSum[0] / counterSum[0];\r\n                correction[1] = codeSum[1] / counterSum[1];\r\n\r\n                correction[0] = Math.max(Math.min(correction[0], correctionRatio), correctionRatioInverse);\r\n                correction[1] = Math.max(Math.min(correction[1], correctionRatio), correctionRatioInverse);\r\n                this.barSpaceRatio = correction;\r\n                for (i = 0; i < counter.length; i++) {\r\n                    counter[i] *= this.barSpaceRatio[i % 2];\r\n                }\r\n            }\r\n            return BarcodeReader.prototype._matchPattern.call(this, counter, code);\r\n        };\r\n\r\n        I2of5Reader.prototype._findPattern = function(pattern, offset, isWhite, tryHarder) {\r\n            var counter = [],\r\n                self = this,\r\n                i,\r\n                counterPos = 0,\r\n                bestMatch = {\r\n                    error : Number.MAX_VALUE,\r\n                    code : -1,\r\n                    start : 0,\r\n                    end : 0\r\n                },\r\n                error,\r\n                j,\r\n                sum,\r\n                normalized,\r\n                epsilon = self.AVG_CODE_ERROR;\r\n\r\n            isWhite = isWhite || false;\r\n            tryHarder = tryHarder || false;\r\n\r\n            if (!offset) {\r\n                offset = self._nextSet(self._row);\r\n            }\r\n\r\n            for ( i = 0; i < pattern.length; i++) {\r\n                counter[i] = 0;\r\n            }\r\n\r\n            for ( i = offset; i < self._row.length; i++) {\r\n                if (self._row[i] ^ isWhite) {\r\n                    counter[counterPos]++;\r\n                } else {\r\n                    if (counterPos === counter.length - 1) {\r\n                        sum = 0;\r\n                        for ( j = 0; j < counter.length; j++) {\r\n                            sum += counter[j];\r\n                        }\r\n                        normalized = self._normalize(counter);\r\n                        if (normalized) {\r\n                            error = self._matchPattern(normalized, pattern);\r\n\r\n                            if (error < epsilon) {\r\n                                bestMatch.error = error;\r\n                                bestMatch.start = i - sum;\r\n                                bestMatch.end = i;\r\n                                return bestMatch;\r\n                            }\r\n                        }\r\n                        if (tryHarder) {\r\n                            for (j = 0; j < counter.length - 2; j++) {\r\n                                counter[j] = counter[j + 2];\r\n                            }\r\n                            counter[counter.length - 2] = 0;\r\n                            counter[counter.length - 1] = 0;\r\n                            counterPos--;\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    } else {\r\n                        counterPos++;\r\n                    }\r\n                    counter[counterPos] = 1;\r\n                    isWhite = !isWhite;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        I2of5Reader.prototype._findStart = function() {\r\n            var self = this,\r\n                leadingWhitespaceStart,\r\n                offset = self._nextSet(self._row),\r\n                startInfo,\r\n                narrowBarWidth = 1;\r\n\r\n            while(!startInfo) {\r\n                startInfo = self._findPattern(self.START_PATTERN, offset, false, true);\r\n                if (!startInfo) {\r\n                    return null;\r\n                }\r\n                narrowBarWidth = Math.floor((startInfo.end - startInfo.start) / 4);\r\n                leadingWhitespaceStart = startInfo.start - narrowBarWidth*10;\r\n                if (leadingWhitespaceStart >= 0) {\r\n                    if (self._matchRange(leadingWhitespaceStart, startInfo.start, 0)) {\r\n                        return startInfo;\r\n                    }\r\n                }\r\n                offset = startInfo.end;\r\n                startInfo = null;\r\n            }\r\n        };\r\n\r\n        I2of5Reader.prototype._verifyTrailingWhitespace = function(endInfo) {\r\n            var self = this,\r\n                trailingWhitespaceEnd;\r\n\r\n            trailingWhitespaceEnd = endInfo.end + ((endInfo.end - endInfo.start) / 2);\r\n            if (trailingWhitespaceEnd < self._row.length) {\r\n                if (self._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\r\n                    return endInfo;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        I2of5Reader.prototype._findEnd = function() {\r\n            var self = this,\r\n                endInfo,\r\n                tmp;\r\n\r\n            self._row.reverse();\r\n            endInfo = self._findPattern(self.STOP_PATTERN);\r\n            self._row.reverse();\r\n\r\n            if (endInfo === null) {\r\n                return null;\r\n            }\r\n\r\n            // reverse numbers\r\n            tmp = endInfo.start;\r\n            endInfo.start = self._row.length - endInfo.end;\r\n            endInfo.end = self._row.length - tmp;\r\n\r\n            return endInfo !== null ? self._verifyTrailingWhitespace(endInfo) : null;\r\n        };\r\n\r\n        I2of5Reader.prototype._decodePair = function(counterPair) {\r\n            var i,\r\n                code,\r\n                codes = [],\r\n                self = this;\r\n\r\n            for (i = 0; i < counterPair.length; i++) {\r\n                code = self._decodeCode(counterPair[i]);\r\n                if (!code) {\r\n                    return null;\r\n                }\r\n                codes.push(code);\r\n            }\r\n            return codes;\r\n        };\r\n\r\n        I2of5Reader.prototype._decodeCode = function(counter) {\r\n            var j,\r\n                self = this,\r\n                sum = 0,\r\n                normalized,\r\n                error,\r\n                epsilon = self.AVG_CODE_ERROR,\r\n                code,\r\n                bestMatch = {\r\n                    error : Number.MAX_VALUE,\r\n                    code : -1,\r\n                    start : 0,\r\n                    end : 0\r\n                };\r\n\r\n            for ( j = 0; j < counter.length; j++) {\r\n                sum += counter[j];\r\n            }\r\n            normalized = self._normalize(counter);\r\n            if (normalized) {\r\n                for (code = 0; code < self.CODE_PATTERN.length; code++) {\r\n                    error = self._matchPattern(normalized, self.CODE_PATTERN[code]);\r\n                    if (error < bestMatch.error) {\r\n                        bestMatch.code = code;\r\n                        bestMatch.error = error;\r\n                    }\r\n                }\r\n                if (bestMatch.error < epsilon) {\r\n                    return bestMatch;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        I2of5Reader.prototype._decodePayload = function(counters, result, decodedCodes) {\r\n            var i,\r\n                self = this,\r\n                pos = 0,\r\n                counterLength = counters.length,\r\n                counterPair = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]],\r\n                codes;\r\n\r\n            while (pos < counterLength) {\r\n                for (i = 0; i < 5; i++) {\r\n                    counterPair[0][i] = counters[pos]*this.barSpaceRatio[0];\r\n                    counterPair[1][i] = counters[pos + 1]*this.barSpaceRatio[1];\r\n                    pos += 2;\r\n                }\r\n                codes = self._decodePair(counterPair);\r\n                if (!codes) {\r\n                    return null;\r\n                }\r\n                for (i = 0; i < codes.length; i++) {\r\n                    result.push(codes[i].code + "");\r\n                    decodedCodes.push(codes[i]);\r\n                }\r\n            }\r\n            return codes;\r\n        };\r\n\r\n        I2of5Reader.prototype._verifyCounterLength = function(counters) {\r\n            return (counters.length % 10 === 0);\r\n        };\r\n\r\n        I2of5Reader.prototype._decode = function() {\r\n            var startInfo,\r\n                endInfo,\r\n                self = this,\r\n                code,\r\n                result = [],\r\n                decodedCodes = [],\r\n                counters;\r\n\r\n            startInfo = self._findStart();\r\n            if (!startInfo) {\r\n                return null;\r\n            }\r\n            decodedCodes.push(startInfo);\r\n\r\n            endInfo = self._findEnd();\r\n            if (!endInfo) {\r\n                return null;\r\n            }\r\n\r\n            counters = self._fillCounters(startInfo.end, endInfo.start, false);\r\n            if (!self._verifyCounterLength(counters)) {\r\n                return null;\r\n            }\r\n            code = self._decodePayload(counters, result, decodedCodes);\r\n            if (!code) {\r\n                return null;\r\n            }\r\n            if (result.length % 2 !== 0 ||\r\n                    result.length < 6) {\r\n                return null;\r\n            }\r\n\r\n            decodedCodes.push(endInfo);\r\n            return {\r\n                code : result.join(""),\r\n                start : startInfo.start,\r\n                end : endInfo.end,\r\n                startInfo : startInfo,\r\n                decodedCodes : decodedCodes\r\n            };\r\n        };\r\n\r\n        I2of5Reader.CONFIG_KEYS = {\r\n            normalizeBarSpaceWidth: {\r\n                \'type\': \'boolean\',\r\n                \'default\': false,\r\n                \'description\': \'If true, the reader tries to normalize the\' +\r\n                \'width-difference between bars and spaces\'\r\n            }\r\n        };\r\n\r\n        return (I2of5Reader);\r\n    }\r\n);\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\'barcode_decoder\',[\r\n    "bresenham",\r\n    "image_debug",\r\n    \'code_128_reader\',\r\n    \'ean_reader\',\r\n    \'code_39_reader\',\r\n    \'code_39_vin_reader\',\r\n    \'codabar_reader\',\r\n    \'upc_reader\',\r\n    \'ean_8_reader\',\r\n    \'upc_e_reader\',\r\n    \'i2of5_reader\'\r\n], function(\r\n    Bresenham,\r\n    ImageDebug,\r\n    Code128Reader,\r\n    EANReader,\r\n    Code39Reader,\r\n    Code39VINReader,\r\n    CodabarReader,\r\n    UPCReader,\r\n    EAN8Reader,\r\n    UPCEReader,\r\n    I2of5Reader) {\r\n    "use strict";\r\n\r\n    var readers = {\r\n        code_128_reader: Code128Reader,\r\n        ean_reader: EANReader,\r\n        ean_8_reader: EAN8Reader,\r\n        code_39_reader: Code39Reader,\r\n        code_39_vin_reader: Code39VINReader,\r\n        codabar_reader: CodabarReader,\r\n        upc_reader: UPCReader,\r\n        upc_e_reader: UPCEReader,\r\n        i2of5_reader: I2of5Reader\r\n    };\r\n    var BarcodeDecoder = {\r\n        create : function(config, inputImageWrapper) {\r\n            var _canvas = {\r\n                ctx : {\r\n                        frequency : null,\r\n                        pattern : null,\r\n                        overlay : null\r\n                    },\r\n                    dom : {\r\n                        frequency : null,\r\n                        pattern : null,\r\n                        overlay : null\r\n                    }\r\n                },\r\n                _barcodeReaders = [];\r\n\r\n            initCanvas();\r\n            initReaders();\r\n            initConfig();\r\n\r\n            function initCanvas() {\r\n                if (typeof document !== \'undefined\') {\r\n                    var $debug = document.querySelector("#debug.detection");\r\n                    _canvas.dom.frequency = document.querySelector("canvas.frequency");\r\n                    if (!_canvas.dom.frequency) {\r\n                        _canvas.dom.frequency = document.createElement("canvas");\r\n                        _canvas.dom.frequency.className = "frequency";\r\n                        if($debug) {\r\n                            $debug.appendChild(_canvas.dom.frequency);\r\n                        }\r\n                    }\r\n                    _canvas.ctx.frequency = _canvas.dom.frequency.getContext("2d");\r\n\r\n                    _canvas.dom.pattern = document.querySelector("canvas.patternBuffer");\r\n                    if (!_canvas.dom.pattern) {\r\n                        _canvas.dom.pattern = document.createElement("canvas");\r\n                        _canvas.dom.pattern.className = "patternBuffer";\r\n                        if($debug) {\r\n                            $debug.appendChild(_canvas.dom.pattern);\r\n                        }\r\n                    }\r\n                    _canvas.ctx.pattern = _canvas.dom.pattern.getContext("2d");\r\n\r\n                    _canvas.dom.overlay = document.querySelector("canvas.drawingBuffer");\r\n                    if (_canvas.dom.overlay) {\r\n                        _canvas.ctx.overlay = _canvas.dom.overlay.getContext("2d");\r\n                    }\r\n                }\r\n            }\r\n\r\n            function initReaders() {\r\n                config.readers.forEach(function(readerConfig) {\r\n                    var reader,\r\n                        config = {};\r\n\r\n                    if (typeof readerConfig === \'object\') {\r\n                        reader = readerConfig.format;\r\n                        config = readerConfig.config;\r\n                    } else if (typeof readerConfig === \'string\') {\r\n                        reader = readerConfig;\r\n                    }\r\n                    _barcodeReaders.push(new readers[reader](config));\r\n                });\r\n                console.log("Registered Readers: " + _barcodeReaders\r\n                    .map(function(reader) {return JSON.stringify({format: reader.FORMAT, config: reader.config});})\r\n                    .join(\', \'));\r\n            }\r\n\r\n            function initConfig() {\r\n                if (typeof document !== \'undefined\') {\r\n                    var i,\r\n                        vis = [{\r\n                            node : _canvas.dom.frequency,\r\n                            prop : config.showFrequency\r\n                        }, {\r\n                            node : _canvas.dom.pattern,\r\n                            prop : config.showPattern\r\n                        }];\r\n\r\n                    for (i = 0; i < vis.length; i++) {\r\n                        if (vis[i].prop === true) {\r\n                            vis[i].node.style.display = "block";\r\n                        } else {\r\n                            vis[i].node.style.display = "none";\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * extend the line on both ends\r\n             * @param {Array} line\r\n             * @param {Number} angle\r\n             */\r\n            function getExtendedLine(line, angle, ext) {\r\n                function extendLine(amount) {\r\n                    var extension = {\r\n                        y : amount * Math.sin(angle),\r\n                        x : amount * Math.cos(angle)\r\n                    };\r\n\r\n                    line[0].y -= extension.y;\r\n                    line[0].x -= extension.x;\r\n                    line[1].y += extension.y;\r\n                    line[1].x += extension.x;\r\n                }\r\n\r\n                // check if inside image\r\n                extendLine(ext);\r\n                while (ext > 1 && (!inputImageWrapper.inImageWithBorder(line[0], 0) || !inputImageWrapper.inImageWithBorder(line[1], 0))) {\r\n                    ext -= Math.ceil(ext/2);\r\n                    extendLine(-ext);\r\n                }\r\n                return line;\r\n            }\r\n\r\n            function getLine(box) {\r\n                return [{\r\n                    x : (box[1][0] - box[0][0]) / 2 + box[0][0],\r\n                    y : (box[1][1] - box[0][1]) / 2 + box[0][1]\r\n                }, {\r\n                    x : (box[3][0] - box[2][0]) / 2 + box[2][0],\r\n                    y : (box[3][1] - box[2][1]) / 2 + box[2][1]\r\n                }];\r\n            }\r\n\r\n            function tryDecode(line) {\r\n                var result = null,\r\n                    i,\r\n                    barcodeLine = Bresenham.getBarcodeLine(inputImageWrapper, line[0], line[1]);\r\n\r\n                if (config.showFrequency) {\r\n                    ImageDebug.drawPath(line, {x: \'x\', y: \'y\'}, _canvas.ctx.overlay, {color: \'red\', lineWidth: 3});\r\n                    Bresenham.debug.printFrequency(barcodeLine.line, _canvas.dom.frequency);\r\n                }\r\n                Bresenham.toBinaryLine(barcodeLine);\r\n                if (config.showPattern) {\r\n                    Bresenham.debug.printPattern(barcodeLine.line, _canvas.dom.pattern);\r\n                }\r\n\r\n                for ( i = 0; i < _barcodeReaders.length && result === null; i++) {\r\n                    result = _barcodeReaders[i].decodePattern(barcodeLine.line);\r\n                }\r\n                if(result === null){\r\n                    return null;\r\n                }\r\n                return {\r\n                    codeResult: result,\r\n                    barcodeLine: barcodeLine\r\n                };\r\n\r\n            }\r\n\r\n            /**\r\n             * This method slices the given area apart and tries to detect a barcode-pattern\r\n             * for each slice. It returns the decoded barcode, or null if nothing was found\r\n             * @param {Array} box\r\n             * @param {Array} line\r\n             * @param {Number} lineAngle\r\n             */\r\n            function tryDecodeBruteForce(box, line, lineAngle) {\r\n                var sideLength = Math.sqrt(Math.pow(box[1][0] - box[0][0], 2) + Math.pow((box[1][1] - box[0][1]), 2)),\r\n                    i,\r\n                    slices = 16,\r\n                    result = null,\r\n                    dir,\r\n                    extension,\r\n                    xdir = Math.sin(lineAngle),\r\n                    ydir = Math.cos(lineAngle);\r\n\r\n                for ( i = 1; i < slices && result === null; i++) {\r\n                    // move line perpendicular to angle\r\n                    dir = sideLength / slices * i * (i % 2 === 0 ? -1 : 1);\r\n                    extension = {\r\n                        y : dir * xdir,\r\n                        x : dir * ydir\r\n                    };\r\n                    line[0].y += extension.x;\r\n                    line[0].x -= extension.y;\r\n                    line[1].y += extension.x;\r\n                    line[1].x -= extension.y;\r\n\r\n                    result = tryDecode(line);\r\n                }\r\n                return result;\r\n            }\r\n\r\n            function getLineLength(line) {\r\n                return Math.sqrt(\r\n                    Math.pow(Math.abs(line[1].y - line[0].y), 2) +\r\n                    Math.pow(Math.abs(line[1].x - line[0].x), 2));\r\n            }\r\n\r\n            /**\r\n             * With the help of the configured readers (Code128 or EAN) this function tries to detect a\r\n             * valid barcode pattern within the given area.\r\n             * @param {Object} box The area to search in\r\n             * @returns {Object} the result {codeResult, line, angle, pattern, threshold}\r\n             */\r\n            function decodeFromBoundingBox(box) {\r\n                var line,\r\n                    lineAngle,\r\n                    ctx = _canvas.ctx.overlay,\r\n                    result,\r\n                    lineLength;\r\n\r\n                if (config.drawBoundingBox && ctx) {\r\n                    ImageDebug.drawPath(box, {x: 0, y: 1}, ctx, {color: "blue", lineWidth: 2});\r\n                }\r\n\r\n                line = getLine(box);\r\n                lineLength = getLineLength(line);\r\n                lineAngle = Math.atan2(line[1].y - line[0].y, line[1].x - line[0].x);\r\n                line = getExtendedLine(line, lineAngle, Math.floor(lineLength*0.1));\r\n                if(line === null){\r\n                    return null;\r\n                }\r\n\r\n                result = tryDecode(line);\r\n                if(result === null) {\r\n                    result = tryDecodeBruteForce(box, line, lineAngle);\r\n                }\r\n\r\n                if(result === null) {\r\n                    return null;\r\n                }\r\n\r\n                if (result && config.drawScanline && ctx) {\r\n                    ImageDebug.drawPath(line, {x: \'x\', y: \'y\'}, ctx, {color: \'red\', lineWidth: 3});\r\n                }\r\n\r\n                return {\r\n                    codeResult : result.codeResult,\r\n                    line : line,\r\n                    angle : lineAngle,\r\n                    pattern : result.barcodeLine.line,\r\n                    threshold : result.barcodeLine.threshold\r\n                };\r\n            }\r\n\r\n            return {\r\n                decodeFromBoundingBox : function(box) {\r\n                    return decodeFromBoundingBox(box);\r\n                },\r\n                decodeFromBoundingBoxes : function(boxes) {\r\n                    var i, result;\r\n                    for ( i = 0; i < boxes.length; i++) {\r\n                        result = decodeFromBoundingBox(boxes[i]);\r\n                        if (result && result.codeResult) {\r\n                            result.box = boxes[i];\r\n                            return result;\r\n                        }\r\n                    }\r\n                },\r\n                setReaders: function(readers) {\r\n                    config.readers = readers;\r\n                    _barcodeReaders.length = 0;\r\n                    initReaders();\r\n                }\r\n            };\r\n        }\r\n    };\r\n\r\n    return (BarcodeDecoder);\r\n});\r\n\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\'frame_grabber\',["cv_utils"], function(CVUtils) {\r\n    "use strict";\r\n\r\n    var FrameGrabber = {};\r\n\r\n    FrameGrabber.create = function(inputStream, canvas) {\r\n        var _that = {},\r\n            _streamConfig = inputStream.getConfig(),\r\n            _video_size = CVUtils.imageRef(inputStream.getRealWidth(), inputStream.getRealHeight()),\r\n            _canvasSize = inputStream.getCanvasSize(),\r\n            _size = CVUtils.imageRef(inputStream.getWidth(), inputStream.getHeight()),\r\n            topRight = inputStream.getTopRight(),\r\n            _sx = topRight.x,\r\n            _sy = topRight.y,\r\n            _canvas,\r\n            _ctx = null,\r\n            _data = null;\r\n\r\n        _canvas = canvas ? canvas : document.createElement("canvas");\r\n        _canvas.width = _canvasSize.x;\r\n        _canvas.height = _canvasSize.y;\r\n        _ctx = _canvas.getContext("2d");\r\n        _data = new Uint8Array(_size.x * _size.y);\r\n        console.log("FrameGrabber", JSON.stringify({\r\n            size: _size,\r\n            topRight: topRight,\r\n            videoSize: _video_size,\r\n            canvasSize: _canvasSize\r\n        }));\r\n\r\n        /**\r\n         * Uses the given array as frame-buffer \r\n         */\r\n        _that.attachData = function(data) {\r\n            _data = data;\r\n        };\r\n\r\n        /**\r\n         * Returns the used frame-buffer\r\n         */\r\n        _that.getData = function() {\r\n            return _data;\r\n        };\r\n\r\n        /**\r\n         * Fetches a frame from the input-stream and puts into the frame-buffer.\r\n         * The image-data is converted to gray-scale and then half-sampled if configured.\r\n         */\r\n        _that.grab = function() {\r\n            var doHalfSample = _streamConfig.halfSample,\r\n                frame = inputStream.getFrame(),\r\n                ctxData;\r\n            if (frame) {\r\n                _ctx.drawImage(frame, 0, 0, _canvasSize.x, _canvasSize.y);\r\n                ctxData = _ctx.getImageData(_sx, _sy, _size.x, _size.y).data;\r\n                if(doHalfSample){\r\n                    CVUtils.grayAndHalfSampleFromCanvasData(ctxData, _size, _data);\r\n                } else {\r\n                    CVUtils.computeGray(ctxData, _data, _streamConfig);\r\n                }\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        _that.getSize = function() {\r\n            return _size;\r\n        };\r\n\r\n        return _that;\r\n    };\r\n\r\n    return (FrameGrabber);\r\n});\r\n\n/**\r\n * The basic configuration\r\n */\r\n\r\ndefine(\'config\',[],function(){\r\n  var config = {\r\n      inputStream: { name: "Live",\r\n          type: "LiveStream",\r\n          constraints: {\r\n              width: 640,\r\n              height: 480,\r\n              minAspectRatio: 0,\r\n              maxAspectRatio: 100,\r\n              facing: "environment" // or user\r\n          },\r\n          area: {\r\n              top: "0%",\r\n              right: "0%",\r\n              left: "0%",\r\n              bottom: "0%"\r\n          },\r\n          singleChannel: false // true: only the red color-channel is read\r\n      },\r\n      tracking: false,\r\n      debug: false,\r\n      controls: false,\r\n      locate: true,\r\n      numOfWorkers: 4,\r\n      visual: {\r\n        show: true\r\n      },\r\n      decoder:{\r\n        drawBoundingBox: false,\r\n        showFrequency: false,\r\n        drawScanline: false,\r\n        showPattern: false,\r\n        readers: [\r\n          \'code_128_reader\'\r\n        ]\r\n      },\r\n      locator: {\r\n        halfSample: true,\r\n        patchSize: "medium", // x-small, small, medium, large, x-large\r\n        showCanvas: false,\r\n        showPatches: false,\r\n        showFoundPatches: false,\r\n        showSkeleton: false,\r\n        showLabels: false,\r\n        showPatchLabels: false,\r\n        showRemainingPatchLabels: false,\r\n        boxFromPatches: {\r\n          showTransformed: false,\r\n          showTransformedBox: false,\r\n          showBB: false\r\n        }\r\n      }\r\n   };\r\n\r\n   return config;\r\n});\r\n\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\'events\',[],function() {\r\n    "use strict";\r\n\r\n    var _events = function() {\r\n        var events = {};\r\n\r\n        function getEvent(eventName) {\r\n            if (!events[eventName]) {\r\n                events[eventName] = {\r\n                    subscribers : []\r\n                };\r\n            }\r\n            return events[eventName];\r\n        }\r\n        \r\n        function clearEvents(){\r\n            events = {};\r\n        }\r\n\r\n        function publishSubscription(subscription, data) {\r\n            if (subscription.async) {\r\n                setTimeout(function() {\r\n                    subscription.callback(data);\r\n                }, 4);\r\n            } else {\r\n                subscription.callback(data);\r\n            }\r\n        }\r\n        \r\n        function subscribe(event, callback, async) {\r\n            var subscription;\r\n\r\n            if ( typeof callback === "function") {\r\n                subscription = {\r\n                    callback : callback,\r\n                    async : async\r\n                };\r\n            } else {\r\n                subscription = callback;\r\n                if (!subscription.callback) {\r\n                    throw "Callback was not specified on options";\r\n                }\r\n            }\r\n\r\n            getEvent(event).subscribers.push(subscription);\r\n        }\r\n\r\n        return {\r\n            subscribe : function(event, callback, async) {\r\n                return subscribe(event, callback, async);\r\n            },\r\n            publish : function(eventName, data) {\r\n                var event = getEvent(eventName),\r\n                    subscribers = event.subscribers;\r\n                    \r\n                event.subscribers = subscribers.filter(function(subscriber) {\r\n                    publishSubscription(subscriber, data);\r\n                    return !subscriber.once;\r\n                });\r\n            },\r\n            once: function(event, callback, async) {\r\n                subscribe(event, {\r\n                    callback: callback,\r\n                    async: async,\r\n                    once: true\r\n                });\r\n            },\r\n            unsubscribe: function(eventName, callback) {\r\n                var event;\r\n                \r\n                if (eventName) {\r\n                    event = getEvent(eventName);\r\n                    if (event && callback) {\r\n                        event.subscribers = event.subscribers.filter(function(subscriber){\r\n                            return subscriber.callback !== callback;\r\n                        });\r\n                    } else {\r\n                        event.subscribers = [];\r\n                    }\r\n                } else {\r\n                    clearEvents();\r\n                }\r\n            }\r\n        };\r\n    }();\r\n\r\n    return _events;\r\n}); \n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define, MediaStreamTrack */\r\n\r\ndefine(\'camera_access\',["html_utils"], function(HtmlUtils) {\r\n    "use strict";\r\n    var streamRef,\r\n        loadedDataHandler;\r\n\r\n    /**\r\n     * Wraps browser-specific getUserMedia\r\n     * @param {Object} constraints\r\n     * @param {Object} success Callback\r\n     * @param {Object} failure Callback\r\n     */\r\n    function getUserMedia(constraints, success, failure) {\r\n        if (typeof navigator.getUserMedia !== \'undefined\') {\r\n            navigator.getUserMedia(constraints, function (stream) {\r\n                streamRef = stream;\r\n                var videoSrc = (window.URL && window.URL.createObjectURL(stream)) || stream;\r\n                success.apply(null, [videoSrc]);\r\n            }, failure);\r\n        } else {\r\n            failure(new TypeError("getUserMedia not available"));\r\n        }\r\n    }\r\n\r\n    function loadedData(video, callback) {\r\n        var attempts = 10;\r\n\r\n        function checkVideo() {\r\n            if (attempts > 0) {\r\n                if (video.videoWidth > 0 && video.videoHeight > 0) {\r\n                    console.log(video.videoWidth + "px x " + video.videoHeight + "px");\r\n                    callback();\r\n                } else {\r\n                    window.setTimeout(checkVideo, 500);\r\n                }\r\n            } else {\r\n                callback(\'Unable to play video stream. Is webcam working?\');\r\n            }\r\n            attempts--;\r\n        }\r\n        checkVideo();\r\n    }\r\n\r\n    /**\r\n     * Tries to attach the camera-stream to a given video-element\r\n     * and calls the callback function when the content is ready\r\n     * @param {Object} constraints\r\n     * @param {Object} video\r\n     * @param {Object} callback\r\n     */\r\n    function initCamera(constraints, video, callback) {\r\n        getUserMedia(constraints, function(src) {\r\n            video.src = src;\r\n            if (loadedDataHandler) {\r\n                video.removeEventListener("loadeddata", loadedDataHandler, false);\r\n            }\r\n            loadedDataHandler = loadedData.bind(null, video, callback);\r\n            video.addEventListener(\'loadeddata\', loadedDataHandler, false);\r\n            video.play();\r\n        }, function(e) {\r\n            callback(e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Normalizes the incoming constraints to satisfy the current browser\r\n     * @param config\r\n     * @param cb Callback which is called whenever constraints are created\r\n     * @returns {*}\r\n     */\r\n    function normalizeConstraints(config, cb) {\r\n        var constraints = {\r\n                audio: false,\r\n                video: true\r\n            },\r\n            videoConstraints = HtmlUtils.mergeObjects({\r\n                width: 640,\r\n                height: 480,\r\n                minAspectRatio: 0,\r\n                maxAspectRatio: 100,\r\n                facing: "environment"\r\n            }, config);\r\n\r\n        if ( typeof MediaStreamTrack !== \'undefined\' && typeof MediaStreamTrack.getSources !== \'undefined\') {\r\n            MediaStreamTrack.getSources(function(sourceInfos) {\r\n                var videoSourceId;\r\n                for (var i = 0; i != sourceInfos.length; ++i) {\r\n                    var sourceInfo = sourceInfos[i];\r\n                    if (sourceInfo.kind == "video" && sourceInfo.facing == videoConstraints.facing) {\r\n                        videoSourceId = sourceInfo.id;\r\n                    }\r\n                }\r\n                constraints.video = {\r\n                    mandatory: {\r\n                        minWidth: videoConstraints.width,\r\n                        minHeight: videoConstraints.height,\r\n                        minAspectRatio: videoConstraints.minAspectRatio,\r\n                        maxAspectRatio: videoConstraints.maxAspectRatio\r\n                    },\r\n                    optional: [{\r\n                        sourceId: videoSourceId\r\n                    }]\r\n                };\r\n                return cb(constraints);\r\n            });\r\n        } else {\r\n            constraints.video = {\r\n                mediaSource: "camera",\r\n                width: { min: videoConstraints.width, max: videoConstraints.width },\r\n                height: { min: videoConstraints.height, max: videoConstraints.height },\r\n                require: ["width", "height"]\r\n            };\r\n            return cb(constraints);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Requests the back-facing camera of the user. The callback is called\r\n     * whenever the stream is ready to be consumed, or if an error occures.\r\n     * @param {Object} video\r\n     * @param {Object} callback\r\n     */\r\n    function request(video, videoConstraints, callback) {\r\n        normalizeConstraints(videoConstraints, function(constraints) {\r\n            initCamera(constraints, video, callback);\r\n        });\r\n    }\r\n\r\n    return {\r\n        request : function(video, constraints, callback) {\r\n            request(video, constraints, callback);\r\n        },\r\n        release : function() {\r\n            var tracks = streamRef && streamRef.getVideoTracks();\r\n            if (tracks.length) {\r\n                tracks[0].stop();\r\n            }\r\n            streamRef = null;\r\n        }\r\n    };\r\n});\r\n\n/* jshint undef: true, unused: true, browser:true, devel: true */\r\n/* global define */\r\n\r\ndefine(\'result_collector\',["image_debug"], function(ImageDebug) {\r\n    "use strict";\r\n\r\n    function contains(codeResult, list) {\r\n        if (list) {\r\n            return list.some(function (item) {\r\n                return Object.keys(item).every(function (key) {\r\n                    return item[key] === codeResult[key];\r\n                });\r\n            });\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function passesFilter(codeResult, filter) {\r\n        if (typeof filter === \'function\') {\r\n            return filter(codeResult);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    return {\r\n        create: function(config) {\r\n            var canvas = document.createElement("canvas"),\r\n                ctx = canvas.getContext("2d"),\r\n                results = [],\r\n                capacity = config.capacity || 20,\r\n                capture = config.capture === true;\r\n\r\n            function matchesConstraints(codeResult) {\r\n                return capacity && codeResult && !contains(codeResult, config.blacklist) && passesFilter(codeResult, config.filter);\r\n            }\r\n\r\n            return {\r\n                addResult: function(data, imageSize, codeResult) {\r\n                    var result = {};\r\n\r\n                    if (matchesConstraints(codeResult)) {\r\n                        capacity--;\r\n                        result.codeResult = codeResult;\r\n                        if (capture) {\r\n                            canvas.width = imageSize.x;\r\n                            canvas.height = imageSize.y;\r\n                            ImageDebug.drawImage(data, imageSize, ctx);\r\n                            result.frame = canvas.toDataURL();\r\n                        }\r\n                        results.push(result);\r\n                    }\r\n                },\r\n                getResults: function() {\r\n                    return results;\r\n                }\r\n            };\r\n        }\r\n    };\r\n});\r\n\n/* jshint undef: true, unused: true, browser:true, devel: true, evil: true */\r\n/* global define, vec2 */\r\n\r\n\r\ndefine(\'quagga\',[\r\n        "input_stream",\r\n        "image_wrapper",\r\n        "barcode_locator",\r\n        "barcode_decoder",\r\n        "frame_grabber",\r\n        "html_utils",\r\n        "config",\r\n        "events",\r\n        "camera_access",\r\n        "image_debug",\r\n        "result_collector"],\r\nfunction(InputStream,\r\n         ImageWrapper,\r\n         BarcodeLocator,\r\n         BarcodeDecoder,\r\n         FrameGrabber,\r\n         HtmlUtils,\r\n         _config,\r\n         Events,\r\n         CameraAccess,\r\n         ImageDebug,\r\n         ResultCollector) {\r\n    "use strict";\r\n    \r\n    var _inputStream,\r\n        _framegrabber,\r\n        _stopped,\r\n        _canvasContainer = {\r\n            ctx : {\r\n                image : null,\r\n                overlay : null\r\n            },\r\n            dom : {\r\n                image : null,\r\n                overlay : null\r\n            }\r\n        },\r\n        _inputImageWrapper,\r\n        _boxSize,\r\n        _decoder,\r\n        _workerPool = [],\r\n        _onUIThread = true,\r\n        _resultCollector;\r\n\r\n    function initializeData(imageWrapper) {\r\n        initBuffers(imageWrapper);\r\n        _decoder = BarcodeDecoder.create(_config.decoder, _inputImageWrapper);\r\n    }\r\n\r\n    function initConfig() {\r\n        if (typeof document !== "undefined") {\r\n            var vis = [{\r\n                node: document.querySelector("div[data-controls]"),\r\n                prop: _config.controls\r\n            }, {\r\n                node: _canvasContainer.dom.overlay,\r\n                prop: _config.visual.show\r\n            }];\r\n\r\n            for (var i = 0; i < vis.length; i++) {\r\n                if (vis[i].node) {\r\n                    if (vis[i].prop === true) {\r\n                        vis[i].node.style.display = "block";\r\n                    } else {\r\n                        vis[i].node.style.display = "none";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function initInputStream(cb) {\r\n        var video;\r\n        if (_config.inputStream.type == "VideoStream") {\r\n            video = document.createElement("video");\r\n            _inputStream = InputStream.createVideoStream(video);\r\n        } else if (_config.inputStream.type == "ImageStream") {\r\n            _inputStream = InputStream.createImageStream();\r\n        } else if (_config.inputStream.type == "LiveStream") {\r\n            var $viewport = document.querySelector("#interactive.viewport");\r\n            if ($viewport) {\r\n                video = $viewport.querySelector("video");\r\n                if (!video) {\r\n                    video = document.createElement("video");\r\n                    $viewport.appendChild(video);\r\n                }\r\n            }\r\n            _inputStream = InputStream.createLiveStream(video);\r\n            CameraAccess.request(video, _config.inputStream.constraints, function(err) {\r\n                if (!err) {\r\n                    _inputStream.trigger("canrecord");\r\n                } else {\r\n                    return cb(err);\r\n                }\r\n            });\r\n        }\r\n\r\n        _inputStream.setAttribute("preload", "auto");\r\n        _inputStream.setAttribute("autoplay", true);\r\n        _inputStream.setInputStream(_config.inputStream);\r\n        _inputStream.addEventListener("canrecord", canRecord.bind(undefined, cb));\r\n    }\r\n\r\n    function canRecord(cb) {\r\n        BarcodeLocator.checkImageConstraints(_inputStream, _config.locator);\r\n        initCanvas();\r\n        _framegrabber = FrameGrabber.create(_inputStream, _canvasContainer.dom.image);\r\n        initConfig();\r\n\r\n        if (_config.numOfWorkers > 0) {\r\n            initWorkers(function() {\r\n                console.log("Workers created");\r\n                ready(cb);\r\n            });\r\n        } else {\r\n            initializeData();\r\n            ready(cb);\r\n        }\r\n    }\r\n\r\n    function ready(cb){\r\n        _inputStream.play();\r\n        cb();\r\n    }\r\n\r\n    function initCanvas() {\r\n        if (typeof document !== "undefined") {\r\n            var $viewport = document.querySelector("#interactive.viewport");\r\n            _canvasContainer.dom.image = document.querySelector("canvas.imgBuffer");\r\n            if (!_canvasContainer.dom.image) {\r\n                _canvasContainer.dom.image = document.createElement("canvas");\r\n                _canvasContainer.dom.image.className = "imgBuffer";\r\n                if ($viewport && _config.inputStream.type == "ImageStream") {\r\n                    $viewport.appendChild(_canvasContainer.dom.image);\r\n                }\r\n            }\r\n            _canvasContainer.ctx.image = _canvasContainer.dom.image.getContext("2d");\r\n            _canvasContainer.dom.image.width = _inputStream.getCanvasSize().x;\r\n            _canvasContainer.dom.image.height = _inputStream.getCanvasSize().y;\r\n\r\n            _canvasContainer.dom.overlay = document.querySelector("canvas.drawingBuffer");\r\n            if (!_canvasContainer.dom.overlay) {\r\n                _canvasContainer.dom.overlay = document.createElement("canvas");\r\n                _canvasContainer.dom.overlay.className = "drawingBuffer";\r\n                if ($viewport) {\r\n                    $viewport.appendChild(_canvasContainer.dom.overlay);\r\n                }\r\n                var clearFix = document.createElement("br");\r\n                clearFix.setAttribute("clear", "all");\r\n                if ($viewport) {\r\n                    $viewport.appendChild(clearFix);\r\n                }\r\n            }\r\n            _canvasContainer.ctx.overlay = _canvasContainer.dom.overlay.getContext("2d");\r\n            _canvasContainer.dom.overlay.width = _inputStream.getCanvasSize().x;\r\n            _canvasContainer.dom.overlay.height = _inputStream.getCanvasSize().y;\r\n        }\r\n    }\r\n\r\n    function initBuffers(imageWrapper) {\r\n        if (imageWrapper) {\r\n            _inputImageWrapper = imageWrapper;\r\n        } else {\r\n            _inputImageWrapper = new ImageWrapper({\r\n                x : _inputStream.getWidth(),\r\n                y : _inputStream.getHeight()\r\n            });\r\n        }\r\n\r\n        console.log(_inputImageWrapper.size);\r\n        _boxSize = [\r\n                vec2.create([0, 0]),\r\n                vec2.create([0, _inputImageWrapper.size.y]),\r\n                vec2.create([_inputImageWrapper.size.x, _inputImageWrapper.size.y]),\r\n                vec2.create([_inputImageWrapper.size.x, 0])\r\n            ];\r\n        BarcodeLocator.init(_inputImageWrapper, _config.locator);\r\n    }\r\n\r\n    function getBoundingBoxes() {\r\n        if (_config.locate) {\r\n            return BarcodeLocator.locate();\r\n        } else {\r\n            return [[\r\n                vec2.create(_boxSize[0]),\r\n                vec2.create(_boxSize[1]),\r\n                vec2.create(_boxSize[2]),\r\n                vec2.create(_boxSize[3])]];\r\n        }\r\n    }\r\n\r\n    function transformResult(result) {\r\n        var topRight = _inputStream.getTopRight(),\r\n            xOffset = topRight.x,\r\n            yOffset = topRight.y,\r\n            i;\r\n\r\n        if (!result || (xOffset === 0 && yOffset === 0)) {\r\n            return;\r\n        }\r\n\r\n\r\n        if (result.line && result.line.length === 2) {\r\n            moveLine(result.line);\r\n        }\r\n        if (result.boxes && result.boxes.length > 0) {\r\n            for (i = 0; i < result.boxes.length; i++) {\r\n                moveBox(result.boxes[i]);\r\n            }\r\n        }\r\n\r\n        function moveBox(box) {\r\n            var corner = box.length;\r\n\r\n            while(corner--) {\r\n                box[corner][0] += xOffset;\r\n                box[corner][1] += yOffset;\r\n            }\r\n        }\r\n\r\n        function moveLine(line) {\r\n            line[0].x += xOffset;\r\n            line[0].y += yOffset;\r\n            line[1].x += xOffset;\r\n            line[1].y += yOffset;\r\n        }\r\n    }\r\n\r\n    function publishResult(result, imageData) {\r\n        if (_onUIThread) {\r\n            transformResult(result);\r\n            if (imageData && result && result.codeResult) {\r\n                if (_resultCollector) {\r\n                    _resultCollector.addResult(imageData, _inputStream.getCanvasSize(), result.codeResult);\r\n                }\r\n            }\r\n        }\r\n\r\n        Events.publish("processed", result);\r\n        if (result && result.codeResult) {\r\n            Events.publish("detected", result);\r\n        }\r\n    }\r\n\r\n    function locateAndDecode() {\r\n        var result,\r\n            boxes;\r\n\r\n        boxes = getBoundingBoxes();\r\n        if (boxes) {\r\n            result = _decoder.decodeFromBoundingBoxes(boxes);\r\n            result = result || {};\r\n            result.boxes = boxes;\r\n            publishResult(result, _inputImageWrapper.data);\r\n        } else {\r\n            publishResult();\r\n        }\r\n    }\r\n\r\n    function update() {\r\n        var availableWorker;\r\n\r\n        if (_onUIThread) {\r\n            if (_workerPool.length > 0) {\r\n                availableWorker = _workerPool.filter(function(workerThread) {\r\n                    return !workerThread.busy;\r\n                })[0];\r\n                if (availableWorker) {\r\n                    _framegrabber.attachData(availableWorker.imageData);\r\n                } else {\r\n                    return; // all workers are busy\r\n                }\r\n            } else {\r\n                _framegrabber.attachData(_inputImageWrapper.data);\r\n            }\r\n            if (_framegrabber.grab()) {\r\n                if (availableWorker) {\r\n                    availableWorker.busy = true;\r\n                    availableWorker.worker.postMessage({\r\n                        cmd: \'process\',\r\n                        imageData: availableWorker.imageData\r\n                    }, [availableWorker.imageData.buffer]);\r\n                } else {\r\n                    locateAndDecode();\r\n                }\r\n            }\r\n        } else {\r\n            locateAndDecode();\r\n        }\r\n    }\r\n\r\n    function start() {\r\n        _stopped = false;\r\n        ( function frame() {\r\n            if (!_stopped) {\r\n                update();\r\n                if (_onUIThread && _config.inputStream.type == "LiveStream") {\r\n                    window.requestAnimFrame(frame);\r\n                }\r\n            }\r\n        }());\r\n    }\r\n\r\n    function initWorkers(cb) {\r\n        var i;\r\n        _workerPool = [];\r\n\r\n        for (i = 0; i < _config.numOfWorkers; i++) {\r\n            initWorker(workerInitialized);\r\n        }\r\n\r\n        function workerInitialized(workerThread) {\r\n            _workerPool.push(workerThread);\r\n            if (_workerPool.length >= _config.numOfWorkers){\r\n                cb();\r\n            }\r\n        }\r\n    }\r\n\r\n    function initWorker(cb) {\r\n        var blobURL,\r\n            workerThread = {\r\n                worker: undefined,\r\n                imageData: new Uint8Array(_inputStream.getWidth() * _inputStream.getHeight()),\r\n                busy: true\r\n            };\r\n\r\n        blobURL = generateWorkerBlob();\r\n        workerThread.worker = new Worker(blobURL);\r\n        URL.revokeObjectURL(blobURL);\r\n\r\n        workerThread.worker.onmessage = function(e) {\r\n            if (e.data.event === \'initialized\') {\r\n                workerThread.busy = false;\r\n                workerThread.imageData = new Uint8Array(e.data.imageData);\r\n                console.log("Worker initialized");\r\n                return cb(workerThread);\r\n            } else if (e.data.event === \'processed\') {\r\n                workerThread.imageData = new Uint8Array(e.data.imageData);\r\n                workerThread.busy = false;\r\n                publishResult(e.data.result, workerThread.imageData);\r\n            }\r\n        };\r\n\r\n        workerThread.worker.postMessage({\r\n            cmd: \'init\',\r\n            size: {x: _inputStream.getWidth(), y: _inputStream.getHeight()},\r\n            imageData: workerThread.imageData,\r\n            config: _config\r\n        }, [workerThread.imageData.buffer]);\r\n    }\r\n\r\n\r\n    function workerInterface(factory) {\r\n        if (factory) {\r\n            var Quagga = factory();\r\n            if (!Quagga) {\r\n                return;\r\n            }\r\n        }\r\n        /* jshint ignore:start */\r\n        var imageWrapper;\r\n\r\n        self.onmessage = function(e) {\r\n            if (e.data.cmd === \'init\') {\r\n                var config = e.data.config;\r\n                config.numOfWorkers = 0;\r\n                imageWrapper = new Quagga.ImageWrapper({\r\n                    x : e.data.size.x,\r\n                    y : e.data.size.y\r\n                }, new Uint8Array(e.data.imageData));\r\n                Quagga.init(config, ready, imageWrapper);\r\n                Quagga.onProcessed(onProcessed);\r\n            } else if (e.data.cmd === \'process\') {\r\n                imageWrapper.data = new Uint8Array(e.data.imageData);\r\n                Quagga.start();\r\n            } else if (e.data.cmd === \'setReaders\') {\r\n                Quagga.setReaders(e.data.readers);\r\n            }\r\n        };\r\n\r\n        function onProcessed(result) {\r\n            self.postMessage({\'event\': \'processed\', imageData: imageWrapper.data, result: result}, [imageWrapper.data.buffer]);\r\n        }\r\n\r\n        function ready() {\r\n            self.postMessage({\'event\': \'initialized\', imageData: imageWrapper.data}, [imageWrapper.data.buffer]);\r\n        }\r\n        /* jshint ignore:end */\r\n    }\r\n\r\n    function generateWorkerBlob() {\r\n        var blob,\r\n            factorySource;\r\n\r\n        /* jshint ignore:start */\r\n        if (typeof __factorySource__ !== \'undefined\') {\r\n            factorySource = __factorySource__;\r\n        }\r\n        /* jshint ignore:end */\r\n\r\n        blob = new Blob([\'(\' + workerInterface.toString() + \')(\' + factorySource + \');\'],\r\n            {type : \'text/javascript\'});\r\n\r\n        return window.URL.createObjectURL(blob);\r\n    }\r\n\r\n    function setReaders(readers) {\r\n        if (_decoder) {\r\n            _decoder.setReaders(readers);\r\n        } else if (_onUIThread && _workerPool.length > 0) {\r\n            _workerPool.forEach(function(workerThread) {\r\n                workerThread.worker.postMessage({cmd: \'setReaders\', readers: readers});\r\n            });\r\n        }\r\n    }\r\n\r\n    return {\r\n        init : function(config, cb, imageWrapper) {\r\n            _config = HtmlUtils.mergeObjects(_config, config);\r\n            if (imageWrapper) {\r\n                _onUIThread = false;\r\n                initializeData(imageWrapper);\r\n                return cb();\r\n            } else {\r\n                initInputStream(cb);\r\n            }\r\n        },\r\n        start : function() {\r\n            start();\r\n        },\r\n        stop : function() {\r\n            _stopped = true;\r\n            _workerPool.forEach(function(workerThread) {\r\n                workerThread.worker.terminate();\r\n                console.log("Worker terminated!");\r\n            });\r\n            _workerPool.length = 0;\r\n            if (_config.inputStream.type === "LiveStream") {\r\n                CameraAccess.release();\r\n                _inputStream.clearEventHandlers();\r\n            }\r\n        },\r\n        pause: function() {\r\n            _stopped = true;\r\n        },\r\n        onDetected : function(callback) {\r\n            Events.subscribe("detected", callback);\r\n        },\r\n        onProcessed: function(callback) {\r\n            Events.subscribe("processed", callback);\r\n        },\r\n        setReaders: function(readers) {\r\n            setReaders(readers);\r\n        },\r\n        registerResultCollector: function(resultCollector) {\r\n            if (resultCollector && typeof resultCollector.addResult === \'function\') {\r\n                _resultCollector = resultCollector;\r\n            }\r\n        },\r\n        canvas : _canvasContainer,\r\n        decodeSingle : function(config, resultCallback) {\r\n            config = HtmlUtils.mergeObjects({\r\n                inputStream: {\r\n                    type : "ImageStream",\r\n                    sequence : false,\r\n                    size: 800,\r\n                    src: config.src\r\n                },\r\n                numOfWorkers: 1,\r\n                locator: {\r\n                    halfSample: false\r\n                }\r\n            }, config);\r\n            this.init(config, function() {\r\n                Events.once("processed", function(result) {\r\n                    _stopped = true;\r\n                    resultCallback.call(null, result);\r\n                }, true);\r\n                start();\r\n            });\r\n        },\r\n        ImageWrapper: ImageWrapper,\r\n        ImageDebug: ImageDebug,\r\n        ResultCollector: ResultCollector\r\n    };\r\n});\r\n\n    return require(\'quagga\');\r\n}));\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/quagga/dist/quagga.js\n ** module id = 110\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/quagga/dist/quagga.js?');
},204:function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n  * Reqwest! A general purpose XHR connection manager\n  * license MIT (c) Dustin Diaz 2015\n  * https://github.com/ded/reqwest\n  */\n\n!function (name, context, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n  else if (true) !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  else context[name] = definition()\n}('reqwest', this, function () {\n\n  var context = this\n\n  if ('window' in context) {\n    var doc = document\n      , byTag = 'getElementsByTagName'\n      , head = doc[byTag]('head')[0]\n  } else {\n    var XHR2\n    try {\n      XHR2 = __webpack_require__(206)\n    } catch (ex) {\n      throw new Error('Peer dependency `xhr2` required! Please npm install xhr2')\n    }\n  }\n\n\n  var httpsRe = /^http/\n    , protocolRe = /(^\\w+):\\/\\//\n    , twoHundo = /^(20\\d|1223)$/ //http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n    , readyState = 'readyState'\n    , contentType = 'Content-Type'\n    , requestedWith = 'X-Requested-With'\n    , uniqid = 0\n    , callbackPrefix = 'reqwest_' + (+new Date())\n    , lastValue // data stored by the most recent JSONP callback\n    , xmlHttpRequest = 'XMLHttpRequest'\n    , xDomainRequest = 'XDomainRequest'\n    , noop = function () {}\n\n    , isArray = typeof Array.isArray == 'function'\n        ? Array.isArray\n        : function (a) {\n            return a instanceof Array\n          }\n\n    , defaultHeaders = {\n          'contentType': 'application/x-www-form-urlencoded'\n        , 'requestedWith': xmlHttpRequest\n        , 'accept': {\n              '*':  'text/javascript, text/html, application/xml, text/xml, */*'\n            , 'xml':  'application/xml, text/xml'\n            , 'html': 'text/html'\n            , 'text': 'text/plain'\n            , 'json': 'application/json, text/javascript'\n            , 'js':   'application/javascript, text/javascript'\n          }\n      }\n\n    , xhr = function(o) {\n        // is it x-domain\n        if (o['crossOrigin'] === true) {\n          var xhr = context[xmlHttpRequest] ? new XMLHttpRequest() : null\n          if (xhr && 'withCredentials' in xhr) {\n            return xhr\n          } else if (context[xDomainRequest]) {\n            return new XDomainRequest()\n          } else {\n            throw new Error('Browser does not support cross-origin requests')\n          }\n        } else if (context[xmlHttpRequest]) {\n          return new XMLHttpRequest()\n        } else if (XHR2) {\n          return new XHR2()\n        } else {\n          return new ActiveXObject('Microsoft.XMLHTTP')\n        }\n      }\n    , globalSetupOptions = {\n        dataFilter: function (data) {\n          return data\n        }\n      }\n\n  function succeed(r) {\n    var protocol = protocolRe.exec(r.url)\n    protocol = (protocol && protocol[1]) || context.location.protocol\n    return httpsRe.test(protocol) ? twoHundo.test(r.request.status) : !!r.request.response\n  }\n\n  function handleReadyState(r, success, error) {\n    return function () {\n      // use _aborted to mitigate against IE err c00c023f\n      // (can't read props on aborted request objects)\n      if (r._aborted) return error(r.request)\n      if (r._timedOut) return error(r.request, 'Request is aborted: timeout')\n      if (r.request && r.request[readyState] == 4) {\n        r.request.onreadystatechange = noop\n        if (succeed(r)) success(r.request)\n        else\n          error(r.request)\n      }\n    }\n  }\n\n  function setHeaders(http, o) {\n    var headers = o['headers'] || {}\n      , h\n\n    headers['Accept'] = headers['Accept']\n      || defaultHeaders['accept'][o['type']]\n      || defaultHeaders['accept']['*']\n\n    var isAFormData = typeof FormData === 'function' && (o['data'] instanceof FormData);\n    // breaks cross-origin requests with legacy browsers\n    if (!o['crossOrigin'] && !headers[requestedWith]) headers[requestedWith] = defaultHeaders['requestedWith']\n    if (!headers[contentType] && !isAFormData) headers[contentType] = o['contentType'] || defaultHeaders['contentType']\n    for (h in headers)\n      headers.hasOwnProperty(h) && 'setRequestHeader' in http && http.setRequestHeader(h, headers[h])\n  }\n\n  function setCredentials(http, o) {\n    if (typeof o['withCredentials'] !== 'undefined' && typeof http.withCredentials !== 'undefined') {\n      http.withCredentials = !!o['withCredentials']\n    }\n  }\n\n  function generalCallback(data) {\n    lastValue = data\n  }\n\n  function urlappend (url, s) {\n    return url + (/\\?/.test(url) ? '&' : '?') + s\n  }\n\n  function handleJsonp(o, fn, err, url) {\n    var reqId = uniqid++\n      , cbkey = o['jsonpCallback'] || 'callback' // the 'callback' key\n      , cbval = o['jsonpCallbackName'] || reqwest.getcallbackPrefix(reqId)\n      , cbreg = new RegExp('((^|\\\\?|&)' + cbkey + ')=([^&]+)')\n      , match = url.match(cbreg)\n      , script = doc.createElement('script')\n      , loaded = 0\n      , isIE10 = navigator.userAgent.indexOf('MSIE 10.0') !== -1\n\n    if (match) {\n      if (match[3] === '?') {\n        url = url.replace(cbreg, '$1=' + cbval) // wildcard callback func name\n      } else {\n        cbval = match[3] // provided callback func name\n      }\n    } else {\n      url = urlappend(url, cbkey + '=' + cbval) // no callback details, add 'em\n    }\n\n    context[cbval] = generalCallback\n\n    script.type = 'text/javascript'\n    script.src = url\n    script.async = true\n    if (typeof script.onreadystatechange !== 'undefined' && !isIE10) {\n      // need this for IE due to out-of-order onreadystatechange(), binding script\n      // execution to an event listener gives us control over when the script\n      // is executed. See http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html\n      script.htmlFor = script.id = '_reqwest_' + reqId\n    }\n\n    script.onload = script.onreadystatechange = function () {\n      if ((script[readyState] && script[readyState] !== 'complete' && script[readyState] !== 'loaded') || loaded) {\n        return false\n      }\n      script.onload = script.onreadystatechange = null\n      script.onclick && script.onclick()\n      // Call the user callback with the last value stored and clean up values and scripts.\n      fn(lastValue)\n      lastValue = undefined\n      head.removeChild(script)\n      loaded = 1\n    }\n\n    // Add the script to the DOM head\n    head.appendChild(script)\n\n    // Enable JSONP timeout\n    return {\n      abort: function () {\n        script.onload = script.onreadystatechange = null\n        err({}, 'Request is aborted: timeout', {})\n        lastValue = undefined\n        head.removeChild(script)\n        loaded = 1\n      }\n    }\n  }\n\n  function getRequest(fn, err) {\n    var o = this.o\n      , method = (o['method'] || 'GET').toUpperCase()\n      , url = typeof o === 'string' ? o : o['url']\n      // convert non-string objects to query-string form unless o['processData'] is false\n      , data = (o['processData'] !== false && o['data'] && typeof o['data'] !== 'string')\n        ? reqwest.toQueryString(o['data'])\n        : (o['data'] || null)\n      , http\n      , sendWait = false\n\n    // if we're working on a GET request and we have data then we should append\n    // query string to end of URL and not post data\n    if ((o['type'] == 'jsonp' || method == 'GET') && data) {\n      url = urlappend(url, data)\n      data = null\n    }\n\n    if (o['type'] == 'jsonp') return handleJsonp(o, fn, err, url)\n\n    // get the xhr from the factory if passed\n    // if the factory returns null, fall-back to ours\n    http = (o.xhr && o.xhr(o)) || xhr(o)\n\n    http.open(method, url, o['async'] === false ? false : true)\n    setHeaders(http, o)\n    setCredentials(http, o)\n    if (context[xDomainRequest] && http instanceof context[xDomainRequest]) {\n        http.onload = fn\n        http.onerror = err\n        // NOTE: see\n        // http://social.msdn.microsoft.com/Forums/en-US/iewebdevelopment/thread/30ef3add-767c-4436-b8a9-f1ca19b4812e\n        http.onprogress = function() {}\n        sendWait = true\n    } else {\n      http.onreadystatechange = handleReadyState(this, fn, err)\n    }\n    o['before'] && o['before'](http)\n    if (sendWait) {\n      setTimeout(function () {\n        http.send(data)\n      }, 200)\n    } else {\n      http.send(data)\n    }\n    return http\n  }\n\n  function Reqwest(o, fn) {\n    this.o = o\n    this.fn = fn\n\n    init.apply(this, arguments)\n  }\n\n  function setType(header) {\n    // json, javascript, text/plain, text/html, xml\n    if (header.match('json')) return 'json'\n    if (header.match('javascript')) return 'js'\n    if (header.match('text')) return 'html'\n    if (header.match('xml')) return 'xml'\n  }\n\n  function init(o, fn) {\n\n    this.url = typeof o == 'string' ? o : o['url']\n    this.timeout = null\n\n    // whether request has been fulfilled for purpose\n    // of tracking the Promises\n    this._fulfilled = false\n    // success handlers\n    this._successHandler = function(){}\n    this._fulfillmentHandlers = []\n    // error handlers\n    this._errorHandlers = []\n    // complete (both success and fail) handlers\n    this._completeHandlers = []\n    this._erred = false\n    this._responseArgs = {}\n\n    var self = this\n\n    fn = fn || function () {}\n\n    if (o['timeout']) {\n      this.timeout = setTimeout(function () {\n        timedOut()\n      }, o['timeout'])\n    }\n\n    if (o['success']) {\n      this._successHandler = function () {\n        o['success'].apply(o, arguments)\n      }\n    }\n\n    if (o['error']) {\n      this._errorHandlers.push(function () {\n        o['error'].apply(o, arguments)\n      })\n    }\n\n    if (o['complete']) {\n      this._completeHandlers.push(function () {\n        o['complete'].apply(o, arguments)\n      })\n    }\n\n    function complete (resp) {\n      o['timeout'] && clearTimeout(self.timeout)\n      self.timeout = null\n      while (self._completeHandlers.length > 0) {\n        self._completeHandlers.shift()(resp)\n      }\n    }\n\n    function success (resp) {\n      var type = o['type'] || resp && setType(resp.getResponseHeader('Content-Type')) // resp can be undefined in IE\n      resp = (type !== 'jsonp') ? self.request : resp\n      // use global data filter on response text\n      var filteredResponse = globalSetupOptions.dataFilter(resp.responseText, type)\n        , r = filteredResponse\n      try {\n        resp.responseText = r\n      } catch (e) {\n        // can't assign this in IE<=8, just ignore\n      }\n      if (r) {\n        switch (type) {\n        case 'json':\n          try {\n            resp = context.JSON ? context.JSON.parse(r) : eval('(' + r + ')')\n          } catch (err) {\n            return error(resp, 'Could not parse JSON in response', err)\n          }\n          break\n        case 'js':\n          resp = eval(r)\n          break\n        case 'html':\n          resp = r\n          break\n        case 'xml':\n          resp = resp.responseXML\n              && resp.responseXML.parseError // IE trololo\n              && resp.responseXML.parseError.errorCode\n              && resp.responseXML.parseError.reason\n            ? null\n            : resp.responseXML\n          break\n        }\n      }\n\n      self._responseArgs.resp = resp\n      self._fulfilled = true\n      fn(resp)\n      self._successHandler(resp)\n      while (self._fulfillmentHandlers.length > 0) {\n        resp = self._fulfillmentHandlers.shift()(resp)\n      }\n\n      complete(resp)\n    }\n\n    function timedOut() {\n      self._timedOut = true\n      self.request.abort()\n    }\n\n    function error(resp, msg, t) {\n      resp = self.request\n      self._responseArgs.resp = resp\n      self._responseArgs.msg = msg\n      self._responseArgs.t = t\n      self._erred = true\n      while (self._errorHandlers.length > 0) {\n        self._errorHandlers.shift()(resp, msg, t)\n      }\n      complete(resp)\n    }\n\n    this.request = getRequest.call(this, success, error)\n  }\n\n  Reqwest.prototype = {\n    abort: function () {\n      this._aborted = true\n      this.request.abort()\n    }\n\n  , retry: function () {\n      init.call(this, this.o, this.fn)\n    }\n\n    /**\n     * Small deviation from the Promises A CommonJs specification\n     * http://wiki.commonjs.org/wiki/Promises/A\n     */\n\n    /**\n     * `then` will execute upon successful requests\n     */\n  , then: function (success, fail) {\n      success = success || function () {}\n      fail = fail || function () {}\n      if (this._fulfilled) {\n        this._responseArgs.resp = success(this._responseArgs.resp)\n      } else if (this._erred) {\n        fail(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)\n      } else {\n        this._fulfillmentHandlers.push(success)\n        this._errorHandlers.push(fail)\n      }\n      return this\n    }\n\n    /**\n     * `always` will execute whether the request succeeds or fails\n     */\n  , always: function (fn) {\n      if (this._fulfilled || this._erred) {\n        fn(this._responseArgs.resp)\n      } else {\n        this._completeHandlers.push(fn)\n      }\n      return this\n    }\n\n    /**\n     * `fail` will execute when the request fails\n     */\n  , fail: function (fn) {\n      if (this._erred) {\n        fn(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)\n      } else {\n        this._errorHandlers.push(fn)\n      }\n      return this\n    }\n  , 'catch': function (fn) {\n      return this.fail(fn)\n    }\n  }\n\n  function reqwest(o, fn) {\n    return new Reqwest(o, fn)\n  }\n\n  // normalize newline variants according to spec -> CRLF\n  function normalize(s) {\n    return s ? s.replace(/\\r?\\n/g, '\\r\\n') : ''\n  }\n\n  function serial(el, cb) {\n    var n = el.name\n      , t = el.tagName.toLowerCase()\n      , optCb = function (o) {\n          // IE gives value=\"\" even where there is no value attribute\n          // 'specified' ref: http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-862529273\n          if (o && !o['disabled'])\n            cb(n, normalize(o['attributes']['value'] && o['attributes']['value']['specified'] ? o['value'] : o['text']))\n        }\n      , ch, ra, val, i\n\n    // don't serialize elements that are disabled or without a name\n    if (el.disabled || !n) return\n\n    switch (t) {\n    case 'input':\n      if (!/reset|button|image|file/i.test(el.type)) {\n        ch = /checkbox/i.test(el.type)\n        ra = /radio/i.test(el.type)\n        val = el.value\n        // WebKit gives us \"\" instead of \"on\" if a checkbox has no value, so correct it here\n        ;(!(ch || ra) || el.checked) && cb(n, normalize(ch && val === '' ? 'on' : val))\n      }\n      break\n    case 'textarea':\n      cb(n, normalize(el.value))\n      break\n    case 'select':\n      if (el.type.toLowerCase() === 'select-one') {\n        optCb(el.selectedIndex >= 0 ? el.options[el.selectedIndex] : null)\n      } else {\n        for (i = 0; el.length && i < el.length; i++) {\n          el.options[i].selected && optCb(el.options[i])\n        }\n      }\n      break\n    }\n  }\n\n  // collect up all form elements found from the passed argument elements all\n  // the way down to child elements; pass a '<form>' or form fields.\n  // called with 'this'=callback to use for serial() on each element\n  function eachFormElement() {\n    var cb = this\n      , e, i\n      , serializeSubtags = function (e, tags) {\n          var i, j, fa\n          for (i = 0; i < tags.length; i++) {\n            fa = e[byTag](tags[i])\n            for (j = 0; j < fa.length; j++) serial(fa[j], cb)\n          }\n        }\n\n    for (i = 0; i < arguments.length; i++) {\n      e = arguments[i]\n      if (/input|select|textarea/i.test(e.tagName)) serial(e, cb)\n      serializeSubtags(e, [ 'input', 'select', 'textarea' ])\n    }\n  }\n\n  // standard query string style serialization\n  function serializeQueryString() {\n    return reqwest.toQueryString(reqwest.serializeArray.apply(null, arguments))\n  }\n\n  // { 'name': 'value', ... } style serialization\n  function serializeHash() {\n    var hash = {}\n    eachFormElement.apply(function (name, value) {\n      if (name in hash) {\n        hash[name] && !isArray(hash[name]) && (hash[name] = [hash[name]])\n        hash[name].push(value)\n      } else hash[name] = value\n    }, arguments)\n    return hash\n  }\n\n  // [ { name: 'name', value: 'value' }, ... ] style serialization\n  reqwest.serializeArray = function () {\n    var arr = []\n    eachFormElement.apply(function (name, value) {\n      arr.push({name: name, value: value})\n    }, arguments)\n    return arr\n  }\n\n  reqwest.serialize = function () {\n    if (arguments.length === 0) return ''\n    var opt, fn\n      , args = Array.prototype.slice.call(arguments, 0)\n\n    opt = args.pop()\n    opt && opt.nodeType && args.push(opt) && (opt = null)\n    opt && (opt = opt.type)\n\n    if (opt == 'map') fn = serializeHash\n    else if (opt == 'array') fn = reqwest.serializeArray\n    else fn = serializeQueryString\n\n    return fn.apply(null, args)\n  }\n\n  reqwest.toQueryString = function (o, trad) {\n    var prefix, i\n      , traditional = trad || false\n      , s = []\n      , enc = encodeURIComponent\n      , add = function (key, value) {\n          // If value is a function, invoke it and return its value\n          value = ('function' === typeof value) ? value() : (value == null ? '' : value)\n          s[s.length] = enc(key) + '=' + enc(value)\n        }\n    // If an array was passed in, assume that it is an array of form elements.\n    if (isArray(o)) {\n      for (i = 0; o && i < o.length; i++) add(o[i]['name'], o[i]['value'])\n    } else {\n      // If traditional, encode the \"old\" way (the way 1.3.2 or older\n      // did it), otherwise encode params recursively.\n      for (prefix in o) {\n        if (o.hasOwnProperty(prefix)) buildParams(prefix, o[prefix], traditional, add)\n      }\n    }\n\n    // spaces should be + according to spec\n    return s.join('&').replace(/%20/g, '+')\n  }\n\n  function buildParams(prefix, obj, traditional, add) {\n    var name, i, v\n      , rbracket = /\\[\\]$/\n\n    if (isArray(obj)) {\n      // Serialize array item.\n      for (i = 0; obj && i < obj.length; i++) {\n        v = obj[i]\n        if (traditional || rbracket.test(prefix)) {\n          // Treat each array item as a scalar.\n          add(prefix, v)\n        } else {\n          buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add)\n        }\n      }\n    } else if (obj && obj.toString() === '[object Object]') {\n      // Serialize object item.\n      for (name in obj) {\n        buildParams(prefix + '[' + name + ']', obj[name], traditional, add)\n      }\n\n    } else {\n      // Serialize scalar item.\n      add(prefix, obj)\n    }\n  }\n\n  reqwest.getcallbackPrefix = function () {\n    return callbackPrefix\n  }\n\n  // jQuery and Zepto compatibility, differences can be remapped here so you can call\n  // .ajax.compat(options, callback)\n  reqwest.compat = function (o, fn) {\n    if (o) {\n      o['type'] && (o['method'] = o['type']) && delete o['type']\n      o['dataType'] && (o['type'] = o['dataType'])\n      o['jsonpCallback'] && (o['jsonpCallbackName'] = o['jsonpCallback']) && delete o['jsonpCallback']\n      o['jsonp'] && (o['jsonpCallback'] = o['jsonp'])\n    }\n    return new Reqwest(o, fn)\n  }\n\n  reqwest.ajaxSetup = function (options) {\n    options = options || {}\n    for (var k in options) {\n      globalSetupOptions[k] = options[k]\n    }\n  }\n\n  return reqwest\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/reqwest/reqwest.js\n ** module id = 204\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/reqwest/reqwest.js?")},205:function(module,exports){eval("module.exports = function(module) {\r\n	if(!module.webpackPolyfill) {\r\n		module.deprecate = function() {};\r\n		module.paths = [];\r\n		// module.parent = undefined by default\r\n		module.children = [];\r\n		module.webpackPolyfill = 1;\r\n	}\r\n	return module;\r\n}\r\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 205\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///(webpack)/buildin/module.js?")},206:function(module,exports){eval("module.exports = XMLHttpRequest;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/xhr2/lib/browser.js\n ** module id = 206\n ** module chunks = 1\n **/\n//# sourceURL=webpack:///./~/xhr2/lib/browser.js?")}});